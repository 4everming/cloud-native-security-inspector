import { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { ComponentFixture, fakeAsync, TestBed, tick } from '@angular/core/testing';
import { Observable, of } from 'rxjs';
import { AssessmentService } from 'src/app/service/assessment.service';
import { PolicyService } from 'src/app/service/policy.service';
import { ShardService } from 'src/app/service/shard.service';
import { ShardTestModule } from 'src/app/shard/shard/shard.module';

import { KubeBenchReportListComponent } from './kube-bench-report-list.component';

describe('KubeBenchReportListComponent', () => {
  let component: KubeBenchReportListComponent;
  let fixture: ComponentFixture<KubeBenchReportListComponent>;
  let policyService: PolicyService
  let shardService: ShardService
  let assessmentService: AssessmentService
  const cnsiServiceStub: any = {
    getNodeList() {
      return of({
        "kind": "NodeList",
        "apiVersion": "v1",
        "metadata": {
          "resourceVersion": "942335"
        },
        "items": [
          {
            "metadata": {
              "name": "sc2-10-186-131-84.eng.vmware.com",
              "uid": "9bbb9943-ee91-41c9-9f57-dce8175e289e",
              "resourceVersion": "942088",
              "creationTimestamp": "2023-02-14T08:16:18Z",
              "labels": {
                "beta.kubernetes.io/arch": "amd64",
                "beta.kubernetes.io/os": "linux",
                "kubernetes.io/arch": "amd64",
                "kubernetes.io/hostname": "sc2-10-186-131-84.eng.vmware.com",
                "kubernetes.io/os": "linux"
              },
              "annotations": {
                "flannel.alpha.coreos.com/backend-data": "{\"VNI\":1,\"VtepMAC\":\"ca:2b:ac:af:c4:14\"}",
                "flannel.alpha.coreos.com/backend-type": "vxlan",
                "flannel.alpha.coreos.com/kube-subnet-manager": "true",
                "flannel.alpha.coreos.com/public-ip": "10.186.131.84",
                "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/dockershim.sock",
                "node.alpha.kubernetes.io/ttl": "0",
                "volumes.kubernetes.io/controller-managed-attach-detach": "true"
              },
              "managedFields": [
                {
                  "manager": "kubeadm",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:16:18Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{"f:kubeadm.alpha.kubernetes.io/cri-socket":{}}}}
                },
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:16:19Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{"f:node.alpha.kubernetes.io/ttl":{}}},"f:spec":{"f:podCIDR":{},"f:podCIDRs":{".":{},"v:\"10.244.2.0/24\"":{}}}}
                },
                {
                  "manager": "flanneld",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:16:23Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{"f:flannel.alpha.coreos.com/backend-data":{},"f:flannel.alpha.coreos.com/backend-type":{},"f:flannel.alpha.coreos.com/kube-subnet-manager":{},"f:flannel.alpha.coreos.com/public-ip":{}}},"f:status":{"f:conditions":{"k:{\"type\":\"NetworkUnavailable\"}":{".":{},"f:lastHeartbeatTime":{},"f:lastTransitionTime":{},"f:message":{},"f:reason":{},"f:status":{},"f:type":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:28:21Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{".":{},"f:volumes.kubernetes.io/controller-managed-attach-detach":{}},"f:labels":{".":{},"f:beta.kubernetes.io/arch":{},"f:beta.kubernetes.io/os":{},"f:kubernetes.io/arch":{},"f:kubernetes.io/hostname":{},"f:kubernetes.io/os":{}}},"f:status":{"f:allocatable":{"f:ephemeral-storage":{}},"f:capacity":{"f:ephemeral-storage":{}},"f:conditions":{"k:{\"type\":\"DiskPressure\"}":{"f:lastHeartbeatTime":{}},"k:{\"type\":\"MemoryPressure\"}":{"f:lastHeartbeatTime":{}},"k:{\"type\":\"PIDPressure\"}":{"f:lastHeartbeatTime":{}},"k:{\"type\":\"Ready\"}":{"f:lastHeartbeatTime":{},"f:lastTransitionTime":{},"f:message":{},"f:reason":{},"f:status":{}}},"f:images":{}}}
                }
              ]
            },
            "spec": {
              "podCIDR": "10.244.2.0/24",
              "podCIDRs": [
                "10.244.2.0/24"
              ]
            },
            "status": {
              "capacity": {
                "cpu": "32",
                "ephemeral-storage": "51175Mi",
                "hugepages-1Gi": "0",
                "hugepages-2Mi": "0",
                "memory": "65803908Ki",
                "pods": "110"
              },
              "allocatable": {
                "cpu": "32",
                "ephemeral-storage": "48294789041",
                "hugepages-1Gi": "0",
                "hugepages-2Mi": "0",
                "memory": "65701508Ki",
                "pods": "110"
              },
              "conditions": [
                {
                  "type": "NetworkUnavailable",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-14T08:16:23Z",
                  "lastTransitionTime": "2023-02-14T08:16:23Z",
                  "reason": "FlannelIsUp",
                  "message": "Flannel is running on this node"
                },
                {
                  "type": "MemoryPressure",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-20T01:59:31Z",
                  "lastTransitionTime": "2023-02-14T08:16:18Z",
                  "reason": "KubeletHasSufficientMemory",
                  "message": "kubelet has sufficient memory available"
                },
                {
                  "type": "DiskPressure",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-20T01:59:31Z",
                  "lastTransitionTime": "2023-02-14T08:16:18Z",
                  "reason": "KubeletHasNoDiskPressure",
                  "message": "kubelet has no disk pressure"
                },
                {
                  "type": "PIDPressure",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-20T01:59:31Z",
                  "lastTransitionTime": "2023-02-14T08:16:18Z",
                  "reason": "KubeletHasSufficientPID",
                  "message": "kubelet has sufficient PID available"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastHeartbeatTime": "2023-02-20T01:59:31Z",
                  "lastTransitionTime": "2023-02-14T08:16:28Z",
                  "reason": "KubeletReady",
                  "message": "kubelet is posting ready status"
                }
              ],
              "addresses": [
                {
                  "type": "InternalIP",
                  "address": "10.186.131.84"
                },
                {
                  "type": "Hostname",
                  "address": "sc2-10-186-131-84.eng.vmware.com"
                }
              ],
              "daemonEndpoints": {
                "kubeletEndpoint": {
                  "Port": 10250
                }
              },
              "nodeInfo": {
                "machineID": "18220773f96144b6a7641ca3ebec54a9",
                "systemUUID": "FDD82042-A087-037B-D4B4-198411EC2346",
                "bootID": "42cb0da3-b5d5-41c5-a88d-9c3e3cbfe1fb",
                "kernelVersion": "3.10.0-1160.83.1.el7.x86_64",
                "osImage": "CentOS Linux 7 (Core)",
                "containerRuntimeVersion": "docker://23.0.1",
                "kubeletVersion": "v1.21.3",
                "kubeProxyVersion": "v1.21.3",
                "operatingSystem": "linux",
                "architecture": "amd64"
              },
              "images": [
                {
                  "names": [
                    "opensearchproject/opensearch-dashboards@sha256:1b5f0b2b9692a26c43a70f5c9a1587f22fc10c86c9a3aa964dd6e726fba6f15d",
                    "opensearchproject/opensearch-dashboards:2.5.0"
                  ],
                  "sizeBytes": 1084477418
                },
                {
                  "names": [
                    "opensearchproject/opensearch@sha256:ffd7da5e9b8365ce49596f8bd66b782fe99321db57badb263c29a21ec4e4697c",
                    "opensearchproject/opensearch:2.4.0"
                  ],
                  "sizeBytes": 990407900
                },
                {
                  "names": [
                    "k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2",
                    "k8s.gcr.io/etcd:3.4.13-0"
                  ],
                  "sizeBytes": 253392289
                },
                {
                  "names": [
                    "projects.registry.vmware.com/cnsi/kubebench@sha256:dd54cb02aef2ac1475aeb6fdfc29bf704d2d2e7c7b0a438cbd89416f6dc2d257",
                    "projects.registry.vmware.com/cnsi/kubebench:0.3"
                  ],
                  "sizeBytes": 148955618
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-apiserver@sha256:56e3fd83edc68b971c896cae4718b95a4a5ac88594882b1955123d3a30eb2c8f",
                    "k8s.gcr.io/kube-apiserver:v1.21.14"
                  ],
                  "sizeBytes": 125787709
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-controller-manager@sha256:48528cf6f00ce37001f65fe658ab513caaf1cb245df8ab86d803590b3ce66e33",
                    "k8s.gcr.io/kube-controller-manager:v1.21.14"
                  ],
                  "sizeBytes": 119988061
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-proxy@sha256:650dc60fc75ecd78e0ac79e9296d405402e2032032bbd74ce8f61d241764486c",
                    "k8s.gcr.io/kube-proxy:v1.21.14"
                  ],
                  "sizeBytes": 103559012
                },
                {
                  "names": [
                    "projects.registry.vmware.com/cnsi/manager@sha256:a4b51f1d257cd67567eb3d7aa7df99f88bcfc45b7ec9b1a7ebea5e6978f877b5",
                    "projects.registry.vmware.com/cnsi/manager:0.3"
                  ],
                  "sizeBytes": 64496212
                },
                {
                  "names": [
                    "flannel/flannel@sha256:08e150f603cc4759a48e986fc26c0f531af1395d1bd48981226f86f45521b01c",
                    "flannel/flannel:v0.20.2"
                  ],
                  "sizeBytes": 59604122
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-scheduler@sha256:67d226ce629ef439d8e1e1b401a6f828cc4558abd6d9e5e3717d188dc7ce4ba1",
                    "k8s.gcr.io/kube-scheduler:v1.21.14"
                  ],
                  "sizeBytes": 50904972
                },
                {
                  "names": [
                    "projects.registry.vmware.com/cnsi/kubebuilder/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
                    "projects.registry.vmware.com/cnsi/kubebuilder/kube-rbac-proxy:v0.8.0"
                  ],
                  "sizeBytes": 48952053
                },
                {
                  "names": [
                    "k8s.gcr.io/coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e",
                    "k8s.gcr.io/coredns/coredns:v1.8.0"
                  ],
                  "sizeBytes": 42454755
                },
                {
                  "names": [
                    "flannel/flannel-cni-plugin@sha256:bf4b62b131666d040f35a327d906ee5a3418280b68a88d9b9c7e828057210443",
                    "flannel/flannel-cni-plugin:v1.1.2"
                  ],
                  "sizeBytes": 7966554
                },
                {
                  "names": [
                    "k8s.gcr.io/pause@sha256:6c3835cab3980f11b83277305d0d736051c32b17606f5ec59f1dda67c9ba3810",
                    "k8s.gcr.io/pause:3.4.1"
                  ],
                  "sizeBytes": 682696
                }
              ]
            }
          },
          {
            "metadata": {
              "name": "sc2-10-186-134-223.eng.vmware.com",
              "uid": "1a1f4bfd-de9f-49cb-966c-2b4e888b4264",
              "resourceVersion": "942134",
              "creationTimestamp": "2023-02-14T08:15:24Z",
              "labels": {
                "beta.kubernetes.io/arch": "amd64",
                "beta.kubernetes.io/os": "linux",
                "kubernetes.io/arch": "amd64",
                "kubernetes.io/hostname": "sc2-10-186-134-223.eng.vmware.com",
                "kubernetes.io/os": "linux"
              },
              "annotations": {
                "flannel.alpha.coreos.com/backend-data": "{\"VNI\":1,\"VtepMAC\":\"4a:4e:47:4f:fe:d9\"}",
                "flannel.alpha.coreos.com/backend-type": "vxlan",
                "flannel.alpha.coreos.com/kube-subnet-manager": "true",
                "flannel.alpha.coreos.com/public-ip": "10.186.134.223",
                "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/dockershim.sock",
                "node.alpha.kubernetes.io/ttl": "0",
                "volumes.kubernetes.io/controller-managed-attach-detach": "true"
              },
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:15:24Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{"f:node.alpha.kubernetes.io/ttl":{}}},"f:spec":{"f:podCIDR":{},"f:podCIDRs":{".":{},"v:\"10.244.1.0/24\"":{}}}}
                },
                {
                  "manager": "kubeadm",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:15:24Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{"f:kubeadm.alpha.kubernetes.io/cri-socket":{}}}}
                },
                {
                  "manager": "flanneld",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:15:29Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{"f:flannel.alpha.coreos.com/backend-data":{},"f:flannel.alpha.coreos.com/backend-type":{},"f:flannel.alpha.coreos.com/kube-subnet-manager":{},"f:flannel.alpha.coreos.com/public-ip":{}}},"f:status":{"f:conditions":{"k:{\"type\":\"NetworkUnavailable\"}":{".":{},"f:lastHeartbeatTime":{},"f:lastTransitionTime":{},"f:message":{},"f:reason":{},"f:status":{},"f:type":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:28:28Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{".":{},"f:volumes.kubernetes.io/controller-managed-attach-detach":{}},"f:labels":{".":{},"f:beta.kubernetes.io/arch":{},"f:beta.kubernetes.io/os":{},"f:kubernetes.io/arch":{},"f:kubernetes.io/hostname":{},"f:kubernetes.io/os":{}}},"f:status":{"f:allocatable":{"f:ephemeral-storage":{}},"f:capacity":{"f:ephemeral-storage":{}},"f:conditions":{"k:{\"type\":\"DiskPressure\"}":{"f:lastHeartbeatTime":{}},"k:{\"type\":\"MemoryPressure\"}":{"f:lastHeartbeatTime":{}},"k:{\"type\":\"PIDPressure\"}":{"f:lastHeartbeatTime":{}},"k:{\"type\":\"Ready\"}":{"f:lastHeartbeatTime":{},"f:lastTransitionTime":{},"f:message":{},"f:reason":{},"f:status":{}}},"f:images":{}}}
                }
              ]
            },
            "spec": {
              "podCIDR": "10.244.1.0/24",
              "podCIDRs": [
                "10.244.1.0/24"
              ]
            },
            "status": {
              "capacity": {
                "cpu": "32",
                "ephemeral-storage": "51175Mi",
                "hugepages-1Gi": "0",
                "hugepages-2Mi": "0",
                "memory": "65803908Ki",
                "pods": "110"
              },
              "allocatable": {
                "cpu": "32",
                "ephemeral-storage": "48294789041",
                "hugepages-1Gi": "0",
                "hugepages-2Mi": "0",
                "memory": "65701508Ki",
                "pods": "110"
              },
              "conditions": [
                {
                  "type": "NetworkUnavailable",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-14T08:15:29Z",
                  "lastTransitionTime": "2023-02-14T08:15:29Z",
                  "reason": "FlannelIsUp",
                  "message": "Flannel is running on this node"
                },
                {
                  "type": "MemoryPressure",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-20T01:59:56Z",
                  "lastTransitionTime": "2023-02-14T08:15:24Z",
                  "reason": "KubeletHasSufficientMemory",
                  "message": "kubelet has sufficient memory available"
                },
                {
                  "type": "DiskPressure",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-20T01:59:56Z",
                  "lastTransitionTime": "2023-02-14T08:15:24Z",
                  "reason": "KubeletHasNoDiskPressure",
                  "message": "kubelet has no disk pressure"
                },
                {
                  "type": "PIDPressure",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-20T01:59:56Z",
                  "lastTransitionTime": "2023-02-14T08:15:24Z",
                  "reason": "KubeletHasSufficientPID",
                  "message": "kubelet has sufficient PID available"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastHeartbeatTime": "2023-02-20T01:59:56Z",
                  "lastTransitionTime": "2023-02-14T08:15:34Z",
                  "reason": "KubeletReady",
                  "message": "kubelet is posting ready status"
                }
              ],
              "addresses": [
                {
                  "type": "InternalIP",
                  "address": "10.186.134.223"
                },
                {
                  "type": "Hostname",
                  "address": "sc2-10-186-134-223.eng.vmware.com"
                }
              ],
              "daemonEndpoints": {
                "kubeletEndpoint": {
                  "Port": 10250
                }
              },
              "nodeInfo": {
                "machineID": "18220773f96144b6a7641ca3ebec54a9",
                "systemUUID": "64F02042-1685-39F8-4C4F-A329B3B4D49A",
                "bootID": "8ad70142-b5e3-417e-a22e-a2628ccf9a8e",
                "kernelVersion": "3.10.0-1160.83.1.el7.x86_64",
                "osImage": "CentOS Linux 7 (Core)",
                "containerRuntimeVersion": "docker://23.0.1",
                "kubeletVersion": "v1.21.3",
                "kubeProxyVersion": "v1.21.3",
                "operatingSystem": "linux",
                "architecture": "amd64"
              },
              "images": [
                {
                  "names": [
                    "opensearchproject/opensearch@sha256:ffd7da5e9b8365ce49596f8bd66b782fe99321db57badb263c29a21ec4e4697c",
                    "opensearchproject/opensearch:2.4.0"
                  ],
                  "sizeBytes": 990407900
                },
                {
                  "names": [
                    "k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2",
                    "k8s.gcr.io/etcd:3.4.13-0"
                  ],
                  "sizeBytes": 253392289
                },
                {
                  "names": [
                    "projects.registry.vmware.com/cnsi/portal@sha256:db4ec5c4bb99543c1ef0943e6eb36a2d4a5b3a5134221f2ffe6d66fa52a72892",
                    "projects.registry.vmware.com/cnsi/portal:0.3"
                  ],
                  "sizeBytes": 245069288
                },
                {
                  "names": [
                    "projects.registry.vmware.com/cnsi/kubebench@sha256:dd54cb02aef2ac1475aeb6fdfc29bf704d2d2e7c7b0a438cbd89416f6dc2d257",
                    "projects.registry.vmware.com/cnsi/kubebench:0.3"
                  ],
                  "sizeBytes": 148955618
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-apiserver@sha256:56e3fd83edc68b971c896cae4718b95a4a5ac88594882b1955123d3a30eb2c8f",
                    "k8s.gcr.io/kube-apiserver:v1.21.14"
                  ],
                  "sizeBytes": 125787709
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-controller-manager@sha256:48528cf6f00ce37001f65fe658ab513caaf1cb245df8ab86d803590b3ce66e33",
                    "k8s.gcr.io/kube-controller-manager:v1.21.14"
                  ],
                  "sizeBytes": 119988061
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-proxy@sha256:650dc60fc75ecd78e0ac79e9296d405402e2032032bbd74ce8f61d241764486c",
                    "k8s.gcr.io/kube-proxy:v1.21.14"
                  ],
                  "sizeBytes": 103559012
                },
                {
                  "names": [
                    "flannel/flannel@sha256:08e150f603cc4759a48e986fc26c0f531af1395d1bd48981226f86f45521b01c",
                    "flannel/flannel:v0.20.2"
                  ],
                  "sizeBytes": 59604122
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-scheduler@sha256:67d226ce629ef439d8e1e1b401a6f828cc4558abd6d9e5e3717d188dc7ce4ba1",
                    "k8s.gcr.io/kube-scheduler:v1.21.14"
                  ],
                  "sizeBytes": 50904972
                },
                {
                  "names": [
                    "projects.registry.vmware.com/cnsi/kubebuilder/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
                    "projects.registry.vmware.com/cnsi/kubebuilder/kube-rbac-proxy:v0.8.0"
                  ],
                  "sizeBytes": 48952053
                },
                {
                  "names": [
                    "k8s.gcr.io/coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e",
                    "k8s.gcr.io/coredns/coredns:v1.8.0"
                  ],
                  "sizeBytes": 42454755
                },
                {
                  "names": [
                    "flannel/flannel-cni-plugin@sha256:bf4b62b131666d040f35a327d906ee5a3418280b68a88d9b9c7e828057210443",
                    "flannel/flannel-cni-plugin:v1.1.2"
                  ],
                  "sizeBytes": 7966554
                },
                {
                  "names": [
                    "k8s.gcr.io/pause@sha256:6c3835cab3980f11b83277305d0d736051c32b17606f5ec59f1dda67c9ba3810",
                    "k8s.gcr.io/pause:3.4.1"
                  ],
                  "sizeBytes": 682696
                }
              ]
            }
          },
          {
            "metadata": {
              "name": "sc2-10-186-142-227.eng.vmware.com",
              "uid": "a3503260-2de8-4bfd-a145-2b76d4fa0e8b",
              "resourceVersion": "941991",
              "creationTimestamp": "2023-02-14T06:54:09Z",
              "labels": {
                "beta.kubernetes.io/arch": "amd64",
                "beta.kubernetes.io/os": "linux",
                "kubernetes.io/arch": "amd64",
                "kubernetes.io/hostname": "sc2-10-186-142-227.eng.vmware.com",
                "kubernetes.io/os": "linux",
                "node-role.kubernetes.io/control-plane": "",
                "node-role.kubernetes.io/master": "",
                "node.kubernetes.io/exclude-from-external-load-balancers": ""
              },
              "annotations": {
                "flannel.alpha.coreos.com/backend-data": "{\"VNI\":1,\"VtepMAC\":\"fe:a5:cc:d8:eb:80\"}",
                "flannel.alpha.coreos.com/backend-type": "vxlan",
                "flannel.alpha.coreos.com/kube-subnet-manager": "true",
                "flannel.alpha.coreos.com/public-ip": "10.186.142.227",
                "kubeadm.alpha.kubernetes.io/cri-socket": "/var/run/dockershim.sock",
                "node.alpha.kubernetes.io/ttl": "0",
                "volumes.kubernetes.io/controller-managed-attach-detach": "true"
              },
              "managedFields": [
                {
                  "manager": "kubeadm",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T06:54:12Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{"f:kubeadm.alpha.kubernetes.io/cri-socket":{}},"f:labels":{"f:node-role.kubernetes.io/control-plane":{},"f:node-role.kubernetes.io/master":{},"f:node.kubernetes.io/exclude-from-external-load-balancers":{}}}}
                },
                {
                  "manager": "flanneld",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T07:00:36Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{"f:flannel.alpha.coreos.com/backend-data":{},"f:flannel.alpha.coreos.com/backend-type":{},"f:flannel.alpha.coreos.com/kube-subnet-manager":{},"f:flannel.alpha.coreos.com/public-ip":{}}},"f:status":{"f:conditions":{"k:{\"type\":\"NetworkUnavailable\"}":{".":{},"f:lastHeartbeatTime":{},"f:lastTransitionTime":{},"f:message":{},"f:reason":{},"f:status":{},"f:type":{}}}}}
                },
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T07:00:41Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{"f:node.alpha.kubernetes.io/ttl":{}}},"f:spec":{"f:podCIDR":{},"f:podCIDRs":{".":{},"v:\"10.244.0.0/24\"":{}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T07:00:51Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{".":{},"f:volumes.kubernetes.io/controller-managed-attach-detach":{}},"f:labels":{".":{},"f:beta.kubernetes.io/arch":{},"f:beta.kubernetes.io/os":{},"f:kubernetes.io/arch":{},"f:kubernetes.io/hostname":{},"f:kubernetes.io/os":{}}},"f:status":{"f:allocatable":{"f:ephemeral-storage":{}},"f:conditions":{"k:{\"type\":\"DiskPressure\"}":{"f:lastHeartbeatTime":{}},"k:{\"type\":\"MemoryPressure\"}":{"f:lastHeartbeatTime":{}},"k:{\"type\":\"PIDPressure\"}":{"f:lastHeartbeatTime":{}},"k:{\"type\":\"Ready\"}":{"f:lastHeartbeatTime":{},"f:lastTransitionTime":{},"f:message":{},"f:reason":{},"f:status":{}}},"f:images":{}}}
                }
              ]
            },
            "spec": {
              "podCIDR": "10.244.0.0/24",
              "podCIDRs": [
                "10.244.0.0/24"
              ]
            },
            "status": {
              "capacity": {
                "cpu": "32",
                "ephemeral-storage": "51175Mi",
                "hugepages-1Gi": "0",
                "hugepages-2Mi": "0",
                "memory": "65804120Ki",
                "pods": "110"
              },
              "allocatable": {
                "cpu": "32",
                "ephemeral-storage": "48294789041",
                "hugepages-1Gi": "0",
                "hugepages-2Mi": "0",
                "memory": "65701720Ki",
                "pods": "110"
              },
              "conditions": [
                {
                  "type": "NetworkUnavailable",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-14T07:00:36Z",
                  "lastTransitionTime": "2023-02-14T07:00:36Z",
                  "reason": "FlannelIsUp",
                  "message": "Flannel is running on this node"
                },
                {
                  "type": "MemoryPressure",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-20T01:58:41Z",
                  "lastTransitionTime": "2023-02-14T06:54:05Z",
                  "reason": "KubeletHasSufficientMemory",
                  "message": "kubelet has sufficient memory available"
                },
                {
                  "type": "DiskPressure",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-20T01:58:41Z",
                  "lastTransitionTime": "2023-02-14T06:54:05Z",
                  "reason": "KubeletHasNoDiskPressure",
                  "message": "kubelet has no disk pressure"
                },
                {
                  "type": "PIDPressure",
                  "status": "False",
                  "lastHeartbeatTime": "2023-02-20T01:58:41Z",
                  "lastTransitionTime": "2023-02-14T06:54:05Z",
                  "reason": "KubeletHasSufficientPID",
                  "message": "kubelet has sufficient PID available"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastHeartbeatTime": "2023-02-20T01:58:41Z",
                  "lastTransitionTime": "2023-02-14T07:00:41Z",
                  "reason": "KubeletReady",
                  "message": "kubelet is posting ready status"
                }
              ],
              "addresses": [
                {
                  "type": "InternalIP",
                  "address": "10.186.142.227"
                },
                {
                  "type": "Hostname",
                  "address": "sc2-10-186-142-227.eng.vmware.com"
                }
              ],
              "daemonEndpoints": {
                "kubeletEndpoint": {
                  "Port": 10250
                }
              },
              "nodeInfo": {
                "machineID": "18220773f96144b6a7641ca3ebec54a9",
                "systemUUID": "CFA02042-382B-131F-CE56-3E2D647E025A",
                "bootID": "ec112cea-cc6b-4f4b-b8c0-4ed4bbf6cc05",
                "kernelVersion": "3.10.0-1160.el7.x86_64",
                "osImage": "CentOS Linux 7 (Core)",
                "containerRuntimeVersion": "docker://23.0.1",
                "kubeletVersion": "v1.21.3",
                "kubeProxyVersion": "v1.21.3",
                "operatingSystem": "linux",
                "architecture": "amd64"
              },
              "images": [
                {
                  "names": [
                    "opensearchproject/opensearch@sha256:ffd7da5e9b8365ce49596f8bd66b782fe99321db57badb263c29a21ec4e4697c",
                    "opensearchproject/opensearch:2.4.0"
                  ],
                  "sizeBytes": 990407900
                },
                {
                  "names": [
                    "k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2",
                    "k8s.gcr.io/etcd:3.4.13-0"
                  ],
                  "sizeBytes": 253392289
                },
                {
                  "names": [
                    "projects.registry.vmware.com/cnsi/kubebench@sha256:dd54cb02aef2ac1475aeb6fdfc29bf704d2d2e7c7b0a438cbd89416f6dc2d257",
                    "projects.registry.vmware.com/cnsi/kubebench:0.3"
                  ],
                  "sizeBytes": 148955618
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-apiserver@sha256:56e3fd83edc68b971c896cae4718b95a4a5ac88594882b1955123d3a30eb2c8f",
                    "k8s.gcr.io/kube-apiserver:v1.21.14"
                  ],
                  "sizeBytes": 125787709
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-controller-manager@sha256:48528cf6f00ce37001f65fe658ab513caaf1cb245df8ab86d803590b3ce66e33",
                    "k8s.gcr.io/kube-controller-manager:v1.21.14"
                  ],
                  "sizeBytes": 119988061
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-proxy@sha256:650dc60fc75ecd78e0ac79e9296d405402e2032032bbd74ce8f61d241764486c",
                    "k8s.gcr.io/kube-proxy:v1.21.14"
                  ],
                  "sizeBytes": 103559012
                },
                {
                  "names": [
                    "flannel/flannel@sha256:08e150f603cc4759a48e986fc26c0f531af1395d1bd48981226f86f45521b01c",
                    "flannel/flannel:v0.20.2"
                  ],
                  "sizeBytes": 59604122
                },
                {
                  "names": [
                    "k8s.gcr.io/kube-scheduler@sha256:67d226ce629ef439d8e1e1b401a6f828cc4558abd6d9e5e3717d188dc7ce4ba1",
                    "k8s.gcr.io/kube-scheduler:v1.21.14"
                  ],
                  "sizeBytes": 50904972
                },
                {
                  "names": [
                    "k8s.gcr.io/coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e",
                    "k8s.gcr.io/coredns/coredns:v1.8.0"
                  ],
                  "sizeBytes": 42454755
                },
                {
                  "names": [
                    "flannel/flannel-cni-plugin@sha256:bf4b62b131666d040f35a327d906ee5a3418280b68a88d9b9c7e828057210443",
                    "flannel/flannel-cni-plugin:v1.1.2"
                  ],
                  "sizeBytes": 7966554
                },
                {
                  "names": [
                    "k8s.gcr.io/pause@sha256:6c3835cab3980f11b83277305d0d736051c32b17606f5ec59f1dda67c9ba3810",
                    "k8s.gcr.io/pause:3.4.1"
                  ],
                  "sizeBytes": 682696
                }
              ]
            }
          }
        ]
      });
    },
    getInspectionpolicies(): Observable<any> {
      return of(
        {"apiVersion":"goharbor.goharbor.io/v1alpha1","items":[{"apiVersion":"goharbor.goharbor.io/v1alpha1","kind":"InspectionPolicy","metadata":{"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\"apiVersion\":\"goharbor.goharbor.io/v1alpha1\",\"kind\":\"InspectionPolicy\",\"metadata\":{\"annotations\":{},\"name\":\"inspectionpolicy-sample\"},\"spec\":{\"enabled\":true,\"inspection\":{\"actions\":[{\"kind\":\"quarantine_vulnerable_workload\"}],\"assessment\":{\"elasticSearchEnabled\":false,\"format\":\"YAML\",\"generate\":true,\"liveTime\":3600,\"managedBy\":true,\"openSearchAddr\":\"https://opensearch-cluster-master.opensearch:9200\",\"openSearchEnabled\":true,\"openSearchPasswd\":\"admin\",\"openSearchUser\":\"admin\"},\"baselines\":[{\"baseline\":\"Medium\",\"kind\":\"vulnerability\",\"scheme\":\"application/vnd.security.vulnerability.report; version=1.1\",\"version\":\"v1.1\"}],\"namespaceSelector\":{\"matchLabels\":{\"kubernetes.io/metadata.name\":\"default\"}}},\"inspector\":{\"imagePullPolicy\":\"IfNotPresent\",\"kubebenchImage\":\"projects.registry.vmware.com/cnsi/kubebench:0.3\"},\"schedule\":\"*/5 * * * *\",\"settingsName\":\"sample-setting\",\"strategy\":{\"concurrencyRule\":\"Forbid\",\"historyLimit\":5,\"suspend\":false},\"workNamespace\":\"narrows\"}}\n"},"creationTimestamp":"2023-02-15T15:19:02Z","generation":1,"managedFields":[{"apiVersion":"goharbor.goharbor.io/v1alpha1","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:kubectl.kubernetes.io/last-applied-configuration":{}}},"f:spec":{".":{},"f:enabled":{},"f:inspection":{".":{},"f:actions":{},"f:assessment":{".":{},"f:elasticSearchEnabled":{},"f:format":{},"f:generate":{},"f:liveTime":{},"f:managedBy":{},"f:openSearchAddr":{},"f:openSearchEnabled":{},"f:openSearchPasswd":{},"f:openSearchUser":{}},"f:baselines":{},"f:namespaceSelector":{".":{},"f:matchLabels":{".":{},"f:kubernetes.io/metadata.name":{}}}},"f:inspector":{".":{},"f:imagePullPolicy":{},"f:kubebenchImage":{}},"f:schedule":{},"f:settingsName":{},"f:strategy":{".":{},"f:concurrencyRule":{},"f:historyLimit":{},"f:suspend":{}},"f:workNamespace":{}}},"manager":"kubectl-client-side-apply","operation":"Update","time":"2023-02-15T15:19:02Z"},{"apiVersion":"goharbor.goharbor.io/v1alpha1","fieldsType":"FieldsV1","fieldsV1":{"f:status":{".":{},"f:status":{}}},"manager":"manager","operation":"Update","time":"2023-02-15T15:19:03Z"}],"name":"inspectionpolicy-sample","resourceVersion":"215027","uid":"4e18057c-908b-4060-80ee-b34dbad506a6"},"spec":{"enabled":true,"inspection":{"actions":[{"kind":"quarantine_vulnerable_workload"}],"assessment":{"elasticSearchEnabled":false,"format":"YAML","generate":true,"liveTime":3600,"managedBy":true,"openSearchAddr":"https://opensearch-cluster-master.opensearch:9200","openSearchEnabled":true,"openSearchPasswd":"admin","openSearchUser":"admin"},"baselines":[{"baseline":"Medium","kind":"vulnerability","scheme":"application/vnd.security.vulnerability.report; version=1.1","version":"v1.1"}],"namespaceSelector":{"matchLabels":{"kubernetes.io/metadata.name":"default"}}},"inspector":{"imagePullPolicy":"IfNotPresent","kubebenchImage":"projects.registry.vmware.com/cnsi/kubebench:0.3"},"schedule":"*/5 * * * *","settingsName":"sample-setting","strategy":{"concurrencyRule":"Forbid","historyLimit":5,"suspend":false},"workNamespace":"narrows"},"status":{"status":"Standby"}}],"kind":"InspectionPolicyList","metadata":{"continue":"","resourceVersion":"938787"}}
      )
    },
    getPodList() {
      return of({
        "kind": "PodList",
        "apiVersion": "v1",
        "metadata": {
          "resourceVersion": "942336"
        },
        "items": [
          {
            "metadata": {
              "name": "cloud-native-security-inspector-portal-59c54b76cc-9gzdk",
              "generateName": "cloud-native-security-inspector-portal-59c54b76cc-",
              "namespace": "cnsi-system",
              "uid": "e14d73e3-ddff-43d2-8ab5-18fae5bae017",
              "resourceVersion": "214454",
              "creationTimestamp": "2023-02-15T15:14:23Z",
              "labels": {
                "cloud-native-security-inspector-portal": "portal",
                "pod-template-hash": "59c54b76cc"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "ReplicaSet",
                  "name": "cloud-native-security-inspector-portal-59c54b76cc",
                  "uid": "55eb6394-33c2-444f-b9c8-661ed39b973a",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:14:23Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:cloud-native-security-inspector-portal":{},"f:pod-template-hash":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"55eb6394-33c2-444f-b9c8-661ed39b973a\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:containers":{"k:{\"name\":\"cloud-native-security-inspector-frontend\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":3800,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:14:27Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.1.15\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "kube-api-access-cm67b",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "cloud-native-security-inspector-frontend",
                  "image": "projects.registry.vmware.com/cnsi/portal:0.3",
                  "ports": [
                    {
                      "containerPort": 3800,
                      "protocol": "TCP"
                    }
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "kube-api-access-cm67b",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "Always"
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "cloud-native-security-inspector-portal-serviceaccount",
              "serviceAccount": "cloud-native-security-inspector-portal-serviceaccount",
              "nodeName": "sc2-10-186-134-223.eng.vmware.com",
              "securityContext": {
                
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                }
              ],
              "priority": 0,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:23Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:27Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:27Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:23Z"
                }
              ],
              "hostIP": "10.186.134.223",
              "podIP": "10.244.1.15",
              "podIPs": [
                {
                  "ip": "10.244.1.15"
                }
              ],
              "startTime": "2023-02-15T15:14:23Z",
              "containerStatuses": [
                {
                  "name": "cloud-native-security-inspector-frontend",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-15T15:14:26Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "projects.registry.vmware.com/cnsi/portal:0.3",
                  "imageID": "docker-pullable://projects.registry.vmware.com/cnsi/portal@sha256:db4ec5c4bb99543c1ef0943e6eb36a2d4a5b3a5134221f2ffe6d66fa52a72892",
                  "containerID": "docker://c30c7c4bc0c715b078ccb5f659bf7124c3e96780a880900f75d5ac2068e16a06",
                  "started": true
                }
              ],
              "qosClass": "BestEffort"
            }
          },
          {
            "metadata": {
              "name": "cnsi-controller-manager-5c5fbd587d-nqz88",
              "generateName": "cnsi-controller-manager-5c5fbd587d-",
              "namespace": "cnsi-system",
              "uid": "7ed92e93-0cd8-4bf8-9ae6-7e9b9a6be93b",
              "resourceVersion": "214507",
              "creationTimestamp": "2023-02-15T15:14:25Z",
              "labels": {
                "control-plane": "cnsi-controller",
                "pod-template-hash": "5c5fbd587d"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "ReplicaSet",
                  "name": "cnsi-controller-manager-5c5fbd587d",
                  "uid": "595fd81d-39c5-42a5-a45b-d7c4d1541ae1",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:14:25Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:control-plane":{},"f:pod-template-hash":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"595fd81d-39c5-42a5-a45b-d7c4d1541ae1\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:containers":{"k:{\"name\":\"kube-rbac-proxy\"}":{".":{},"f:args":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":8443,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}}},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}},"k:{\"name\":\"manager\"}":{".":{},"f:args":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:livenessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:name":{},"f:readinessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:resources":{".":{},"f:limits":{".":{},"f:cpu":{},"f:memory":{}},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:securityContext":{".":{},"f:allowPrivilegeEscalation":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{".":{},"f:runAsNonRoot":{}},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:14:45Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.2.13\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "kube-api-access-txxln",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "kube-rbac-proxy",
                  "image": "projects.registry.vmware.com/cnsi/kubebuilder/kube-rbac-proxy:v0.8.0",
                  "args": [
                    "--secure-listen-address=0.0.0.0:8443",
                    "--upstream=http://127.0.0.1:8080/",
                    "--logtostderr=true",
                    "--v=10"
                  ],
                  "ports": [
                    {
                      "name": "https",
                      "containerPort": 8443,
                      "protocol": "TCP"
                    }
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "kube-api-access-txxln",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                },
                {
                  "name": "manager",
                  "image": "projects.registry.vmware.com/cnsi/manager:0.3",
                  "command": [
                    "/manager"
                  ],
                  "args": [
                    "--health-probe-bind-address=:8081",
                    "--metrics-bind-address=127.0.0.1:8080",
                    "--leader-elect"
                  ],
                  "resources": {
                    "limits": {
                      "cpu": "100m",
                      "memory": "30Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "20Mi"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "kube-api-access-txxln",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "livenessProbe": {
                    "httpGet": {
                      "path": "/healthz",
                      "port": 8081,
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 15,
                    "timeoutSeconds": 1,
                    "periodSeconds": 20,
                    "successThreshold": 1,
                    "failureThreshold": 3
                  },
                  "readinessProbe": {
                    "httpGet": {
                      "path": "/readyz",
                      "port": 8081,
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 5,
                    "timeoutSeconds": 1,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 3
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "allowPrivilegeEscalation": false
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 10,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "cnsi-controller-manager",
              "serviceAccount": "cnsi-controller-manager",
              "nodeName": "sc2-10-186-131-84.eng.vmware.com",
              "securityContext": {
                "runAsNonRoot": true
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                }
              ],
              "priority": 0,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:25Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:45Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:45Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:25Z"
                }
              ],
              "hostIP": "10.186.131.84",
              "podIP": "10.244.2.13",
              "podIPs": [
                {
                  "ip": "10.244.2.13"
                }
              ],
              "startTime": "2023-02-15T15:14:25Z",
              "containerStatuses": [
                {
                  "name": "kube-rbac-proxy",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-15T15:14:28Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "projects.registry.vmware.com/cnsi/kubebuilder/kube-rbac-proxy:v0.8.0",
                  "imageID": "docker-pullable://projects.registry.vmware.com/cnsi/kubebuilder/kube-rbac-proxy@sha256:34e8724e0f47e31eb2ec3279ac398b657db5f60f167426ee73138e2e84af6486",
                  "containerID": "docker://f7588bc77f2bd41645695dae564a654b929036a5466ad4a9a5ca1dce95939124",
                  "started": true
                },
                {
                  "name": "manager",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-15T15:14:33Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "projects.registry.vmware.com/cnsi/manager:0.3",
                  "imageID": "docker-pullable://projects.registry.vmware.com/cnsi/manager@sha256:a4b51f1d257cd67567eb3d7aa7df99f88bcfc45b7ec9b1a7ebea5e6978f877b5",
                  "containerID": "docker://2fe72d8dc068cb8c7f168d63da2b815db714362fb05ca0bfa18ed71b32427d3d",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "kube-flannel-ds-c26m5",
              "generateName": "kube-flannel-ds-",
              "namespace": "kube-flannel",
              "uid": "d539bd3f-1fb5-41f7-ae60-e5dea77a8ad0",
              "resourceVersion": "935",
              "creationTimestamp": "2023-02-14T07:00:25Z",
              "labels": {
                "app": "flannel",
                "controller-revision-hash": "756fd9855",
                "pod-template-generation": "1",
                "tier": "node"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "DaemonSet",
                  "name": "kube-flannel-ds",
                  "uid": "1bf20d28-306d-4f05-8887-4d8fba22cc36",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T07:00:25Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:controller-revision-hash":{},"f:pod-template-generation":{},"f:tier":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"1bf20d28-306d-4f05-8887-4d8fba22cc36\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{".":{},"f:nodeSelectorTerms":{}}}},"f:containers":{"k:{\"name\":\"kube-flannel\"}":{".":{},"f:args":{},"f:command":{},"f:env":{".":{},"k:{\"name\":\"EVENT_QUEUE_DEPTH\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"POD_NAME\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}},"k:{\"name\":\"POD_NAMESPACE\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}}},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{".":{},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:securityContext":{".":{},"f:capabilities":{".":{},"f:add":{}},"f:privileged":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/kube-flannel/\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/run/flannel\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/run/xtables.lock\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostNetwork":{},"f:initContainers":{".":{},"k:{\"name\":\"install-cni\"}":{".":{},"f:args":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/cni/net.d\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/etc/kube-flannel/\"}":{".":{},"f:mountPath":{},"f:name":{}}}},"k:{\"name\":\"install-cni-plugin\"}":{".":{},"f:args":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/opt/cni/bin\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"cni\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"cni-plugin\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"flannel-cfg\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:name":{}},"f:name":{}},"k:{\"name\":\"run\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"xtables-lock\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T07:00:36Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:initContainerStatuses":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.186.142.227\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "run",
                  "hostPath": {
                    "path": "/run/flannel",
                    "type": ""
                  }
                },
                {
                  "name": "cni-plugin",
                  "hostPath": {
                    "path": "/opt/cni/bin",
                    "type": ""
                  }
                },
                {
                  "name": "cni",
                  "hostPath": {
                    "path": "/etc/cni/net.d",
                    "type": ""
                  }
                },
                {
                  "name": "flannel-cfg",
                  "configMap": {
                    "name": "kube-flannel-cfg",
                    "defaultMode": 420
                  }
                },
                {
                  "name": "xtables-lock",
                  "hostPath": {
                    "path": "/run/xtables.lock",
                    "type": "FileOrCreate"
                  }
                },
                {
                  "name": "kube-api-access-k27rm",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "initContainers": [
                {
                  "name": "install-cni-plugin",
                  "image": "docker.io/flannel/flannel-cni-plugin:v1.1.2",
                  "command": [
                    "cp"
                  ],
                  "args": [
                    "-f",
                    "/flannel",
                    "/opt/cni/bin/flannel"
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "cni-plugin",
                      "mountPath": "/opt/cni/bin"
                    },
                    {
                      "name": "kube-api-access-k27rm",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                },
                {
                  "name": "install-cni",
                  "image": "docker.io/flannel/flannel:v0.20.2",
                  "command": [
                    "cp"
                  ],
                  "args": [
                    "-f",
                    "/etc/kube-flannel/cni-conf.json",
                    "/etc/cni/net.d/10-flannel.conflist"
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "cni",
                      "mountPath": "/etc/cni/net.d"
                    },
                    {
                      "name": "flannel-cfg",
                      "mountPath": "/etc/kube-flannel/"
                    },
                    {
                      "name": "kube-api-access-k27rm",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                }
              ],
              "containers": [
                {
                  "name": "kube-flannel",
                  "image": "docker.io/flannel/flannel:v0.20.2",
                  "command": [
                    "/opt/bin/flanneld"
                  ],
                  "args": [
                    "--ip-masq",
                    "--kube-subnet-mgr"
                  ],
                  "env": [
                    {
                      "name": "POD_NAME",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.name"
                        }
                      }
                    },
                    {
                      "name": "POD_NAMESPACE",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.namespace"
                        }
                      }
                    },
                    {
                      "name": "EVENT_QUEUE_DEPTH",
                      "value": "5000"
                    }
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "run",
                      "mountPath": "/run/flannel"
                    },
                    {
                      "name": "flannel-cfg",
                      "mountPath": "/etc/kube-flannel/"
                    },
                    {
                      "name": "xtables-lock",
                      "mountPath": "/run/xtables.lock"
                    },
                    {
                      "name": "kube-api-access-k27rm",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "capabilities": {
                      "add": [
                        "NET_ADMIN",
                        "NET_RAW"
                      ]
                    },
                    "privileged": false
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "flannel",
              "serviceAccount": "flannel",
              "nodeName": "sc2-10-186-142-227.eng.vmware.com",
              "hostNetwork": true,
              "securityContext": {
                
              },
              "affinity": {
                "nodeAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": {
                    "nodeSelectorTerms": [
                      {
                        "matchFields": [
                          {
                            "key": "metadata.name",
                            "operator": "In",
                            "values": [
                              "sc2-10-186-142-227.eng.vmware.com"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/disk-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/memory-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/pid-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/unschedulable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/network-unavailable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                }
              ],
              "priorityClassName": "system-node-critical",
              "priority": 2000001000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:35Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:36Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:36Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:25Z"
                }
              ],
              "hostIP": "10.186.142.227",
              "podIP": "10.186.142.227",
              "podIPs": [
                {
                  "ip": "10.186.142.227"
                }
              ],
              "startTime": "2023-02-14T07:00:25Z",
              "initContainerStatuses": [
                {
                  "name": "install-cni-plugin",
                  "state": {
                    "terminated": {
                      "exitCode": 0,
                      "reason": "Completed",
                      "startedAt": "2023-02-14T07:00:28Z",
                      "finishedAt": "2023-02-14T07:00:28Z",
                      "containerID": "docker://d9bd3d63869fd3e7dfb2169ce6aea3d79058e03643f3ff366375675be9926e73"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "flannel/flannel-cni-plugin:v1.1.2",
                  "imageID": "docker-pullable://flannel/flannel-cni-plugin@sha256:bf4b62b131666d040f35a327d906ee5a3418280b68a88d9b9c7e828057210443",
                  "containerID": "docker://d9bd3d63869fd3e7dfb2169ce6aea3d79058e03643f3ff366375675be9926e73"
                },
                {
                  "name": "install-cni",
                  "state": {
                    "terminated": {
                      "exitCode": 0,
                      "reason": "Completed",
                      "startedAt": "2023-02-14T07:00:34Z",
                      "finishedAt": "2023-02-14T07:00:34Z",
                      "containerID": "docker://6bdc2154443207f8b681940e78f5ead0f1c0d54713b086df60facf6b14775ebd"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "flannel/flannel:v0.20.2",
                  "imageID": "docker-pullable://flannel/flannel@sha256:08e150f603cc4759a48e986fc26c0f531af1395d1bd48981226f86f45521b01c",
                  "containerID": "docker://6bdc2154443207f8b681940e78f5ead0f1c0d54713b086df60facf6b14775ebd"
                }
              ],
              "containerStatuses": [
                {
                  "name": "kube-flannel",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T07:00:35Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "flannel/flannel:v0.20.2",
                  "imageID": "docker-pullable://flannel/flannel@sha256:08e150f603cc4759a48e986fc26c0f531af1395d1bd48981226f86f45521b01c",
                  "containerID": "docker://c0aa9194433249a6a3fc739f101c0e27a32163c95b2bf4672e7e5f9d1a124a33",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "kube-flannel-ds-gw4rk",
              "generateName": "kube-flannel-ds-",
              "namespace": "kube-flannel",
              "uid": "ba8672c2-4853-4a55-9d13-0b47fe7ba866",
              "resourceVersion": "6565",
              "creationTimestamp": "2023-02-14T08:15:24Z",
              "labels": {
                "app": "flannel",
                "controller-revision-hash": "756fd9855",
                "pod-template-generation": "1",
                "tier": "node"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "DaemonSet",
                  "name": "kube-flannel-ds",
                  "uid": "1bf20d28-306d-4f05-8887-4d8fba22cc36",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:15:24Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:controller-revision-hash":{},"f:pod-template-generation":{},"f:tier":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"1bf20d28-306d-4f05-8887-4d8fba22cc36\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{".":{},"f:nodeSelectorTerms":{}}}},"f:containers":{"k:{\"name\":\"kube-flannel\"}":{".":{},"f:args":{},"f:command":{},"f:env":{".":{},"k:{\"name\":\"EVENT_QUEUE_DEPTH\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"POD_NAME\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}},"k:{\"name\":\"POD_NAMESPACE\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}}},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{".":{},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:securityContext":{".":{},"f:capabilities":{".":{},"f:add":{}},"f:privileged":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/kube-flannel/\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/run/flannel\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/run/xtables.lock\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostNetwork":{},"f:initContainers":{".":{},"k:{\"name\":\"install-cni\"}":{".":{},"f:args":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/cni/net.d\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/etc/kube-flannel/\"}":{".":{},"f:mountPath":{},"f:name":{}}}},"k:{\"name\":\"install-cni-plugin\"}":{".":{},"f:args":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/opt/cni/bin\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"cni\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"cni-plugin\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"flannel-cfg\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:name":{}},"f:name":{}},"k:{\"name\":\"run\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"xtables-lock\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:15:29Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:initContainerStatuses":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.186.134.223\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "run",
                  "hostPath": {
                    "path": "/run/flannel",
                    "type": ""
                  }
                },
                {
                  "name": "cni-plugin",
                  "hostPath": {
                    "path": "/opt/cni/bin",
                    "type": ""
                  }
                },
                {
                  "name": "cni",
                  "hostPath": {
                    "path": "/etc/cni/net.d",
                    "type": ""
                  }
                },
                {
                  "name": "flannel-cfg",
                  "configMap": {
                    "name": "kube-flannel-cfg",
                    "defaultMode": 420
                  }
                },
                {
                  "name": "xtables-lock",
                  "hostPath": {
                    "path": "/run/xtables.lock",
                    "type": "FileOrCreate"
                  }
                },
                {
                  "name": "kube-api-access-xgspf",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "initContainers": [
                {
                  "name": "install-cni-plugin",
                  "image": "docker.io/flannel/flannel-cni-plugin:v1.1.2",
                  "command": [
                    "cp"
                  ],
                  "args": [
                    "-f",
                    "/flannel",
                    "/opt/cni/bin/flannel"
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "cni-plugin",
                      "mountPath": "/opt/cni/bin"
                    },
                    {
                      "name": "kube-api-access-xgspf",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                },
                {
                  "name": "install-cni",
                  "image": "docker.io/flannel/flannel:v0.20.2",
                  "command": [
                    "cp"
                  ],
                  "args": [
                    "-f",
                    "/etc/kube-flannel/cni-conf.json",
                    "/etc/cni/net.d/10-flannel.conflist"
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "cni",
                      "mountPath": "/etc/cni/net.d"
                    },
                    {
                      "name": "flannel-cfg",
                      "mountPath": "/etc/kube-flannel/"
                    },
                    {
                      "name": "kube-api-access-xgspf",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                }
              ],
              "containers": [
                {
                  "name": "kube-flannel",
                  "image": "docker.io/flannel/flannel:v0.20.2",
                  "command": [
                    "/opt/bin/flanneld"
                  ],
                  "args": [
                    "--ip-masq",
                    "--kube-subnet-mgr"
                  ],
                  "env": [
                    {
                      "name": "POD_NAME",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.name"
                        }
                      }
                    },
                    {
                      "name": "POD_NAMESPACE",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.namespace"
                        }
                      }
                    },
                    {
                      "name": "EVENT_QUEUE_DEPTH",
                      "value": "5000"
                    }
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "run",
                      "mountPath": "/run/flannel"
                    },
                    {
                      "name": "flannel-cfg",
                      "mountPath": "/etc/kube-flannel/"
                    },
                    {
                      "name": "xtables-lock",
                      "mountPath": "/run/xtables.lock"
                    },
                    {
                      "name": "kube-api-access-xgspf",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "capabilities": {
                      "add": [
                        "NET_ADMIN",
                        "NET_RAW"
                      ]
                    },
                    "privileged": false
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "flannel",
              "serviceAccount": "flannel",
              "nodeName": "sc2-10-186-134-223.eng.vmware.com",
              "hostNetwork": true,
              "securityContext": {
                
              },
              "affinity": {
                "nodeAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": {
                    "nodeSelectorTerms": [
                      {
                        "matchFields": [
                          {
                            "key": "metadata.name",
                            "operator": "In",
                            "values": [
                              "sc2-10-186-134-223.eng.vmware.com"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/disk-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/memory-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/pid-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/unschedulable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/network-unavailable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                }
              ],
              "priorityClassName": "system-node-critical",
              "priority": 2000001000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:15:28Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:15:29Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:15:29Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:15:24Z"
                }
              ],
              "hostIP": "10.186.134.223",
              "podIP": "10.186.134.223",
              "podIPs": [
                {
                  "ip": "10.186.134.223"
                }
              ],
              "startTime": "2023-02-14T08:15:24Z",
              "initContainerStatuses": [
                {
                  "name": "install-cni-plugin",
                  "state": {
                    "terminated": {
                      "exitCode": 0,
                      "reason": "Completed",
                      "startedAt": "2023-02-14T08:15:26Z",
                      "finishedAt": "2023-02-14T08:15:26Z",
                      "containerID": "docker://dba166813cab5e9c05b01d77b197f845ed2706eafb74349433c9bc6d05393fbd"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "flannel/flannel-cni-plugin:v1.1.2",
                  "imageID": "docker-pullable://flannel/flannel-cni-plugin@sha256:bf4b62b131666d040f35a327d906ee5a3418280b68a88d9b9c7e828057210443",
                  "containerID": "docker://dba166813cab5e9c05b01d77b197f845ed2706eafb74349433c9bc6d05393fbd"
                },
                {
                  "name": "install-cni",
                  "state": {
                    "terminated": {
                      "exitCode": 0,
                      "reason": "Completed",
                      "startedAt": "2023-02-14T08:15:27Z",
                      "finishedAt": "2023-02-14T08:15:27Z",
                      "containerID": "docker://810b2d24b4620f89169c63bd3b37a862d70789a4edae9b80bd58faff81714d4f"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "flannel/flannel:v0.20.2",
                  "imageID": "docker-pullable://flannel/flannel@sha256:08e150f603cc4759a48e986fc26c0f531af1395d1bd48981226f86f45521b01c",
                  "containerID": "docker://810b2d24b4620f89169c63bd3b37a862d70789a4edae9b80bd58faff81714d4f"
                }
              ],
              "containerStatuses": [
                {
                  "name": "kube-flannel",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T08:15:28Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "flannel/flannel:v0.20.2",
                  "imageID": "docker-pullable://flannel/flannel@sha256:08e150f603cc4759a48e986fc26c0f531af1395d1bd48981226f86f45521b01c",
                  "containerID": "docker://212c8bb7b1302607b1eab09b572d4cf401026a25aaa40e8c6a39d5dbadd5b0b5",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "kube-flannel-ds-mhzgt",
              "generateName": "kube-flannel-ds-",
              "namespace": "kube-flannel",
              "uid": "f42a91ed-a444-4749-a6e2-a707a7171be9",
              "resourceVersion": "6692",
              "creationTimestamp": "2023-02-14T08:16:18Z",
              "labels": {
                "app": "flannel",
                "controller-revision-hash": "756fd9855",
                "pod-template-generation": "1",
                "tier": "node"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "DaemonSet",
                  "name": "kube-flannel-ds",
                  "uid": "1bf20d28-306d-4f05-8887-4d8fba22cc36",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:16:18Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:controller-revision-hash":{},"f:pod-template-generation":{},"f:tier":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"1bf20d28-306d-4f05-8887-4d8fba22cc36\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{".":{},"f:nodeSelectorTerms":{}}}},"f:containers":{"k:{\"name\":\"kube-flannel\"}":{".":{},"f:args":{},"f:command":{},"f:env":{".":{},"k:{\"name\":\"EVENT_QUEUE_DEPTH\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"POD_NAME\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}},"k:{\"name\":\"POD_NAMESPACE\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}}},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{".":{},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:securityContext":{".":{},"f:capabilities":{".":{},"f:add":{}},"f:privileged":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/kube-flannel/\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/run/flannel\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/run/xtables.lock\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostNetwork":{},"f:initContainers":{".":{},"k:{\"name\":\"install-cni\"}":{".":{},"f:args":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/cni/net.d\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/etc/kube-flannel/\"}":{".":{},"f:mountPath":{},"f:name":{}}}},"k:{\"name\":\"install-cni-plugin\"}":{".":{},"f:args":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/opt/cni/bin\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"cni\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"cni-plugin\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"flannel-cfg\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:name":{}},"f:name":{}},"k:{\"name\":\"run\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"xtables-lock\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:16:23Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:initContainerStatuses":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.186.131.84\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "run",
                  "hostPath": {
                    "path": "/run/flannel",
                    "type": ""
                  }
                },
                {
                  "name": "cni-plugin",
                  "hostPath": {
                    "path": "/opt/cni/bin",
                    "type": ""
                  }
                },
                {
                  "name": "cni",
                  "hostPath": {
                    "path": "/etc/cni/net.d",
                    "type": ""
                  }
                },
                {
                  "name": "flannel-cfg",
                  "configMap": {
                    "name": "kube-flannel-cfg",
                    "defaultMode": 420
                  }
                },
                {
                  "name": "xtables-lock",
                  "hostPath": {
                    "path": "/run/xtables.lock",
                    "type": "FileOrCreate"
                  }
                },
                {
                  "name": "kube-api-access-fkm7k",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "initContainers": [
                {
                  "name": "install-cni-plugin",
                  "image": "docker.io/flannel/flannel-cni-plugin:v1.1.2",
                  "command": [
                    "cp"
                  ],
                  "args": [
                    "-f",
                    "/flannel",
                    "/opt/cni/bin/flannel"
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "cni-plugin",
                      "mountPath": "/opt/cni/bin"
                    },
                    {
                      "name": "kube-api-access-fkm7k",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                },
                {
                  "name": "install-cni",
                  "image": "docker.io/flannel/flannel:v0.20.2",
                  "command": [
                    "cp"
                  ],
                  "args": [
                    "-f",
                    "/etc/kube-flannel/cni-conf.json",
                    "/etc/cni/net.d/10-flannel.conflist"
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "cni",
                      "mountPath": "/etc/cni/net.d"
                    },
                    {
                      "name": "flannel-cfg",
                      "mountPath": "/etc/kube-flannel/"
                    },
                    {
                      "name": "kube-api-access-fkm7k",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                }
              ],
              "containers": [
                {
                  "name": "kube-flannel",
                  "image": "docker.io/flannel/flannel:v0.20.2",
                  "command": [
                    "/opt/bin/flanneld"
                  ],
                  "args": [
                    "--ip-masq",
                    "--kube-subnet-mgr"
                  ],
                  "env": [
                    {
                      "name": "POD_NAME",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.name"
                        }
                      }
                    },
                    {
                      "name": "POD_NAMESPACE",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.namespace"
                        }
                      }
                    },
                    {
                      "name": "EVENT_QUEUE_DEPTH",
                      "value": "5000"
                    }
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "run",
                      "mountPath": "/run/flannel"
                    },
                    {
                      "name": "flannel-cfg",
                      "mountPath": "/etc/kube-flannel/"
                    },
                    {
                      "name": "xtables-lock",
                      "mountPath": "/run/xtables.lock"
                    },
                    {
                      "name": "kube-api-access-fkm7k",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "capabilities": {
                      "add": [
                        "NET_ADMIN",
                        "NET_RAW"
                      ]
                    },
                    "privileged": false
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "flannel",
              "serviceAccount": "flannel",
              "nodeName": "sc2-10-186-131-84.eng.vmware.com",
              "hostNetwork": true,
              "securityContext": {
                
              },
              "affinity": {
                "nodeAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": {
                    "nodeSelectorTerms": [
                      {
                        "matchFields": [
                          {
                            "key": "metadata.name",
                            "operator": "In",
                            "values": [
                              "sc2-10-186-131-84.eng.vmware.com"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/disk-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/memory-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/pid-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/unschedulable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/network-unavailable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                }
              ],
              "priorityClassName": "system-node-critical",
              "priority": 2000001000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:16:22Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:16:23Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:16:23Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:16:18Z"
                }
              ],
              "hostIP": "10.186.131.84",
              "podIP": "10.186.131.84",
              "podIPs": [
                {
                  "ip": "10.186.131.84"
                }
              ],
              "startTime": "2023-02-14T08:16:18Z",
              "initContainerStatuses": [
                {
                  "name": "install-cni-plugin",
                  "state": {
                    "terminated": {
                      "exitCode": 0,
                      "reason": "Completed",
                      "startedAt": "2023-02-14T08:16:20Z",
                      "finishedAt": "2023-02-14T08:16:20Z",
                      "containerID": "docker://c2d13866c94ba5d7b339d5c0c6450dcfc72385593d66d1487268f8f83b712800"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "flannel/flannel-cni-plugin:v1.1.2",
                  "imageID": "docker-pullable://flannel/flannel-cni-plugin@sha256:bf4b62b131666d040f35a327d906ee5a3418280b68a88d9b9c7e828057210443",
                  "containerID": "docker://c2d13866c94ba5d7b339d5c0c6450dcfc72385593d66d1487268f8f83b712800"
                },
                {
                  "name": "install-cni",
                  "state": {
                    "terminated": {
                      "exitCode": 0,
                      "reason": "Completed",
                      "startedAt": "2023-02-14T08:16:21Z",
                      "finishedAt": "2023-02-14T08:16:21Z",
                      "containerID": "docker://38ce6993efd6d75a3908773ca64400f04a300bac90dae98ca010f343719c8e2e"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "flannel/flannel:v0.20.2",
                  "imageID": "docker-pullable://flannel/flannel@sha256:08e150f603cc4759a48e986fc26c0f531af1395d1bd48981226f86f45521b01c",
                  "containerID": "docker://38ce6993efd6d75a3908773ca64400f04a300bac90dae98ca010f343719c8e2e"
                }
              ],
              "containerStatuses": [
                {
                  "name": "kube-flannel",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T08:16:22Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "flannel/flannel:v0.20.2",
                  "imageID": "docker-pullable://flannel/flannel@sha256:08e150f603cc4759a48e986fc26c0f531af1395d1bd48981226f86f45521b01c",
                  "containerID": "docker://cc7c5e10b32720c21c4f6fbafd1c3bdb3ce2a3ce157f9589f81e22bebc3bdb8f",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "coredns-558bd4d5db-4wvws",
              "generateName": "coredns-558bd4d5db-",
              "namespace": "kube-system",
              "uid": "bcab59c0-1265-407c-a600-c5d0c9c74663",
              "resourceVersion": "984",
              "creationTimestamp": "2023-02-14T06:54:28Z",
              "labels": {
                "k8s-app": "kube-dns",
                "pod-template-hash": "558bd4d5db"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "ReplicaSet",
                  "name": "coredns-558bd4d5db",
                  "uid": "b0fa36a0-8408-45b8-9636-c2a924354262",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T06:54:28Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:k8s-app":{},"f:pod-template-hash":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"b0fa36a0-8408-45b8-9636-c2a924354262\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:containers":{"k:{\"name\":\"coredns\"}":{".":{},"f:args":{},"f:image":{},"f:imagePullPolicy":{},"f:livenessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":53,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}},"k:{\"containerPort\":53,\"protocol\":\"UDP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}},"k:{\"containerPort\":9153,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}}},"f:readinessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:resources":{".":{},"f:limits":{".":{},"f:memory":{}},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:securityContext":{".":{},"f:allowPrivilegeEscalation":{},"f:capabilities":{".":{},"f:add":{},"f:drop":{}},"f:readOnlyRootFilesystem":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/coredns\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:nodeSelector":{".":{},"f:kubernetes.io/os":{}},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"config-volume\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:items":{},"f:name":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kube-scheduler",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T06:54:28Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{".":{},"k:{\"type\":\"PodScheduled\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:message":{},"f:reason":{},"f:status":{},"f:type":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T07:00:49Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.2\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "config-volume",
                  "configMap": {
                    "name": "coredns",
                    "items": [
                      {
                        "key": "Corefile",
                        "path": "Corefile"
                      }
                    ],
                    "defaultMode": 420
                  }
                },
                {
                  "name": "kube-api-access-2k4m4",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "coredns",
                  "image": "k8s.gcr.io/coredns/coredns:v1.8.0",
                  "args": [
                    "-conf",
                    "/etc/coredns/Corefile"
                  ],
                  "ports": [
                    {
                      "name": "dns",
                      "containerPort": 53,
                      "protocol": "UDP"
                    },
                    {
                      "name": "dns-tcp",
                      "containerPort": 53,
                      "protocol": "TCP"
                    },
                    {
                      "name": "metrics",
                      "containerPort": 9153,
                      "protocol": "TCP"
                    }
                  ],
                  "resources": {
                    "limits": {
                      "memory": "170Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "70Mi"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "config-volume",
                      "readOnly": true,
                      "mountPath": "/etc/coredns"
                    },
                    {
                      "name": "kube-api-access-2k4m4",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "livenessProbe": {
                    "httpGet": {
                      "path": "/health",
                      "port": 8080,
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 60,
                    "timeoutSeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 5
                  },
                  "readinessProbe": {
                    "httpGet": {
                      "path": "/ready",
                      "port": 8181,
                      "scheme": "HTTP"
                    },
                    "timeoutSeconds": 1,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 3
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "capabilities": {
                      "add": [
                        "NET_BIND_SERVICE"
                      ],
                      "drop": [
                        "all"
                      ]
                    },
                    "readOnlyRootFilesystem": true,
                    "allowPrivilegeEscalation": false
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "Default",
              "nodeSelector": {
                "kubernetes.io/os": "linux"
              },
              "serviceAccountName": "coredns",
              "serviceAccount": "coredns",
              "nodeName": "sc2-10-186-142-227.eng.vmware.com",
              "securityContext": {
                
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "CriticalAddonsOnly",
                  "operator": "Exists"
                },
                {
                  "key": "node-role.kubernetes.io/master",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node-role.kubernetes.io/control-plane",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                }
              ],
              "priorityClassName": "system-cluster-critical",
              "priority": 2000000000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:47Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:49Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:49Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:47Z"
                }
              ],
              "hostIP": "10.186.142.227",
              "podIP": "10.244.0.2",
              "podIPs": [
                {
                  "ip": "10.244.0.2"
                }
              ],
              "startTime": "2023-02-14T07:00:47Z",
              "containerStatuses": [
                {
                  "name": "coredns",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T07:00:48Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "k8s.gcr.io/coredns/coredns:v1.8.0",
                  "imageID": "docker-pullable://k8s.gcr.io/coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e",
                  "containerID": "docker://b6b9468877e8dd508d95fa3b0f19f5816afcfa25cb854455f788cb9b83371303",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "coredns-558bd4d5db-cp2gh",
              "generateName": "coredns-558bd4d5db-",
              "namespace": "kube-system",
              "uid": "eb558551-081e-4e38-93bb-25fc96e25b03",
              "resourceVersion": "976",
              "creationTimestamp": "2023-02-14T06:54:28Z",
              "labels": {
                "k8s-app": "kube-dns",
                "pod-template-hash": "558bd4d5db"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "ReplicaSet",
                  "name": "coredns-558bd4d5db",
                  "uid": "b0fa36a0-8408-45b8-9636-c2a924354262",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T06:54:28Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:k8s-app":{},"f:pod-template-hash":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"b0fa36a0-8408-45b8-9636-c2a924354262\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:containers":{"k:{\"name\":\"coredns\"}":{".":{},"f:args":{},"f:image":{},"f:imagePullPolicy":{},"f:livenessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":53,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}},"k:{\"containerPort\":53,\"protocol\":\"UDP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}},"k:{\"containerPort\":9153,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}}},"f:readinessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:resources":{".":{},"f:limits":{".":{},"f:memory":{}},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:securityContext":{".":{},"f:allowPrivilegeEscalation":{},"f:capabilities":{".":{},"f:add":{},"f:drop":{}},"f:readOnlyRootFilesystem":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/coredns\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:nodeSelector":{".":{},"f:kubernetes.io/os":{}},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"config-volume\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:items":{},"f:name":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kube-scheduler",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T06:54:28Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{".":{},"k:{\"type\":\"PodScheduled\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:message":{},"f:reason":{},"f:status":{},"f:type":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T07:00:49Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.3\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "config-volume",
                  "configMap": {
                    "name": "coredns",
                    "items": [
                      {
                        "key": "Corefile",
                        "path": "Corefile"
                      }
                    ],
                    "defaultMode": 420
                  }
                },
                {
                  "name": "kube-api-access-t9q6z",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "coredns",
                  "image": "k8s.gcr.io/coredns/coredns:v1.8.0",
                  "args": [
                    "-conf",
                    "/etc/coredns/Corefile"
                  ],
                  "ports": [
                    {
                      "name": "dns",
                      "containerPort": 53,
                      "protocol": "UDP"
                    },
                    {
                      "name": "dns-tcp",
                      "containerPort": 53,
                      "protocol": "TCP"
                    },
                    {
                      "name": "metrics",
                      "containerPort": 9153,
                      "protocol": "TCP"
                    }
                  ],
                  "resources": {
                    "limits": {
                      "memory": "170Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "70Mi"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "config-volume",
                      "readOnly": true,
                      "mountPath": "/etc/coredns"
                    },
                    {
                      "name": "kube-api-access-t9q6z",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "livenessProbe": {
                    "httpGet": {
                      "path": "/health",
                      "port": 8080,
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 60,
                    "timeoutSeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 5
                  },
                  "readinessProbe": {
                    "httpGet": {
                      "path": "/ready",
                      "port": 8181,
                      "scheme": "HTTP"
                    },
                    "timeoutSeconds": 1,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 3
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "capabilities": {
                      "add": [
                        "NET_BIND_SERVICE"
                      ],
                      "drop": [
                        "all"
                      ]
                    },
                    "readOnlyRootFilesystem": true,
                    "allowPrivilegeEscalation": false
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "Default",
              "nodeSelector": {
                "kubernetes.io/os": "linux"
              },
              "serviceAccountName": "coredns",
              "serviceAccount": "coredns",
              "nodeName": "sc2-10-186-142-227.eng.vmware.com",
              "securityContext": {
                
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "CriticalAddonsOnly",
                  "operator": "Exists"
                },
                {
                  "key": "node-role.kubernetes.io/master",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node-role.kubernetes.io/control-plane",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                }
              ],
              "priorityClassName": "system-cluster-critical",
              "priority": 2000000000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:47Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:49Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:49Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T07:00:47Z"
                }
              ],
              "hostIP": "10.186.142.227",
              "podIP": "10.244.0.3",
              "podIPs": [
                {
                  "ip": "10.244.0.3"
                }
              ],
              "startTime": "2023-02-14T07:00:47Z",
              "containerStatuses": [
                {
                  "name": "coredns",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T07:00:48Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "k8s.gcr.io/coredns/coredns:v1.8.0",
                  "imageID": "docker-pullable://k8s.gcr.io/coredns/coredns@sha256:cc8fb77bc2a0541949d1d9320a641b82fd392b0d3d8145469ca4709ae769980e",
                  "containerID": "docker://02cb9ad1d227fd2a666ce8c9e2fa761840b522ce45202fdc0fd4829606cf5423",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "etcd-sc2-10-186-142-227.eng.vmware.com",
              "namespace": "kube-system",
              "uid": "45757831-85f6-474d-9b74-d56d3ddecc2b",
              "resourceVersion": "448",
              "creationTimestamp": "2023-02-14T06:54:12Z",
              "labels": {
                "component": "etcd",
                "tier": "control-plane"
              },
              "annotations": {
                "kubeadm.kubernetes.io/etcd.advertise-client-urls": "https://10.186.142.227:2379",
                "kubernetes.io/config.hash": "3ba315330b43658f41a55f956e534f2e",
                "kubernetes.io/config.mirror": "3ba315330b43658f41a55f956e534f2e",
                "kubernetes.io/config.seen": "2023-02-14T01:53:55.700211974-05:00",
                "kubernetes.io/config.source": "file"
              },
              "ownerReferences": [
                {
                  "apiVersion": "v1",
                  "kind": "Node",
                  "name": "sc2-10-186-142-227.eng.vmware.com",
                  "uid": "a3503260-2de8-4bfd-a145-2b76d4fa0e8b",
                  "controller": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T06:54:29Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{".":{},"f:kubeadm.kubernetes.io/etcd.advertise-client-urls":{},"f:kubernetes.io/config.hash":{},"f:kubernetes.io/config.mirror":{},"f:kubernetes.io/config.seen":{},"f:kubernetes.io/config.source":{}},"f:labels":{".":{},"f:component":{},"f:tier":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"a3503260-2de8-4bfd-a145-2b76d4fa0e8b\"}":{".":{},"f:apiVersion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:containers":{"k:{\"name\":\"etcd\"}":{".":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:livenessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:host":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:name":{},"f:resources":{".":{},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:startupProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:host":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/kubernetes/pki/etcd\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/var/lib/etcd\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostNetwork":{},"f:nodeName":{},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"etcd-certs\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"etcd-data\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}},"f:status":{"f:conditions":{".":{},"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodScheduled\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.186.142.227\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "etcd-certs",
                  "hostPath": {
                    "path": "/etc/kubernetes/pki/etcd",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "etcd-data",
                  "hostPath": {
                    "path": "/var/lib/etcd",
                    "type": "DirectoryOrCreate"
                  }
                }
              ],
              "containers": [
                {
                  "name": "etcd",
                  "image": "k8s.gcr.io/etcd:3.4.13-0",
                  "command": [
                    "etcd",
                    "--advertise-client-urls=https://10.186.142.227:2379",
                    "--cert-file=/etc/kubernetes/pki/etcd/server.crt",
                    "--client-cert-auth=true",
                    "--data-dir=/var/lib/etcd",
                    "--initial-advertise-peer-urls=https://10.186.142.227:2380",
                    "--initial-cluster=sc2-10-186-142-227.eng.vmware.com=https://10.186.142.227:2380",
                    "--key-file=/etc/kubernetes/pki/etcd/server.key",
                    "--listen-client-urls=https://127.0.0.1:2379,https://10.186.142.227:2379",
                    "--listen-metrics-urls=http://127.0.0.1:2381",
                    "--listen-peer-urls=https://10.186.142.227:2380",
                    "--name=sc2-10-186-142-227.eng.vmware.com",
                    "--peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt",
                    "--peer-client-cert-auth=true",
                    "--peer-key-file=/etc/kubernetes/pki/etcd/peer.key",
                    "--peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt",
                    "--snapshot-count=10000",
                    "--trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt"
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "100m",
                      "memory": "100Mi"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "etcd-data",
                      "mountPath": "/var/lib/etcd"
                    },
                    {
                      "name": "etcd-certs",
                      "mountPath": "/etc/kubernetes/pki/etcd"
                    }
                  ],
                  "livenessProbe": {
                    "httpGet": {
                      "path": "/health",
                      "port": 2381,
                      "host": "127.0.0.1",
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 15,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 8
                  },
                  "startupProbe": {
                    "httpGet": {
                      "path": "/health",
                      "port": 2381,
                      "host": "127.0.0.1",
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 15,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 24
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "nodeName": "sc2-10-186-142-227.eng.vmware.com",
              "hostNetwork": true,
              "securityContext": {
                
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "operator": "Exists",
                  "effect": "NoExecute"
                }
              ],
              "priorityClassName": "system-node-critical",
              "priority": 2000001000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:19Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:29Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:29Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:19Z"
                }
              ],
              "hostIP": "10.186.142.227",
              "podIP": "10.186.142.227",
              "podIPs": [
                {
                  "ip": "10.186.142.227"
                }
              ],
              "startTime": "2023-02-14T06:54:19Z",
              "containerStatuses": [
                {
                  "name": "etcd",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T06:54:04Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "k8s.gcr.io/etcd:3.4.13-0",
                  "imageID": "docker-pullable://k8s.gcr.io/etcd@sha256:4ad90a11b55313b182afc186b9876c8e891531b8db4c9bf1541953021618d0e2",
                  "containerID": "docker://b48f12de86f85d1d17ac9e2133a76f5263131f3265157ac1340d2587d219c19d",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "kube-apiserver-sc2-10-186-142-227.eng.vmware.com",
              "namespace": "kube-system",
              "uid": "05da83e2-f8aa-42ff-b8bb-7705466237b9",
              "resourceVersion": "13170",
              "creationTimestamp": "2023-02-14T06:54:19Z",
              "labels": {
                "component": "kube-apiserver",
                "tier": "control-plane"
              },
              "annotations": {
                "kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint": "10.186.142.227:6443",
                "kubernetes.io/config.hash": "3e079555989cd36613bf169f94ab08d9",
                "kubernetes.io/config.mirror": "3e079555989cd36613bf169f94ab08d9",
                "kubernetes.io/config.seen": "2023-02-14T01:54:13.297819131-05:00",
                "kubernetes.io/config.source": "file"
              },
              "ownerReferences": [
                {
                  "apiVersion": "v1",
                  "kind": "Node",
                  "name": "sc2-10-186-142-227.eng.vmware.com",
                  "uid": "a3503260-2de8-4bfd-a145-2b76d4fa0e8b",
                  "controller": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T09:20:12Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{".":{},"f:kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint":{},"f:kubernetes.io/config.hash":{},"f:kubernetes.io/config.mirror":{},"f:kubernetes.io/config.seen":{},"f:kubernetes.io/config.source":{}},"f:labels":{".":{},"f:component":{},"f:tier":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"a3503260-2de8-4bfd-a145-2b76d4fa0e8b\"}":{".":{},"f:apiVersion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:containers":{"k:{\"name\":\"kube-apiserver\"}":{".":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:livenessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:host":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:name":{},"f:readinessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:host":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:resources":{".":{},"f:requests":{".":{},"f:cpu":{}}},"f:startupProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:host":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/kubernetes/pki\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/pki\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/ssl/certs\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostNetwork":{},"f:nodeName":{},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"ca-certs\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"etc-pki\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"k8s-certs\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}},"f:status":{"f:conditions":{".":{},"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodScheduled\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.186.142.227\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "ca-certs",
                  "hostPath": {
                    "path": "/etc/ssl/certs",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "etc-pki",
                  "hostPath": {
                    "path": "/etc/pki",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "k8s-certs",
                  "hostPath": {
                    "path": "/etc/kubernetes/pki",
                    "type": "DirectoryOrCreate"
                  }
                }
              ],
              "containers": [
                {
                  "name": "kube-apiserver",
                  "image": "k8s.gcr.io/kube-apiserver:v1.21.14",
                  "command": [
                    "kube-apiserver",
                    "--advertise-address=10.186.142.227",
                    "--allow-privileged=true",
                    "--authorization-mode=Node,RBAC",
                    "--client-ca-file=/etc/kubernetes/pki/ca.crt",
                    "--enable-admission-plugins=NodeRestriction",
                    "--enable-bootstrap-token-auth=true",
                    "--etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt",
                    "--etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt",
                    "--etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key",
                    "--etcd-servers=https://127.0.0.1:2379",
                    "--insecure-port=0",
                    "--kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt",
                    "--kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key",
                    "--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname",
                    "--proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt",
                    "--proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key",
                    "--requestheader-allowed-names=front-proxy-client",
                    "--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt",
                    "--requestheader-extra-headers-prefix=X-Remote-Extra-",
                    "--requestheader-group-headers=X-Remote-Group",
                    "--requestheader-username-headers=X-Remote-User",
                    "--secure-port=6443",
                    "--service-account-issuer=https://kubernetes.default.svc.cluster.local",
                    "--service-account-key-file=/etc/kubernetes/pki/sa.pub",
                    "--service-account-signing-key-file=/etc/kubernetes/pki/sa.key",
                    "--service-cluster-ip-range=10.96.0.0/12",
                    "--tls-cert-file=/etc/kubernetes/pki/apiserver.crt",
                    "--tls-private-key-file=/etc/kubernetes/pki/apiserver.key"
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "250m"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "ca-certs",
                      "readOnly": true,
                      "mountPath": "/etc/ssl/certs"
                    },
                    {
                      "name": "etc-pki",
                      "readOnly": true,
                      "mountPath": "/etc/pki"
                    },
                    {
                      "name": "k8s-certs",
                      "readOnly": true,
                      "mountPath": "/etc/kubernetes/pki"
                    }
                  ],
                  "livenessProbe": {
                    "httpGet": {
                      "path": "/livez",
                      "port": 6443,
                      "host": "10.186.142.227",
                      "scheme": "HTTPS"
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 15,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 8
                  },
                  "readinessProbe": {
                    "httpGet": {
                      "path": "/readyz",
                      "port": 6443,
                      "host": "10.186.142.227",
                      "scheme": "HTTPS"
                    },
                    "timeoutSeconds": 15,
                    "periodSeconds": 1,
                    "successThreshold": 1,
                    "failureThreshold": 3
                  },
                  "startupProbe": {
                    "httpGet": {
                      "path": "/livez",
                      "port": 6443,
                      "host": "10.186.142.227",
                      "scheme": "HTTPS"
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 15,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 24
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "nodeName": "sc2-10-186-142-227.eng.vmware.com",
              "hostNetwork": true,
              "securityContext": {
                
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "operator": "Exists",
                  "effect": "NoExecute"
                }
              ],
              "priorityClassName": "system-node-critical",
              "priority": 2000001000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:19Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T09:20:12Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T09:20:12Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:19Z"
                }
              ],
              "hostIP": "10.186.142.227",
              "podIP": "10.186.142.227",
              "podIPs": [
                {
                  "ip": "10.186.142.227"
                }
              ],
              "startTime": "2023-02-14T06:54:19Z",
              "containerStatuses": [
                {
                  "name": "kube-apiserver",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T06:54:04Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "k8s.gcr.io/kube-apiserver:v1.21.14",
                  "imageID": "docker-pullable://k8s.gcr.io/kube-apiserver@sha256:56e3fd83edc68b971c896cae4718b95a4a5ac88594882b1955123d3a30eb2c8f",
                  "containerID": "docker://7d552bf6e1070d842a6552ec5169b778e08b49c2056c060baad9064be6434c5a",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "kube-controller-manager-sc2-10-186-142-227.eng.vmware.com",
              "namespace": "kube-system",
              "uid": "d7cd6e26-1549-42b0-af7f-e431d79cdadb",
              "resourceVersion": "365",
              "creationTimestamp": "2023-02-14T06:54:10Z",
              "labels": {
                "component": "kube-controller-manager",
                "tier": "control-plane"
              },
              "annotations": {
                "kubernetes.io/config.hash": "82c21daceb8ec1e714eba07522b52f08",
                "kubernetes.io/config.mirror": "82c21daceb8ec1e714eba07522b52f08",
                "kubernetes.io/config.seen": "2023-02-14T01:53:55.700219871-05:00",
                "kubernetes.io/config.source": "file"
              },
              "ownerReferences": [
                {
                  "apiVersion": "v1",
                  "kind": "Node",
                  "name": "sc2-10-186-142-227.eng.vmware.com",
                  "uid": "a3503260-2de8-4bfd-a145-2b76d4fa0e8b",
                  "controller": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T06:54:21Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{".":{},"f:kubernetes.io/config.hash":{},"f:kubernetes.io/config.mirror":{},"f:kubernetes.io/config.seen":{},"f:kubernetes.io/config.source":{}},"f:labels":{".":{},"f:component":{},"f:tier":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"a3503260-2de8-4bfd-a145-2b76d4fa0e8b\"}":{".":{},"f:apiVersion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:containers":{"k:{\"name\":\"kube-controller-manager\"}":{".":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:livenessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:host":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:name":{},"f:resources":{".":{},"f:requests":{".":{},"f:cpu":{}}},"f:startupProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:host":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/kubernetes/controller-manager.conf\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/kubernetes/pki\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/pki\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/ssl/certs\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/usr/libexec/kubernetes/kubelet-plugins/volume/exec\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostNetwork":{},"f:nodeName":{},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"ca-certs\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"etc-pki\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"flexvolume-dir\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"k8s-certs\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"kubeconfig\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}},"f:status":{"f:conditions":{".":{},"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodScheduled\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.186.142.227\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "ca-certs",
                  "hostPath": {
                    "path": "/etc/ssl/certs",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "etc-pki",
                  "hostPath": {
                    "path": "/etc/pki",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "flexvolume-dir",
                  "hostPath": {
                    "path": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "k8s-certs",
                  "hostPath": {
                    "path": "/etc/kubernetes/pki",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "kubeconfig",
                  "hostPath": {
                    "path": "/etc/kubernetes/controller-manager.conf",
                    "type": "FileOrCreate"
                  }
                }
              ],
              "containers": [
                {
                  "name": "kube-controller-manager",
                  "image": "k8s.gcr.io/kube-controller-manager:v1.21.14",
                  "command": [
                    "kube-controller-manager",
                    "--allocate-node-cidrs=true",
                    "--authentication-kubeconfig=/etc/kubernetes/controller-manager.conf",
                    "--authorization-kubeconfig=/etc/kubernetes/controller-manager.conf",
                    "--bind-address=127.0.0.1",
                    "--client-ca-file=/etc/kubernetes/pki/ca.crt",
                    "--cluster-cidr=10.244.0.0/16",
                    "--cluster-name=kubernetes",
                    "--cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt",
                    "--cluster-signing-key-file=/etc/kubernetes/pki/ca.key",
                    "--controllers=*,bootstrapsigner,tokencleaner",
                    "--kubeconfig=/etc/kubernetes/controller-manager.conf",
                    "--leader-elect=true",
                    "--port=0",
                    "--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt",
                    "--root-ca-file=/etc/kubernetes/pki/ca.crt",
                    "--service-account-private-key-file=/etc/kubernetes/pki/sa.key",
                    "--service-cluster-ip-range=10.96.0.0/12",
                    "--use-service-account-credentials=true"
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "200m"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "ca-certs",
                      "readOnly": true,
                      "mountPath": "/etc/ssl/certs"
                    },
                    {
                      "name": "etc-pki",
                      "readOnly": true,
                      "mountPath": "/etc/pki"
                    },
                    {
                      "name": "flexvolume-dir",
                      "mountPath": "/usr/libexec/kubernetes/kubelet-plugins/volume/exec"
                    },
                    {
                      "name": "k8s-certs",
                      "readOnly": true,
                      "mountPath": "/etc/kubernetes/pki"
                    },
                    {
                      "name": "kubeconfig",
                      "readOnly": true,
                      "mountPath": "/etc/kubernetes/controller-manager.conf"
                    }
                  ],
                  "livenessProbe": {
                    "httpGet": {
                      "path": "/healthz",
                      "port": 10257,
                      "host": "127.0.0.1",
                      "scheme": "HTTPS"
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 15,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 8
                  },
                  "startupProbe": {
                    "httpGet": {
                      "path": "/healthz",
                      "port": 10257,
                      "host": "127.0.0.1",
                      "scheme": "HTTPS"
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 15,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 24
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "nodeName": "sc2-10-186-142-227.eng.vmware.com",
              "hostNetwork": true,
              "securityContext": {
                
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "operator": "Exists",
                  "effect": "NoExecute"
                }
              ],
              "priorityClassName": "system-node-critical",
              "priority": 2000001000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:02Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:20Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:20Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:02Z"
                }
              ],
              "hostIP": "10.186.142.227",
              "podIP": "10.186.142.227",
              "podIPs": [
                {
                  "ip": "10.186.142.227"
                }
              ],
              "startTime": "2023-02-14T06:54:02Z",
              "containerStatuses": [
                {
                  "name": "kube-controller-manager",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T06:54:04Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "k8s.gcr.io/kube-controller-manager:v1.21.14",
                  "imageID": "docker-pullable://k8s.gcr.io/kube-controller-manager@sha256:48528cf6f00ce37001f65fe658ab513caaf1cb245df8ab86d803590b3ce66e33",
                  "containerID": "docker://05902e1ce512fb83c8febbbc11910f551957773f8cb74b1ec1b735befc8315e5",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "kube-proxy-8kl6w",
              "generateName": "kube-proxy-",
              "namespace": "kube-system",
              "uid": "8c2d1485-c14f-4dc4-bf2b-50ac66211524",
              "resourceVersion": "454",
              "creationTimestamp": "2023-02-14T06:54:28Z",
              "labels": {
                "controller-revision-hash": "697f886788",
                "k8s-app": "kube-proxy",
                "pod-template-generation": "1"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "DaemonSet",
                  "name": "kube-proxy",
                  "uid": "dc162977-356c-49f6-9541-2dfdc889b069",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T06:54:28Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:k8s-app":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"dc162977-356c-49f6-9541-2dfdc889b069\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{".":{},"f:nodeSelectorTerms":{}}}},"f:containers":{"k:{\"name\":\"kube-proxy\"}":{".":{},"f:command":{},"f:env":{".":{},"k:{\"name\":\"NODE_NAME\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}}},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:securityContext":{".":{},"f:privileged":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/lib/modules\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/run/xtables.lock\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/var/lib/kube-proxy\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostNetwork":{},"f:nodeSelector":{".":{},"f:kubernetes.io/os":{}},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"kube-proxy\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:name":{}},"f:name":{}},"k:{\"name\":\"lib-modules\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"xtables-lock\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T06:54:30Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.186.142.227\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "kube-proxy",
                  "configMap": {
                    "name": "kube-proxy",
                    "defaultMode": 420
                  }
                },
                {
                  "name": "xtables-lock",
                  "hostPath": {
                    "path": "/run/xtables.lock",
                    "type": "FileOrCreate"
                  }
                },
                {
                  "name": "lib-modules",
                  "hostPath": {
                    "path": "/lib/modules",
                    "type": ""
                  }
                },
                {
                  "name": "kube-api-access-jv2x4",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "kube-proxy",
                  "image": "k8s.gcr.io/kube-proxy:v1.21.14",
                  "command": [
                    "/usr/local/bin/kube-proxy",
                    "--config=/var/lib/kube-proxy/config.conf",
                    "--hostname-override=$(NODE_NAME)"
                  ],
                  "env": [
                    {
                      "name": "NODE_NAME",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "spec.nodeName"
                        }
                      }
                    }
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "kube-proxy",
                      "mountPath": "/var/lib/kube-proxy"
                    },
                    {
                      "name": "xtables-lock",
                      "mountPath": "/run/xtables.lock"
                    },
                    {
                      "name": "lib-modules",
                      "readOnly": true,
                      "mountPath": "/lib/modules"
                    },
                    {
                      "name": "kube-api-access-jv2x4",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "privileged": true
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "nodeSelector": {
                "kubernetes.io/os": "linux"
              },
              "serviceAccountName": "kube-proxy",
              "serviceAccount": "kube-proxy",
              "nodeName": "sc2-10-186-142-227.eng.vmware.com",
              "hostNetwork": true,
              "securityContext": {
                
              },
              "affinity": {
                "nodeAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": {
                    "nodeSelectorTerms": [
                      {
                        "matchFields": [
                          {
                            "key": "metadata.name",
                            "operator": "In",
                            "values": [
                              "sc2-10-186-142-227.eng.vmware.com"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "CriticalAddonsOnly",
                  "operator": "Exists"
                },
                {
                  "operator": "Exists"
                },
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/disk-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/memory-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/pid-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/unschedulable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/network-unavailable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                }
              ],
              "priorityClassName": "system-node-critical",
              "priority": 2000001000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:28Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:30Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:30Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:28Z"
                }
              ],
              "hostIP": "10.186.142.227",
              "podIP": "10.186.142.227",
              "podIPs": [
                {
                  "ip": "10.186.142.227"
                }
              ],
              "startTime": "2023-02-14T06:54:28Z",
              "containerStatuses": [
                {
                  "name": "kube-proxy",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T06:54:29Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "k8s.gcr.io/kube-proxy:v1.21.14",
                  "imageID": "docker-pullable://k8s.gcr.io/kube-proxy@sha256:650dc60fc75ecd78e0ac79e9296d405402e2032032bbd74ce8f61d241764486c",
                  "containerID": "docker://e438644098e84c4692c974ca461e887273caa22dad19806d9df4a1b4fb8e902a",
                  "started": true
                }
              ],
              "qosClass": "BestEffort"
            }
          },
          {
            "metadata": {
              "name": "kube-proxy-rc5gh",
              "generateName": "kube-proxy-",
              "namespace": "kube-system",
              "uid": "f355c0b8-d11e-40bd-87f0-6a0daaa19397",
              "resourceVersion": "6553",
              "creationTimestamp": "2023-02-14T08:15:24Z",
              "labels": {
                "controller-revision-hash": "697f886788",
                "k8s-app": "kube-proxy",
                "pod-template-generation": "1"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "DaemonSet",
                  "name": "kube-proxy",
                  "uid": "dc162977-356c-49f6-9541-2dfdc889b069",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:15:24Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:k8s-app":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"dc162977-356c-49f6-9541-2dfdc889b069\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{".":{},"f:nodeSelectorTerms":{}}}},"f:containers":{"k:{\"name\":\"kube-proxy\"}":{".":{},"f:command":{},"f:env":{".":{},"k:{\"name\":\"NODE_NAME\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}}},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:securityContext":{".":{},"f:privileged":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/lib/modules\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/run/xtables.lock\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/var/lib/kube-proxy\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostNetwork":{},"f:nodeSelector":{".":{},"f:kubernetes.io/os":{}},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"kube-proxy\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:name":{}},"f:name":{}},"k:{\"name\":\"lib-modules\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"xtables-lock\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:15:27Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.186.134.223\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "kube-proxy",
                  "configMap": {
                    "name": "kube-proxy",
                    "defaultMode": 420
                  }
                },
                {
                  "name": "xtables-lock",
                  "hostPath": {
                    "path": "/run/xtables.lock",
                    "type": "FileOrCreate"
                  }
                },
                {
                  "name": "lib-modules",
                  "hostPath": {
                    "path": "/lib/modules",
                    "type": ""
                  }
                },
                {
                  "name": "kube-api-access-tbfs4",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "kube-proxy",
                  "image": "k8s.gcr.io/kube-proxy:v1.21.14",
                  "command": [
                    "/usr/local/bin/kube-proxy",
                    "--config=/var/lib/kube-proxy/config.conf",
                    "--hostname-override=$(NODE_NAME)"
                  ],
                  "env": [
                    {
                      "name": "NODE_NAME",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "spec.nodeName"
                        }
                      }
                    }
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "kube-proxy",
                      "mountPath": "/var/lib/kube-proxy"
                    },
                    {
                      "name": "xtables-lock",
                      "mountPath": "/run/xtables.lock"
                    },
                    {
                      "name": "lib-modules",
                      "readOnly": true,
                      "mountPath": "/lib/modules"
                    },
                    {
                      "name": "kube-api-access-tbfs4",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "privileged": true
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "nodeSelector": {
                "kubernetes.io/os": "linux"
              },
              "serviceAccountName": "kube-proxy",
              "serviceAccount": "kube-proxy",
              "nodeName": "sc2-10-186-134-223.eng.vmware.com",
              "hostNetwork": true,
              "securityContext": {
                
              },
              "affinity": {
                "nodeAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": {
                    "nodeSelectorTerms": [
                      {
                        "matchFields": [
                          {
                            "key": "metadata.name",
                            "operator": "In",
                            "values": [
                              "sc2-10-186-134-223.eng.vmware.com"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "CriticalAddonsOnly",
                  "operator": "Exists"
                },
                {
                  "operator": "Exists"
                },
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/disk-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/memory-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/pid-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/unschedulable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/network-unavailable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                }
              ],
              "priorityClassName": "system-node-critical",
              "priority": 2000001000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:15:24Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:15:27Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:15:27Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:15:24Z"
                }
              ],
              "hostIP": "10.186.134.223",
              "podIP": "10.186.134.223",
              "podIPs": [
                {
                  "ip": "10.186.134.223"
                }
              ],
              "startTime": "2023-02-14T08:15:24Z",
              "containerStatuses": [
                {
                  "name": "kube-proxy",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T08:15:26Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "k8s.gcr.io/kube-proxy:v1.21.14",
                  "imageID": "docker-pullable://k8s.gcr.io/kube-proxy@sha256:650dc60fc75ecd78e0ac79e9296d405402e2032032bbd74ce8f61d241764486c",
                  "containerID": "docker://2371e392a0ec46ff187c8bccd983d4106db26d9a01c3e03fe0281f429bd4cb95",
                  "started": true
                }
              ],
              "qosClass": "BestEffort"
            }
          },
          {
            "metadata": {
              "name": "kube-proxy-w4c6w",
              "generateName": "kube-proxy-",
              "namespace": "kube-system",
              "uid": "7ae1b1df-50cd-47e5-b95e-7089dd233b51",
              "resourceVersion": "6682",
              "creationTimestamp": "2023-02-14T08:16:18Z",
              "labels": {
                "controller-revision-hash": "697f886788",
                "k8s-app": "kube-proxy",
                "pod-template-generation": "1"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "DaemonSet",
                  "name": "kube-proxy",
                  "uid": "dc162977-356c-49f6-9541-2dfdc889b069",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:16:18Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:k8s-app":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"dc162977-356c-49f6-9541-2dfdc889b069\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{".":{},"f:nodeSelectorTerms":{}}}},"f:containers":{"k:{\"name\":\"kube-proxy\"}":{".":{},"f:command":{},"f:env":{".":{},"k:{\"name\":\"NODE_NAME\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}}},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:securityContext":{".":{},"f:privileged":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/lib/modules\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/run/xtables.lock\"}":{".":{},"f:mountPath":{},"f:name":{}},"k:{\"mountPath\":\"/var/lib/kube-proxy\"}":{".":{},"f:mountPath":{},"f:name":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostNetwork":{},"f:nodeSelector":{".":{},"f:kubernetes.io/os":{}},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"kube-proxy\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:name":{}},"f:name":{}},"k:{\"name\":\"lib-modules\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"xtables-lock\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T08:16:21Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.186.131.84\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "kube-proxy",
                  "configMap": {
                    "name": "kube-proxy",
                    "defaultMode": 420
                  }
                },
                {
                  "name": "xtables-lock",
                  "hostPath": {
                    "path": "/run/xtables.lock",
                    "type": "FileOrCreate"
                  }
                },
                {
                  "name": "lib-modules",
                  "hostPath": {
                    "path": "/lib/modules",
                    "type": ""
                  }
                },
                {
                  "name": "kube-api-access-ksg5h",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "kube-proxy",
                  "image": "k8s.gcr.io/kube-proxy:v1.21.14",
                  "command": [
                    "/usr/local/bin/kube-proxy",
                    "--config=/var/lib/kube-proxy/config.conf",
                    "--hostname-override=$(NODE_NAME)"
                  ],
                  "env": [
                    {
                      "name": "NODE_NAME",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "spec.nodeName"
                        }
                      }
                    }
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "kube-proxy",
                      "mountPath": "/var/lib/kube-proxy"
                    },
                    {
                      "name": "xtables-lock",
                      "mountPath": "/run/xtables.lock"
                    },
                    {
                      "name": "lib-modules",
                      "readOnly": true,
                      "mountPath": "/lib/modules"
                    },
                    {
                      "name": "kube-api-access-ksg5h",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "privileged": true
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "nodeSelector": {
                "kubernetes.io/os": "linux"
              },
              "serviceAccountName": "kube-proxy",
              "serviceAccount": "kube-proxy",
              "nodeName": "sc2-10-186-131-84.eng.vmware.com",
              "hostNetwork": true,
              "securityContext": {
                
              },
              "affinity": {
                "nodeAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": {
                    "nodeSelectorTerms": [
                      {
                        "matchFields": [
                          {
                            "key": "metadata.name",
                            "operator": "In",
                            "values": [
                              "sc2-10-186-131-84.eng.vmware.com"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "CriticalAddonsOnly",
                  "operator": "Exists"
                },
                {
                  "operator": "Exists"
                },
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/disk-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/memory-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/pid-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/unschedulable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/network-unavailable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                }
              ],
              "priorityClassName": "system-node-critical",
              "priority": 2000001000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:16:18Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:16:21Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:16:21Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T08:16:18Z"
                }
              ],
              "hostIP": "10.186.131.84",
              "podIP": "10.186.131.84",
              "podIPs": [
                {
                  "ip": "10.186.131.84"
                }
              ],
              "startTime": "2023-02-14T08:16:18Z",
              "containerStatuses": [
                {
                  "name": "kube-proxy",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T08:16:20Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "k8s.gcr.io/kube-proxy:v1.21.14",
                  "imageID": "docker-pullable://k8s.gcr.io/kube-proxy@sha256:650dc60fc75ecd78e0ac79e9296d405402e2032032bbd74ce8f61d241764486c",
                  "containerID": "docker://426c4e50578fbabec4a7354380da07f744254b28fd84871c637169734aeab78d",
                  "started": true
                }
              ],
              "qosClass": "BestEffort"
            }
          },
          {
            "metadata": {
              "name": "kube-scheduler-sc2-10-186-142-227.eng.vmware.com",
              "namespace": "kube-system",
              "uid": "704f82a0-8c29-4c38-87ab-b696aa4e3b1a",
              "resourceVersion": "447",
              "creationTimestamp": "2023-02-14T06:54:19Z",
              "labels": {
                "component": "kube-scheduler",
                "tier": "control-plane"
              },
              "annotations": {
                "kubernetes.io/config.hash": "60c457ea1470e9b9796ff6ae66f4c8c3",
                "kubernetes.io/config.mirror": "60c457ea1470e9b9796ff6ae66f4c8c3",
                "kubernetes.io/config.seen": "2023-02-14T01:54:13.297821844-05:00",
                "kubernetes.io/config.source": "file"
              },
              "ownerReferences": [
                {
                  "apiVersion": "v1",
                  "kind": "Node",
                  "name": "sc2-10-186-142-227.eng.vmware.com",
                  "uid": "a3503260-2de8-4bfd-a145-2b76d4fa0e8b",
                  "controller": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T06:54:29Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{".":{},"f:kubernetes.io/config.hash":{},"f:kubernetes.io/config.mirror":{},"f:kubernetes.io/config.seen":{},"f:kubernetes.io/config.source":{}},"f:labels":{".":{},"f:component":{},"f:tier":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"a3503260-2de8-4bfd-a145-2b76d4fa0e8b\"}":{".":{},"f:apiVersion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:containers":{"k:{\"name\":\"kube-scheduler\"}":{".":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:livenessProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:host":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:name":{},"f:resources":{".":{},"f:requests":{".":{},"f:cpu":{}}},"f:startupProbe":{".":{},"f:failureThreshold":{},"f:httpGet":{".":{},"f:host":{},"f:path":{},"f:port":{},"f:scheme":{}},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:timeoutSeconds":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/kubernetes/scheduler.conf\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostNetwork":{},"f:nodeName":{},"f:priorityClassName":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"kubeconfig\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}},"f:status":{"f:conditions":{".":{},"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"PodScheduled\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.186.142.227\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "kubeconfig",
                  "hostPath": {
                    "path": "/etc/kubernetes/scheduler.conf",
                    "type": "FileOrCreate"
                  }
                }
              ],
              "containers": [
                {
                  "name": "kube-scheduler",
                  "image": "k8s.gcr.io/kube-scheduler:v1.21.14",
                  "command": [
                    "kube-scheduler",
                    "--authentication-kubeconfig=/etc/kubernetes/scheduler.conf",
                    "--authorization-kubeconfig=/etc/kubernetes/scheduler.conf",
                    "--bind-address=127.0.0.1",
                    "--kubeconfig=/etc/kubernetes/scheduler.conf",
                    "--leader-elect=true",
                    "--port=0"
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "100m"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "kubeconfig",
                      "readOnly": true,
                      "mountPath": "/etc/kubernetes/scheduler.conf"
                    }
                  ],
                  "livenessProbe": {
                    "httpGet": {
                      "path": "/healthz",
                      "port": 10259,
                      "host": "127.0.0.1",
                      "scheme": "HTTPS"
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 15,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 8
                  },
                  "startupProbe": {
                    "httpGet": {
                      "path": "/healthz",
                      "port": 10259,
                      "host": "127.0.0.1",
                      "scheme": "HTTPS"
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 15,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 24
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "nodeName": "sc2-10-186-142-227.eng.vmware.com",
              "hostNetwork": true,
              "securityContext": {
                
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "operator": "Exists",
                  "effect": "NoExecute"
                }
              ],
              "priorityClassName": "system-node-critical",
              "priority": 2000001000,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:19Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:29Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:29Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T06:54:19Z"
                }
              ],
              "hostIP": "10.186.142.227",
              "podIP": "10.186.142.227",
              "podIPs": [
                {
                  "ip": "10.186.142.227"
                }
              ],
              "startTime": "2023-02-14T06:54:19Z",
              "containerStatuses": [
                {
                  "name": "kube-scheduler",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T06:54:04Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "k8s.gcr.io/kube-scheduler:v1.21.14",
                  "imageID": "docker-pullable://k8s.gcr.io/kube-scheduler@sha256:67d226ce629ef439d8e1e1b401a6f828cc4558abd6d9e5e3717d188dc7ce4ba1",
                  "containerID": "docker://43d6375c90f946247512e49fa7613f2295a0776f98bc9c73087befc1b5e04184",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "inspectionpolicy-sample-kubebench-daemonset-7qjdg",
              "generateName": "inspectionpolicy-sample-kubebench-daemonset-",
              "namespace": "narrows",
              "uid": "ea2e36e1-e351-4f94-849a-cc04ed6c3f3a",
              "resourceVersion": "215067",
              "creationTimestamp": "2023-02-15T15:19:03Z",
              "labels": {
                "app": "kubebench",
                "controller-revision-hash": "566448597c",
                "pod-template-generation": "1"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "DaemonSet",
                  "name": "inspectionpolicy-sample-kubebench-daemonset",
                  "uid": "02c74008-50fa-49d2-a395-1e0ec3a1d612",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:19:03Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:controller-revision-hash":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"02c74008-50fa-49d2-a395-1e0ec3a1d612\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{".":{},"f:nodeSelectorTerms":{}}}},"f:containers":{"k:{\"name\":\"kubebench\"}":{".":{},"f:args":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/cni/net.d/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/kubernetes\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/systemd\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/lib/systemd/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/opt/cni/bin/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/srv/kubernetes/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/usr/local/mount-from-host/bin\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/etcd\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/kube-controller-manager\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/kube-scheduler\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/kubelet\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostPID":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{".":{},"f:fsGroupChangePolicy":{},"f:runAsUser":{}},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"0\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"1\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"10\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"2\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"3\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"4\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"5\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"6\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"7\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"8\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"9\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:19:10Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.7\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "0",
                  "hostPath": {
                    "path": "/var/lib/etcd",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "1",
                  "hostPath": {
                    "path": "/var/lib/kubelet",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "2",
                  "hostPath": {
                    "path": "/var/lib/kube-scheduler",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "3",
                  "hostPath": {
                    "path": "/var/lib/kube-controller-manager",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "4",
                  "hostPath": {
                    "path": "/etc/systemd",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "5",
                  "hostPath": {
                    "path": "/lib/systemd/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "6",
                  "hostPath": {
                    "path": "/srv/kubernetes/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "7",
                  "hostPath": {
                    "path": "/etc/kubernetes",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "8",
                  "hostPath": {
                    "path": "/usr/local/mount-from-host/bin",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "9",
                  "hostPath": {
                    "path": "/etc/cni/net.d/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "10",
                  "hostPath": {
                    "path": "/opt/cni/bin/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "kube-api-access-tg52n",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "kubebench",
                  "image": "projects.registry.vmware.com/cnsi/kubebench:0.3",
                  "command": [
                    "/kubebench"
                  ],
                  "args": [
                    "--policy",
                    "inspectionpolicy-sample"
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "0",
                      "readOnly": true,
                      "mountPath": "/var/lib/etcd"
                    },
                    {
                      "name": "1",
                      "readOnly": true,
                      "mountPath": "/var/lib/kubelet"
                    },
                    {
                      "name": "2",
                      "readOnly": true,
                      "mountPath": "/var/lib/kube-scheduler"
                    },
                    {
                      "name": "3",
                      "readOnly": true,
                      "mountPath": "/var/lib/kube-controller-manager"
                    },
                    {
                      "name": "4",
                      "readOnly": true,
                      "mountPath": "/etc/systemd"
                    },
                    {
                      "name": "5",
                      "readOnly": true,
                      "mountPath": "/lib/systemd/"
                    },
                    {
                      "name": "6",
                      "readOnly": true,
                      "mountPath": "/srv/kubernetes/"
                    },
                    {
                      "name": "7",
                      "readOnly": true,
                      "mountPath": "/etc/kubernetes"
                    },
                    {
                      "name": "8",
                      "readOnly": true,
                      "mountPath": "/usr/local/mount-from-host/bin"
                    },
                    {
                      "name": "9",
                      "readOnly": true,
                      "mountPath": "/etc/cni/net.d/"
                    },
                    {
                      "name": "10",
                      "readOnly": true,
                      "mountPath": "/opt/cni/bin/"
                    },
                    {
                      "name": "kube-api-access-tg52n",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "cnsi-inspector",
              "serviceAccount": "cnsi-inspector",
              "nodeName": "sc2-10-186-142-227.eng.vmware.com",
              "hostPID": true,
              "securityContext": {
                "runAsUser": 0,
                "fsGroupChangePolicy": "OnRootMismatch"
              },
              "affinity": {
                "nodeAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": {
                    "nodeSelectorTerms": [
                      {
                        "matchFields": [
                          {
                            "key": "metadata.name",
                            "operator": "In",
                            "values": [
                              "sc2-10-186-142-227.eng.vmware.com"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/disk-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/memory-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/pid-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/unschedulable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                }
              ],
              "priority": 0,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:03Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:10Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:10Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:03Z"
                }
              ],
              "hostIP": "10.186.142.227",
              "podIP": "10.244.0.7",
              "podIPs": [
                {
                  "ip": "10.244.0.7"
                }
              ],
              "startTime": "2023-02-15T15:19:03Z",
              "containerStatuses": [
                {
                  "name": "kubebench",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-15T15:19:10Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "projects.registry.vmware.com/cnsi/kubebench:0.3",
                  "imageID": "docker-pullable://projects.registry.vmware.com/cnsi/kubebench@sha256:dd54cb02aef2ac1475aeb6fdfc29bf704d2d2e7c7b0a438cbd89416f6dc2d257",
                  "containerID": "docker://5f790de4ac7d519c6aae07041f1812d45e49d8168d2c45f31df2f9c37ef34bde",
                  "started": true
                }
              ],
              "qosClass": "BestEffort"
            }
          },
          {
            "metadata": {
              "name": "inspectionpolicy-sample-kubebench-daemonset-s2dql",
              "generateName": "inspectionpolicy-sample-kubebench-daemonset-",
              "namespace": "narrows",
              "uid": "3ada8845-7e9c-4e50-9ab0-cfa8db542ca4",
              "resourceVersion": "215081",
              "creationTimestamp": "2023-02-15T15:19:03Z",
              "labels": {
                "app": "kubebench",
                "controller-revision-hash": "566448597c",
                "pod-template-generation": "1"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "DaemonSet",
                  "name": "inspectionpolicy-sample-kubebench-daemonset",
                  "uid": "02c74008-50fa-49d2-a395-1e0ec3a1d612",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:19:03Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:controller-revision-hash":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"02c74008-50fa-49d2-a395-1e0ec3a1d612\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{".":{},"f:nodeSelectorTerms":{}}}},"f:containers":{"k:{\"name\":\"kubebench\"}":{".":{},"f:args":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/cni/net.d/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/kubernetes\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/systemd\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/lib/systemd/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/opt/cni/bin/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/srv/kubernetes/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/usr/local/mount-from-host/bin\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/etcd\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/kube-controller-manager\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/kube-scheduler\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/kubelet\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostPID":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{".":{},"f:fsGroupChangePolicy":{},"f:runAsUser":{}},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"0\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"1\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"10\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"2\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"3\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"4\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"5\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"6\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"7\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"8\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"9\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:19:12Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.2.14\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "0",
                  "hostPath": {
                    "path": "/var/lib/etcd",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "1",
                  "hostPath": {
                    "path": "/var/lib/kubelet",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "2",
                  "hostPath": {
                    "path": "/var/lib/kube-scheduler",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "3",
                  "hostPath": {
                    "path": "/var/lib/kube-controller-manager",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "4",
                  "hostPath": {
                    "path": "/etc/systemd",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "5",
                  "hostPath": {
                    "path": "/lib/systemd/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "6",
                  "hostPath": {
                    "path": "/srv/kubernetes/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "7",
                  "hostPath": {
                    "path": "/etc/kubernetes",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "8",
                  "hostPath": {
                    "path": "/usr/local/mount-from-host/bin",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "9",
                  "hostPath": {
                    "path": "/etc/cni/net.d/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "10",
                  "hostPath": {
                    "path": "/opt/cni/bin/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "kube-api-access-nh66s",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "kubebench",
                  "image": "projects.registry.vmware.com/cnsi/kubebench:0.3",
                  "command": [
                    "/kubebench"
                  ],
                  "args": [
                    "--policy",
                    "inspectionpolicy-sample"
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "0",
                      "readOnly": true,
                      "mountPath": "/var/lib/etcd"
                    },
                    {
                      "name": "1",
                      "readOnly": true,
                      "mountPath": "/var/lib/kubelet"
                    },
                    {
                      "name": "2",
                      "readOnly": true,
                      "mountPath": "/var/lib/kube-scheduler"
                    },
                    {
                      "name": "3",
                      "readOnly": true,
                      "mountPath": "/var/lib/kube-controller-manager"
                    },
                    {
                      "name": "4",
                      "readOnly": true,
                      "mountPath": "/etc/systemd"
                    },
                    {
                      "name": "5",
                      "readOnly": true,
                      "mountPath": "/lib/systemd/"
                    },
                    {
                      "name": "6",
                      "readOnly": true,
                      "mountPath": "/srv/kubernetes/"
                    },
                    {
                      "name": "7",
                      "readOnly": true,
                      "mountPath": "/etc/kubernetes"
                    },
                    {
                      "name": "8",
                      "readOnly": true,
                      "mountPath": "/usr/local/mount-from-host/bin"
                    },
                    {
                      "name": "9",
                      "readOnly": true,
                      "mountPath": "/etc/cni/net.d/"
                    },
                    {
                      "name": "10",
                      "readOnly": true,
                      "mountPath": "/opt/cni/bin/"
                    },
                    {
                      "name": "kube-api-access-nh66s",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "cnsi-inspector",
              "serviceAccount": "cnsi-inspector",
              "nodeName": "sc2-10-186-131-84.eng.vmware.com",
              "hostPID": true,
              "securityContext": {
                "runAsUser": 0,
                "fsGroupChangePolicy": "OnRootMismatch"
              },
              "affinity": {
                "nodeAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": {
                    "nodeSelectorTerms": [
                      {
                        "matchFields": [
                          {
                            "key": "metadata.name",
                            "operator": "In",
                            "values": [
                              "sc2-10-186-131-84.eng.vmware.com"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/disk-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/memory-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/pid-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/unschedulable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                }
              ],
              "priority": 0,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:03Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:12Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:12Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:03Z"
                }
              ],
              "hostIP": "10.186.131.84",
              "podIP": "10.244.2.14",
              "podIPs": [
                {
                  "ip": "10.244.2.14"
                }
              ],
              "startTime": "2023-02-15T15:19:03Z",
              "containerStatuses": [
                {
                  "name": "kubebench",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-15T15:19:12Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "projects.registry.vmware.com/cnsi/kubebench:0.3",
                  "imageID": "docker-pullable://projects.registry.vmware.com/cnsi/kubebench@sha256:dd54cb02aef2ac1475aeb6fdfc29bf704d2d2e7c7b0a438cbd89416f6dc2d257",
                  "containerID": "docker://dc9b768918816459d6bc0c576a94a100da4b518902211959152a8e4767e33d8a",
                  "started": true
                }
              ],
              "qosClass": "BestEffort"
            }
          },
          {
            "metadata": {
              "name": "inspectionpolicy-sample-kubebench-daemonset-zb882",
              "generateName": "inspectionpolicy-sample-kubebench-daemonset-",
              "namespace": "narrows",
              "uid": "201a22c0-11ac-4e63-9aae-418302bf271f",
              "resourceVersion": "215074",
              "creationTimestamp": "2023-02-15T15:19:03Z",
              "labels": {
                "app": "kubebench",
                "controller-revision-hash": "566448597c",
                "pod-template-generation": "1"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "DaemonSet",
                  "name": "inspectionpolicy-sample-kubebench-daemonset",
                  "uid": "02c74008-50fa-49d2-a395-1e0ec3a1d612",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:19:03Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:controller-revision-hash":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"02c74008-50fa-49d2-a395-1e0ec3a1d612\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{".":{},"f:nodeSelectorTerms":{}}}},"f:containers":{"k:{\"name\":\"kubebench\"}":{".":{},"f:args":{},"f:command":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/etc/cni/net.d/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/kubernetes\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/etc/systemd\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/lib/systemd/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/opt/cni/bin/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/srv/kubernetes/\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/usr/local/mount-from-host/bin\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/etcd\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/kube-controller-manager\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/kube-scheduler\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}},"k:{\"mountPath\":\"/var/lib/kubelet\"}":{".":{},"f:mountPath":{},"f:name":{},"f:readOnly":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostPID":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{".":{},"f:fsGroupChangePolicy":{},"f:runAsUser":{}},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{},"f:volumes":{".":{},"k:{\"name\":\"0\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"1\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"10\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"2\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"3\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"4\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"5\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"6\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"7\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"8\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}},"k:{\"name\":\"9\"}":{".":{},"f:hostPath":{".":{},"f:path":{},"f:type":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:19:11Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.1.16\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "0",
                  "hostPath": {
                    "path": "/var/lib/etcd",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "1",
                  "hostPath": {
                    "path": "/var/lib/kubelet",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "2",
                  "hostPath": {
                    "path": "/var/lib/kube-scheduler",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "3",
                  "hostPath": {
                    "path": "/var/lib/kube-controller-manager",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "4",
                  "hostPath": {
                    "path": "/etc/systemd",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "5",
                  "hostPath": {
                    "path": "/lib/systemd/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "6",
                  "hostPath": {
                    "path": "/srv/kubernetes/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "7",
                  "hostPath": {
                    "path": "/etc/kubernetes",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "8",
                  "hostPath": {
                    "path": "/usr/local/mount-from-host/bin",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "9",
                  "hostPath": {
                    "path": "/etc/cni/net.d/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "10",
                  "hostPath": {
                    "path": "/opt/cni/bin/",
                    "type": "DirectoryOrCreate"
                  }
                },
                {
                  "name": "kube-api-access-2bxtc",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "kubebench",
                  "image": "projects.registry.vmware.com/cnsi/kubebench:0.3",
                  "command": [
                    "/kubebench"
                  ],
                  "args": [
                    "--policy",
                    "inspectionpolicy-sample"
                  ],
                  "resources": {
                    
                  },
                  "volumeMounts": [
                    {
                      "name": "0",
                      "readOnly": true,
                      "mountPath": "/var/lib/etcd"
                    },
                    {
                      "name": "1",
                      "readOnly": true,
                      "mountPath": "/var/lib/kubelet"
                    },
                    {
                      "name": "2",
                      "readOnly": true,
                      "mountPath": "/var/lib/kube-scheduler"
                    },
                    {
                      "name": "3",
                      "readOnly": true,
                      "mountPath": "/var/lib/kube-controller-manager"
                    },
                    {
                      "name": "4",
                      "readOnly": true,
                      "mountPath": "/etc/systemd"
                    },
                    {
                      "name": "5",
                      "readOnly": true,
                      "mountPath": "/lib/systemd/"
                    },
                    {
                      "name": "6",
                      "readOnly": true,
                      "mountPath": "/srv/kubernetes/"
                    },
                    {
                      "name": "7",
                      "readOnly": true,
                      "mountPath": "/etc/kubernetes"
                    },
                    {
                      "name": "8",
                      "readOnly": true,
                      "mountPath": "/usr/local/mount-from-host/bin"
                    },
                    {
                      "name": "9",
                      "readOnly": true,
                      "mountPath": "/etc/cni/net.d/"
                    },
                    {
                      "name": "10",
                      "readOnly": true,
                      "mountPath": "/opt/cni/bin/"
                    },
                    {
                      "name": "kube-api-access-2bxtc",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent"
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "cnsi-inspector",
              "serviceAccount": "cnsi-inspector",
              "nodeName": "sc2-10-186-134-223.eng.vmware.com",
              "hostPID": true,
              "securityContext": {
                "runAsUser": 0,
                "fsGroupChangePolicy": "OnRootMismatch"
              },
              "affinity": {
                "nodeAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": {
                    "nodeSelectorTerms": [
                      {
                        "matchFields": [
                          {
                            "key": "metadata.name",
                            "operator": "In",
                            "values": [
                              "sc2-10-186-134-223.eng.vmware.com"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute"
                },
                {
                  "key": "node.kubernetes.io/disk-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/memory-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/pid-pressure",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                },
                {
                  "key": "node.kubernetes.io/unschedulable",
                  "operator": "Exists",
                  "effect": "NoSchedule"
                }
              ],
              "priority": 0,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:03Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:11Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:11Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:19:03Z"
                }
              ],
              "hostIP": "10.186.134.223",
              "podIP": "10.244.1.16",
              "podIPs": [
                {
                  "ip": "10.244.1.16"
                }
              ],
              "startTime": "2023-02-15T15:19:03Z",
              "containerStatuses": [
                {
                  "name": "kubebench",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-15T15:19:11Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "projects.registry.vmware.com/cnsi/kubebench:0.3",
                  "imageID": "docker-pullable://projects.registry.vmware.com/cnsi/kubebench@sha256:dd54cb02aef2ac1475aeb6fdfc29bf704d2d2e7c7b0a438cbd89416f6dc2d257",
                  "containerID": "docker://9507d3929c8f9ea2f3fe0db115db64cfeb1ed18eb0c09e8cd8d7df0271b83b33",
                  "started": true
                }
              ],
              "qosClass": "BestEffort"
            }
          },
          {
            "metadata": {
              "name": "opensearch-cluster-master-0",
              "generateName": "opensearch-cluster-master-",
              "namespace": "opensearch",
              "uid": "9def5dc9-47b3-495a-b01a-51570be8af60",
              "resourceVersion": "214539",
              "creationTimestamp": "2023-02-15T15:14:21Z",
              "labels": {
                "app.kubernetes.io/component": "opensearch-cluster-master",
                "app.kubernetes.io/instance": "opensearch-deployment-for-narrows",
                "app.kubernetes.io/managed-by": "Helm",
                "app.kubernetes.io/name": "opensearch",
                "app.kubernetes.io/version": "2.4.0",
                "controller-revision-hash": "opensearch-cluster-master-f87bb7475",
                "helm.sh/chart": "opensearch-2.8.0",
                "statefulset.kubernetes.io/pod-name": "opensearch-cluster-master-0"
              },
              "annotations": {
                "configchecksum": "091e9f7988a397efbd14b199ff86ff25280476859d57e4f708f2e167ee069c3"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "StatefulSet",
                  "name": "opensearch-cluster-master",
                  "uid": "148efdd4-ee3e-46c8-91d8-3e0e9d931299",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:14:21Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{".":{},"f:configchecksum":{}},"f:generateName":{},"f:labels":{".":{},"f:app.kubernetes.io/component":{},"f:app.kubernetes.io/instance":{},"f:app.kubernetes.io/managed-by":{},"f:app.kubernetes.io/name":{},"f:app.kubernetes.io/version":{},"f:controller-revision-hash":{},"f:helm.sh/chart":{},"f:statefulset.kubernetes.io/pod-name":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"148efdd4-ee3e-46c8-91d8-3e0e9d931299\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:podAntiAffinity":{".":{},"f:preferredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"opensearch\"}":{".":{},"f:env":{".":{},"k:{\"name\":\"OPENSEARCH_JAVA_OPTS\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"cluster.initial_master_nodes\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"cluster.name\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"discovery.seed_hosts\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"network.host\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"node.name\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}},"k:{\"name\":\"node.roles\"}":{".":{},"f:name":{},"f:value":{}}},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9200,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}},"k:{\"containerPort\":9300,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}}},"f:readinessProbe":{".":{},"f:failureThreshold":{},"f:periodSeconds":{},"f:successThreshold":{},"f:tcpSocket":{".":{},"f:port":{}},"f:timeoutSeconds":{}},"f:resources":{".":{},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:securityContext":{".":{},"f:capabilities":{".":{},"f:drop":{}},"f:runAsNonRoot":{},"f:runAsUser":{}},"f:startupProbe":{".":{},"f:failureThreshold":{},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:tcpSocket":{".":{},"f:port":{}},"f:timeoutSeconds":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/usr/share/opensearch/config/opensearch.yml\"}":{".":{},"f:mountPath":{},"f:name":{},"f:subPath":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostname":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{".":{},"f:fsGroup":{},"f:runAsUser":{}},"f:subdomain":{},"f:terminationGracePeriodSeconds":{},"f:volumes":{".":{},"k:{\"name\":\"config\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:name":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:14:57Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.1.14\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "config",
                  "configMap": {
                    "name": "opensearch-cluster-master-config",
                    "defaultMode": 420
                  }
                },
                {
                  "name": "kube-api-access-gq2s4",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "opensearch",
                  "image": "opensearchproject/opensearch:2.4.0",
                  "ports": [
                    {
                      "name": "http",
                      "containerPort": 9200,
                      "protocol": "TCP"
                    },
                    {
                      "name": "transport",
                      "containerPort": 9300,
                      "protocol": "TCP"
                    }
                  ],
                  "env": [
                    {
                      "name": "node.name",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.name"
                        }
                      }
                    },
                    {
                      "name": "cluster.initial_master_nodes",
                      "value": "opensearch-cluster-master-0,opensearch-cluster-master-1,opensearch-cluster-master-2,"
                    },
                    {
                      "name": "discovery.seed_hosts",
                      "value": "opensearch-cluster-master-headless"
                    },
                    {
                      "name": "cluster.name",
                      "value": "opensearch-cluster"
                    },
                    {
                      "name": "network.host",
                      "value": "0.0.0.0"
                    },
                    {
                      "name": "OPENSEARCH_JAVA_OPTS",
                      "value": "-Xmx512M -Xms512M"
                    },
                    {
                      "name": "node.roles",
                      "value": "master,ingest,data,remote_cluster_client,"
                    }
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "1",
                      "memory": "100Mi"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "config",
                      "mountPath": "/usr/share/opensearch/config/opensearch.yml",
                      "subPath": "opensearch.yml"
                    },
                    {
                      "name": "kube-api-access-gq2s4",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "readinessProbe": {
                    "tcpSocket": {
                      "port": 9200
                    },
                    "timeoutSeconds": 3,
                    "periodSeconds": 5,
                    "successThreshold": 1,
                    "failureThreshold": 3
                  },
                  "startupProbe": {
                    "tcpSocket": {
                      "port": 9200
                    },
                    "initialDelaySeconds": 5,
                    "timeoutSeconds": 3,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 30
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "runAsUser": 1000,
                    "runAsNonRoot": true
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 120,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "default",
              "serviceAccount": "default",
              "nodeName": "sc2-10-186-134-223.eng.vmware.com",
              "securityContext": {
                "runAsUser": 1000,
                "fsGroup": 1000
              },
              "hostname": "opensearch-cluster-master-0",
              "subdomain": "opensearch-cluster-master-headless",
              "affinity": {
                "podAntiAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "weight": 1,
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchExpressions": [
                            {
                              "key": "app.kubernetes.io/instance",
                              "operator": "In",
                              "values": [
                                "opensearch-deployment-for-narrows"
                              ]
                            },
                            {
                              "key": "app.kubernetes.io/name",
                              "operator": "In",
                              "values": [
                                "opensearch"
                              ]
                            }
                          ]
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      }
                    }
                  ]
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                }
              ],
              "priority": 0,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:22Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:57Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:57Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:22Z"
                }
              ],
              "hostIP": "10.186.134.223",
              "podIP": "10.244.1.14",
              "podIPs": [
                {
                  "ip": "10.244.1.14"
                }
              ],
              "startTime": "2023-02-15T15:14:22Z",
              "containerStatuses": [
                {
                  "name": "opensearch",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-15T15:14:23Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "opensearchproject/opensearch:2.4.0",
                  "imageID": "docker-pullable://opensearchproject/opensearch@sha256:ffd7da5e9b8365ce49596f8bd66b782fe99321db57badb263c29a21ec4e4697c",
                  "containerID": "docker://83ca22ecc57017620b9d1197063c8cfd892023daedc9aeeb4c8f0541e3a4d9dd",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "opensearch-cluster-master-1",
              "generateName": "opensearch-cluster-master-",
              "namespace": "opensearch",
              "uid": "cf249d97-3a3e-4ed8-a568-0b27ba9b4441",
              "resourceVersion": "214538",
              "creationTimestamp": "2023-02-15T15:14:22Z",
              "labels": {
                "app.kubernetes.io/component": "opensearch-cluster-master",
                "app.kubernetes.io/instance": "opensearch-deployment-for-narrows",
                "app.kubernetes.io/managed-by": "Helm",
                "app.kubernetes.io/name": "opensearch",
                "app.kubernetes.io/version": "2.4.0",
                "controller-revision-hash": "opensearch-cluster-master-f87bb7475",
                "helm.sh/chart": "opensearch-2.8.0",
                "statefulset.kubernetes.io/pod-name": "opensearch-cluster-master-1"
              },
              "annotations": {
                "configchecksum": "091e9f7988a397efbd14b199ff86ff25280476859d57e4f708f2e167ee069c3"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "StatefulSet",
                  "name": "opensearch-cluster-master",
                  "uid": "148efdd4-ee3e-46c8-91d8-3e0e9d931299",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:14:22Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{".":{},"f:configchecksum":{}},"f:generateName":{},"f:labels":{".":{},"f:app.kubernetes.io/component":{},"f:app.kubernetes.io/instance":{},"f:app.kubernetes.io/managed-by":{},"f:app.kubernetes.io/name":{},"f:app.kubernetes.io/version":{},"f:controller-revision-hash":{},"f:helm.sh/chart":{},"f:statefulset.kubernetes.io/pod-name":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"148efdd4-ee3e-46c8-91d8-3e0e9d931299\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:podAntiAffinity":{".":{},"f:preferredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"opensearch\"}":{".":{},"f:env":{".":{},"k:{\"name\":\"OPENSEARCH_JAVA_OPTS\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"cluster.initial_master_nodes\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"cluster.name\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"discovery.seed_hosts\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"network.host\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"node.name\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}},"k:{\"name\":\"node.roles\"}":{".":{},"f:name":{},"f:value":{}}},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9200,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}},"k:{\"containerPort\":9300,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}}},"f:readinessProbe":{".":{},"f:failureThreshold":{},"f:periodSeconds":{},"f:successThreshold":{},"f:tcpSocket":{".":{},"f:port":{}},"f:timeoutSeconds":{}},"f:resources":{".":{},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:securityContext":{".":{},"f:capabilities":{".":{},"f:drop":{}},"f:runAsNonRoot":{},"f:runAsUser":{}},"f:startupProbe":{".":{},"f:failureThreshold":{},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:tcpSocket":{".":{},"f:port":{}},"f:timeoutSeconds":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/usr/share/opensearch/config/opensearch.yml\"}":{".":{},"f:mountPath":{},"f:name":{},"f:subPath":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostname":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{".":{},"f:fsGroup":{},"f:runAsUser":{}},"f:subdomain":{},"f:terminationGracePeriodSeconds":{},"f:volumes":{".":{},"k:{\"name\":\"config\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:name":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:14:57Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.2.12\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "config",
                  "configMap": {
                    "name": "opensearch-cluster-master-config",
                    "defaultMode": 420
                  }
                },
                {
                  "name": "kube-api-access-nll77",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "opensearch",
                  "image": "opensearchproject/opensearch:2.4.0",
                  "ports": [
                    {
                      "name": "http",
                      "containerPort": 9200,
                      "protocol": "TCP"
                    },
                    {
                      "name": "transport",
                      "containerPort": 9300,
                      "protocol": "TCP"
                    }
                  ],
                  "env": [
                    {
                      "name": "node.name",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.name"
                        }
                      }
                    },
                    {
                      "name": "cluster.initial_master_nodes",
                      "value": "opensearch-cluster-master-0,opensearch-cluster-master-1,opensearch-cluster-master-2,"
                    },
                    {
                      "name": "discovery.seed_hosts",
                      "value": "opensearch-cluster-master-headless"
                    },
                    {
                      "name": "cluster.name",
                      "value": "opensearch-cluster"
                    },
                    {
                      "name": "network.host",
                      "value": "0.0.0.0"
                    },
                    {
                      "name": "OPENSEARCH_JAVA_OPTS",
                      "value": "-Xmx512M -Xms512M"
                    },
                    {
                      "name": "node.roles",
                      "value": "master,ingest,data,remote_cluster_client,"
                    }
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "1",
                      "memory": "100Mi"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "config",
                      "mountPath": "/usr/share/opensearch/config/opensearch.yml",
                      "subPath": "opensearch.yml"
                    },
                    {
                      "name": "kube-api-access-nll77",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "readinessProbe": {
                    "tcpSocket": {
                      "port": 9200
                    },
                    "timeoutSeconds": 3,
                    "periodSeconds": 5,
                    "successThreshold": 1,
                    "failureThreshold": 3
                  },
                  "startupProbe": {
                    "tcpSocket": {
                      "port": 9200
                    },
                    "initialDelaySeconds": 5,
                    "timeoutSeconds": 3,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 30
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "runAsUser": 1000,
                    "runAsNonRoot": true
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 120,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "default",
              "serviceAccount": "default",
              "nodeName": "sc2-10-186-131-84.eng.vmware.com",
              "securityContext": {
                "runAsUser": 1000,
                "fsGroup": 1000
              },
              "hostname": "opensearch-cluster-master-1",
              "subdomain": "opensearch-cluster-master-headless",
              "affinity": {
                "podAntiAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "weight": 1,
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchExpressions": [
                            {
                              "key": "app.kubernetes.io/instance",
                              "operator": "In",
                              "values": [
                                "opensearch-deployment-for-narrows"
                              ]
                            },
                            {
                              "key": "app.kubernetes.io/name",
                              "operator": "In",
                              "values": [
                                "opensearch"
                              ]
                            }
                          ]
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      }
                    }
                  ]
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                }
              ],
              "priority": 0,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:22Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:57Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:57Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:22Z"
                }
              ],
              "hostIP": "10.186.131.84",
              "podIP": "10.244.2.12",
              "podIPs": [
                {
                  "ip": "10.244.2.12"
                }
              ],
              "startTime": "2023-02-15T15:14:22Z",
              "containerStatuses": [
                {
                  "name": "opensearch",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-15T15:14:23Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "opensearchproject/opensearch:2.4.0",
                  "imageID": "docker-pullable://opensearchproject/opensearch@sha256:ffd7da5e9b8365ce49596f8bd66b782fe99321db57badb263c29a21ec4e4697c",
                  "containerID": "docker://8ad6eb07b020a4e00e00a444ffa3b46396e18fa4da7c14ad47b5257f70d271b7",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "opensearch-cluster-master-2",
              "generateName": "opensearch-cluster-master-",
              "namespace": "opensearch",
              "uid": "142a4158-6705-46e0-a10d-dcef84908cd1",
              "resourceVersion": "214540",
              "creationTimestamp": "2023-02-15T15:14:22Z",
              "labels": {
                "app.kubernetes.io/component": "opensearch-cluster-master",
                "app.kubernetes.io/instance": "opensearch-deployment-for-narrows",
                "app.kubernetes.io/managed-by": "Helm",
                "app.kubernetes.io/name": "opensearch",
                "app.kubernetes.io/version": "2.4.0",
                "controller-revision-hash": "opensearch-cluster-master-f87bb7475",
                "helm.sh/chart": "opensearch-2.8.0",
                "statefulset.kubernetes.io/pod-name": "opensearch-cluster-master-2"
              },
              "annotations": {
                "configchecksum": "091e9f7988a397efbd14b199ff86ff25280476859d57e4f708f2e167ee069c3"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "StatefulSet",
                  "name": "opensearch-cluster-master",
                  "uid": "148efdd4-ee3e-46c8-91d8-3e0e9d931299",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:14:22Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:annotations":{".":{},"f:configchecksum":{}},"f:generateName":{},"f:labels":{".":{},"f:app.kubernetes.io/component":{},"f:app.kubernetes.io/instance":{},"f:app.kubernetes.io/managed-by":{},"f:app.kubernetes.io/name":{},"f:app.kubernetes.io/version":{},"f:controller-revision-hash":{},"f:helm.sh/chart":{},"f:statefulset.kubernetes.io/pod-name":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"148efdd4-ee3e-46c8-91d8-3e0e9d931299\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:affinity":{".":{},"f:podAntiAffinity":{".":{},"f:preferredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"opensearch\"}":{".":{},"f:env":{".":{},"k:{\"name\":\"OPENSEARCH_JAVA_OPTS\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"cluster.initial_master_nodes\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"cluster.name\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"discovery.seed_hosts\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"network.host\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"node.name\"}":{".":{},"f:name":{},"f:valueFrom":{".":{},"f:fieldRef":{".":{},"f:apiVersion":{},"f:fieldPath":{}}}},"k:{\"name\":\"node.roles\"}":{".":{},"f:name":{},"f:value":{}}},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9200,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}},"k:{\"containerPort\":9300,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}}},"f:readinessProbe":{".":{},"f:failureThreshold":{},"f:periodSeconds":{},"f:successThreshold":{},"f:tcpSocket":{".":{},"f:port":{}},"f:timeoutSeconds":{}},"f:resources":{".":{},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:securityContext":{".":{},"f:capabilities":{".":{},"f:drop":{}},"f:runAsNonRoot":{},"f:runAsUser":{}},"f:startupProbe":{".":{},"f:failureThreshold":{},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:tcpSocket":{".":{},"f:port":{}},"f:timeoutSeconds":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{},"f:volumeMounts":{".":{},"k:{\"mountPath\":\"/usr/share/opensearch/config/opensearch.yml\"}":{".":{},"f:mountPath":{},"f:name":{},"f:subPath":{}}}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:hostname":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{".":{},"f:fsGroup":{},"f:runAsUser":{}},"f:subdomain":{},"f:terminationGracePeriodSeconds":{},"f:volumes":{".":{},"k:{\"name\":\"config\"}":{".":{},"f:configMap":{".":{},"f:defaultMode":{},"f:name":{}},"f:name":{}}}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-15T15:14:57Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.0.6\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "config",
                  "configMap": {
                    "name": "opensearch-cluster-master-config",
                    "defaultMode": 420
                  }
                },
                {
                  "name": "kube-api-access-c7lsb",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "opensearch",
                  "image": "opensearchproject/opensearch:2.4.0",
                  "ports": [
                    {
                      "name": "http",
                      "containerPort": 9200,
                      "protocol": "TCP"
                    },
                    {
                      "name": "transport",
                      "containerPort": 9300,
                      "protocol": "TCP"
                    }
                  ],
                  "env": [
                    {
                      "name": "node.name",
                      "valueFrom": {
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.name"
                        }
                      }
                    },
                    {
                      "name": "cluster.initial_master_nodes",
                      "value": "opensearch-cluster-master-0,opensearch-cluster-master-1,opensearch-cluster-master-2,"
                    },
                    {
                      "name": "discovery.seed_hosts",
                      "value": "opensearch-cluster-master-headless"
                    },
                    {
                      "name": "cluster.name",
                      "value": "opensearch-cluster"
                    },
                    {
                      "name": "network.host",
                      "value": "0.0.0.0"
                    },
                    {
                      "name": "OPENSEARCH_JAVA_OPTS",
                      "value": "-Xmx512M -Xms512M"
                    },
                    {
                      "name": "node.roles",
                      "value": "master,ingest,data,remote_cluster_client,"
                    }
                  ],
                  "resources": {
                    "requests": {
                      "cpu": "1",
                      "memory": "100Mi"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "config",
                      "mountPath": "/usr/share/opensearch/config/opensearch.yml",
                      "subPath": "opensearch.yml"
                    },
                    {
                      "name": "kube-api-access-c7lsb",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "readinessProbe": {
                    "tcpSocket": {
                      "port": 9200
                    },
                    "timeoutSeconds": 3,
                    "periodSeconds": 5,
                    "successThreshold": 1,
                    "failureThreshold": 3
                  },
                  "startupProbe": {
                    "tcpSocket": {
                      "port": 9200
                    },
                    "initialDelaySeconds": 5,
                    "timeoutSeconds": 3,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 30
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "runAsUser": 1000,
                    "runAsNonRoot": true
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 120,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "default",
              "serviceAccount": "default",
              "nodeName": "sc2-10-186-142-227.eng.vmware.com",
              "securityContext": {
                "runAsUser": 1000,
                "fsGroup": 1000
              },
              "hostname": "opensearch-cluster-master-2",
              "subdomain": "opensearch-cluster-master-headless",
              "affinity": {
                "podAntiAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "weight": 1,
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchExpressions": [
                            {
                              "key": "app.kubernetes.io/instance",
                              "operator": "In",
                              "values": [
                                "opensearch-deployment-for-narrows"
                              ]
                            },
                            {
                              "key": "app.kubernetes.io/name",
                              "operator": "In",
                              "values": [
                                "opensearch"
                              ]
                            }
                          ]
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      }
                    }
                  ]
                }
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                }
              ],
              "priority": 0,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:22Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:57Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:57Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-15T15:14:22Z"
                }
              ],
              "hostIP": "10.186.142.227",
              "podIP": "10.244.0.6",
              "podIPs": [
                {
                  "ip": "10.244.0.6"
                }
              ],
              "startTime": "2023-02-15T15:14:22Z",
              "containerStatuses": [
                {
                  "name": "opensearch",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-15T15:14:23Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "opensearchproject/opensearch:2.4.0",
                  "imageID": "docker-pullable://opensearchproject/opensearch@sha256:ffd7da5e9b8365ce49596f8bd66b782fe99321db57badb263c29a21ec4e4697c",
                  "containerID": "docker://1f3bfd505998c607de05860da26bc8d875134f900d5b04d9e85bc46d5dcdf52c",
                  "started": true
                }
              ],
              "qosClass": "Burstable"
            }
          },
          {
            "metadata": {
              "name": "opensearch-dashboard-opensearch-dashboards-5c46bb568f-htqdm",
              "generateName": "opensearch-dashboard-opensearch-dashboards-5c46bb568f-",
              "namespace": "opensearch",
              "uid": "bee77ba7-05d5-4a53-808b-ade070668dfa",
              "resourceVersion": "26874",
              "creationTimestamp": "2023-02-14T11:45:05Z",
              "labels": {
                "app": "opensearch-dashboards",
                "pod-template-hash": "5c46bb568f",
                "release": "opensearch-dashboard"
              },
              "ownerReferences": [
                {
                  "apiVersion": "apps/v1",
                  "kind": "ReplicaSet",
                  "name": "opensearch-dashboard-opensearch-dashboards-5c46bb568f",
                  "uid": "147c7eb0-db99-4a5e-9a8d-2a9b8e4536f4",
                  "controller": true,
                  "blockOwnerDeletion": true
                }
              ],
              "managedFields": [
                {
                  "manager": "kube-controller-manager",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T11:45:05Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:app":{},"f:pod-template-hash":{},"f:release":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"147c7eb0-db99-4a5e-9a8d-2a9b8e4536f4\"}":{".":{},"f:apiVersion":{},"f:blockOwnerDeletion":{},"f:controller":{},"f:kind":{},"f:name":{},"f:uid":{}}}},"f:spec":{"f:containers":{"k:{\"name\":\"dashboards\"}":{".":{},"f:env":{".":{},"k:{\"name\":\"OPENSEARCH_HOSTS\"}":{".":{},"f:name":{},"f:value":{}},"k:{\"name\":\"SERVER_HOST\"}":{".":{},"f:name":{},"f:value":{}}},"f:image":{},"f:imagePullPolicy":{},"f:livenessProbe":{".":{},"f:failureThreshold":{},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:tcpSocket":{".":{},"f:port":{}},"f:timeoutSeconds":{}},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":5601,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:name":{},"f:protocol":{}}},"f:readinessProbe":{".":{},"f:failureThreshold":{},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:tcpSocket":{".":{},"f:port":{}},"f:timeoutSeconds":{}},"f:resources":{".":{},"f:limits":{".":{},"f:cpu":{},"f:memory":{}},"f:requests":{".":{},"f:cpu":{},"f:memory":{}}},"f:securityContext":{".":{},"f:capabilities":{".":{},"f:drop":{}},"f:runAsNonRoot":{},"f:runAsUser":{}},"f:startupProbe":{".":{},"f:failureThreshold":{},"f:initialDelaySeconds":{},"f:periodSeconds":{},"f:successThreshold":{},"f:tcpSocket":{".":{},"f:port":{}},"f:timeoutSeconds":{}},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:serviceAccount":{},"f:serviceAccountName":{},"f:terminationGracePeriodSeconds":{}}}
                },
                {
                  "manager": "kubelet",
                  "operation": "Update",
                  "apiVersion": "v1",
                  "time": "2023-02-14T11:48:05Z",
                  "fieldsType": "FieldsV1",
                  "fieldsV1": {"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.244.2.9\"}":{".":{},"f:ip":{}}},"f:startTime":{}}}
                }
              ]
            },
            "spec": {
              "volumes": [
                {
                  "name": "kube-api-access-hvc9t",
                  "projected": {
                    "sources": [
                      {
                        "serviceAccountToken": {
                          "expirationSeconds": 3607,
                          "path": "token"
                        }
                      },
                      {
                        "configMap": {
                          "name": "kube-root-ca.crt",
                          "items": [
                            {
                              "key": "ca.crt",
                              "path": "ca.crt"
                            }
                          ]
                        }
                      },
                      {
                        "downwardAPI": {
                          "items": [
                            {
                              "path": "namespace",
                              "fieldRef": {
                                "apiVersion": "v1",
                                "fieldPath": "metadata.namespace"
                              }
                            }
                          ]
                        }
                      }
                    ],
                    "defaultMode": 420
                  }
                }
              ],
              "containers": [
                {
                  "name": "dashboards",
                  "image": "opensearchproject/opensearch-dashboards:2.5.0",
                  "ports": [
                    {
                      "name": "http",
                      "containerPort": 5601,
                      "protocol": "TCP"
                    }
                  ],
                  "env": [
                    {
                      "name": "OPENSEARCH_HOSTS",
                      "value": "https://opensearch-cluster-master:9200"
                    },
                    {
                      "name": "SERVER_HOST",
                      "value": "0.0.0.0"
                    }
                  ],
                  "resources": {
                    "limits": {
                      "cpu": "100m",
                      "memory": "512M"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "512M"
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "kube-api-access-hvc9t",
                      "readOnly": true,
                      "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                    }
                  ],
                  "livenessProbe": {
                    "tcpSocket": {
                      "port": 5601
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 5,
                    "periodSeconds": 20,
                    "successThreshold": 1,
                    "failureThreshold": 10
                  },
                  "readinessProbe": {
                    "tcpSocket": {
                      "port": 5601
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 5,
                    "periodSeconds": 20,
                    "successThreshold": 1,
                    "failureThreshold": 10
                  },
                  "startupProbe": {
                    "tcpSocket": {
                      "port": 5601
                    },
                    "initialDelaySeconds": 10,
                    "timeoutSeconds": 5,
                    "periodSeconds": 10,
                    "successThreshold": 1,
                    "failureThreshold": 20
                  },
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File",
                  "imagePullPolicy": "IfNotPresent",
                  "securityContext": {
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "runAsUser": 1000,
                    "runAsNonRoot": true
                  }
                }
              ],
              "restartPolicy": "Always",
              "terminationGracePeriodSeconds": 30,
              "dnsPolicy": "ClusterFirst",
              "serviceAccountName": "opensearch-dashboard-opensearch-dashboards-dashboards",
              "serviceAccount": "opensearch-dashboard-opensearch-dashboards-dashboards",
              "nodeName": "sc2-10-186-131-84.eng.vmware.com",
              "securityContext": {
                
              },
              "schedulerName": "default-scheduler",
              "tolerations": [
                {
                  "key": "node.kubernetes.io/not-ready",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                },
                {
                  "key": "node.kubernetes.io/unreachable",
                  "operator": "Exists",
                  "effect": "NoExecute",
                  "tolerationSeconds": 300
                }
              ],
              "priority": 0,
              "enableServiceLinks": true,
              "preemptionPolicy": "PreemptLowerPriority"
            },
            "status": {
              "phase": "Running",
              "conditions": [
                {
                  "type": "Initialized",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T11:45:05Z"
                },
                {
                  "type": "Ready",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T11:48:05Z"
                },
                {
                  "type": "ContainersReady",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T11:48:05Z"
                },
                {
                  "type": "PodScheduled",
                  "status": "True",
                  "lastProbeTime": null,
                  "lastTransitionTime": "2023-02-14T11:45:05Z"
                }
              ],
              "hostIP": "10.186.131.84",
              "podIP": "10.244.2.9",
              "podIPs": [
                {
                  "ip": "10.244.2.9"
                }
              ],
              "startTime": "2023-02-14T11:45:05Z",
              "containerStatuses": [
                {
                  "name": "dashboards",
                  "state": {
                    "running": {
                      "startedAt": "2023-02-14T11:46:01Z"
                    }
                  },
                  "lastState": {
                    
                  },
                  "ready": true,
                  "restartCount": 0,
                  "image": "opensearchproject/opensearch-dashboards:2.5.0",
                  "imageID": "docker-pullable://opensearchproject/opensearch-dashboards@sha256:1b5f0b2b9692a26c43a70f5c9a1587f22fc10c86c9a3aa964dd6e726fba6f15d",
                  "containerID": "docker://59f1b1421288c2f5f82f292e87244e056ea025538e0ddb766f35b2cedb706673",
                  "started": true
                }
              ],
              "qosClass": "Guaranteed"
            }
          }
        ]
      })
    },
    getKubeBenchReport() {
      return of({"took":52,"timed_out":false,"_shards":{"total":1,"successful":1,"skipped":0,"failed":0},"hits":{"total":{"value":2,"relation":"eq"},"max_score":null,"hits":[{"_index":"cis_report","_id":"kubebench-Report_2023-02-15T15:19:14Z_4q7dm","_score":null,"_source":{"id":"4","version":"cis-1.20","detected_version":"1.21","text":"Worker Node Security Configuration","node_type":"node","tests":[{"section":"4.1","type":"","pass":10,"fail":0,"warn":0,"info":0,"desc":"Worker Node Configuration Files","results":[{"test_number":"4.1.1","test_desc":"Ensure that the kubelet service file permissions are set to 644 or more restrictive (Automated)","audit":"/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c permissions=%a /lib/systemd/system/kubelet.service; fi' ","AuditEnv":"","AuditConfig":"","type":"","remediation":"Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n","test_info":["Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n"],"status":"PASS","actual_value":"permissions=644","scored":true,"IsMultiple":false,"expected_result":"permissions has permissions 644, expected 644 or more restrictive"},{"test_number":"4.1.2","test_desc":"Ensure that the kubelet service file ownership is set to root:root (Automated)","audit":"/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c %U:%G /lib/systemd/system/kubelet.service; fi' ","AuditEnv":"","AuditConfig":"","type":"","remediation":"Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n","test_info":["Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n"],"status":"PASS","actual_value":"root:root","scored":true,"IsMultiple":false,"expected_result":"'root:root' is present"},{"test_number":"4.1.3","test_desc":"If proxy kubeconfig file exists ensure permissions are set to 644 or more restrictive (Manual)","audit":"/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c permissions=%a /etc/kubernetes/proxy.conf; fi' ","AuditEnv":"","AuditConfig":"","type":"","remediation":"Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n","test_info":["Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n"],"status":"PASS","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"'permissions' is present OR '/etc/kubernetes/proxy.conf' is not present"},{"test_number":"4.1.4","test_desc":"If proxy kubeconfig file exists ensure ownership is set to root:root (Manual)","audit":"/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c %U:%G /etc/kubernetes/proxy.conf; fi' ","AuditEnv":"","AuditConfig":"","type":"","remediation":"Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n","test_info":["Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n"],"status":"PASS","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"'root:root' is present OR '/etc/kubernetes/proxy.conf' is not present"},{"test_number":"4.1.5","test_desc":"Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive (Automated)","audit":"/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c permissions=%a /etc/kubernetes/kubelet.conf; fi' ","AuditEnv":"","AuditConfig":"","type":"","remediation":"Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n","test_info":["Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n"],"status":"PASS","actual_value":"permissions=600","scored":true,"IsMultiple":false,"expected_result":"permissions has permissions 600, expected 644 or more restrictive"},{"test_number":"4.1.6","test_desc":"Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)","audit":"/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c %U:%G /etc/kubernetes/kubelet.conf; fi' ","AuditEnv":"","AuditConfig":"","type":"","remediation":"Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n","test_info":["Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n"],"status":"PASS","actual_value":"root:root","scored":true,"IsMultiple":false,"expected_result":"'root:root' is present"},{"test_number":"4.1.7","test_desc":"Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Manual)","audit":"CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi\n","AuditEnv":"","AuditConfig":"","type":"","remediation":"Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n","test_info":["Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n"],"status":"PASS","actual_value":"permissions=644","scored":false,"IsMultiple":false,"expected_result":"permissions has permissions 644, expected 644 or more restrictive"},{"test_number":"4.1.8","test_desc":"Ensure that the client certificate authorities file ownership is set to root:root (Manual)","audit":"CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c %U:%G $CAFILE; fi\n","AuditEnv":"","AuditConfig":"","type":"","remediation":"Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n","test_info":["Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n"],"status":"PASS","actual_value":"root:root","scored":false,"IsMultiple":false,"expected_result":"'root:root' is equal to 'root:root'"},{"test_number":"4.1.9","test_desc":"Ensure that the kubelet --config configuration file has permissions set to 644 or more restrictive (Automated)","audit":"/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c permissions=%a /var/lib/kubelet/config.yaml; fi' ","AuditEnv":"","AuditConfig":"","type":"","remediation":"Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n","test_info":["Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n"],"status":"PASS","actual_value":"permissions=644","scored":true,"IsMultiple":false,"expected_result":"permissions has permissions 644, expected 644 or more restrictive"},{"test_number":"4.1.10","test_desc":"Ensure that the kubelet --config configuration file ownership is set to root:root (Automated)","audit":"/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c %U:%G /var/lib/kubelet/config.yaml; fi' ","AuditEnv":"","AuditConfig":"","type":"","remediation":"Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n","test_info":["Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n"],"status":"PASS","actual_value":"root:root","scored":true,"IsMultiple":false,"expected_result":"'root:root' is present"}]},{"section":"4.2","type":"","pass":9,"fail":1,"warn":3,"info":0,"desc":"Kubelet","results":[{"test_number":"4.2.1","test_desc":"Ensure that the anonymous-auth argument is set to false (Automated)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"PASS","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":true,"IsMultiple":false,"expected_result":"'{.authentication.anonymous.enabled}' is equal to 'false'"},{"test_number":"4.2.2","test_desc":"Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"PASS","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":true,"IsMultiple":false,"expected_result":"'{.authorization.mode}' does not have 'AlwaysAllow'"},{"test_number":"4.2.3","test_desc":"Ensure that the --client-ca-file argument is set as appropriate (Automated)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"PASS","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":true,"IsMultiple":false,"expected_result":"'{.authentication.x509.clientCAFile}' is present"},{"test_number":"4.2.4","test_desc":"Ensure that the --read-only-port argument is set to 0 (Manual)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"PASS","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":false,"IsMultiple":false,"expected_result":"'{.readOnlyPort}' is present OR '{.readOnlyPort}' is not present"},{"test_number":"4.2.5","test_desc":"Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"PASS","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":false,"IsMultiple":false,"expected_result":"'{.streamingConnectionIdleTimeout}' is not equal to '0' OR '{.streamingConnectionIdleTimeout}' is not present"},{"test_number":"4.2.6","test_desc":"Ensure that the --protect-kernel-defaults argument is set to true (Automated)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"FAIL","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":true,"IsMultiple":false,"expected_result":"'{.protectKernelDefaults}' is present"},{"test_number":"4.2.7","test_desc":"Ensure that the --make-iptables-util-chains argument is set to true (Automated)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"PASS","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":true,"IsMultiple":false,"expected_result":"'{.makeIPTablesUtilChains}' is present OR '{.makeIPTablesUtilChains}' is not present"},{"test_number":"4.2.8","test_desc":"Ensure that the --hostname-override argument is not set (Manual)","audit":"/bin/ps -fC kubelet ","AuditEnv":"","AuditConfig":"","type":"","remediation":"Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"PASS","actual_value":"UID        PID  PPID  C STIME TTY          TIME CMD\nroot     16510     1  4 Feb14 ?        01:25:22 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.4.1","scored":false,"IsMultiple":false,"expected_result":"'--hostname-override' is not present"},{"test_number":"4.2.9","test_desc":"Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Manual)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"WARN","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":false,"IsMultiple":false,"expected_result":"'{.eventRecordQPS}' is present"},{"test_number":"4.2.10","test_desc":"Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"WARN","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":false,"IsMultiple":false,"expected_result":"'{.tlsCertFile}' is present AND '{.tlsPrivateKeyFile}' is present"},{"test_number":"4.2.11","test_desc":"Ensure that the --rotate-certificates argument is not set to false (Automated)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"PASS","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":true,"IsMultiple":false,"expected_result":"'{.rotateCertificates}' is equal to 'true' OR '{.rotateCertificates}' is not present"},{"test_number":"4.2.12","test_desc":"Verify that the RotateKubeletServerCertificate argument is set to true (Manual)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"PASS","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":false,"IsMultiple":false,"expected_result":"'{.featureGates.RotateKubeletServerCertificate}' is present OR '{.featureGates.RotateKubeletServerCertificate}' is not present"},{"test_number":"4.2.13","test_desc":"Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)","audit":"/bin/ps -fC kubelet","AuditEnv":"","AuditConfig":"/bin/cat /var/lib/kubelet/config.yaml","type":"","remediation":"If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n","test_info":["If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"],"status":"WARN","actual_value":"apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s","scored":false,"IsMultiple":false,"expected_result":"'{range .tlsCipherSuites[:]}{}{','}{end}' is present"}]}],"total_pass":19,"total_fail":1,"total_warn":3,"total_info":0,"createTime":"2023-02-15T15:19:14Z","node_name":"inspectionpolicy-sample-kubebench-daemonset-s2dql"},"sort":[1676474354000]},{"_index":"cis_report","_id":"kubebench-Report_2023-02-15T15:19:14Z_5tnbd","_score":null,"_source":{"id":"5","version":"cis-1.20","detected_version":"1.21","text":"Kubernetes Policies","node_type":"policies","tests":[{"section":"5.1","type":"","pass":0,"fail":0,"warn":8,"info":0,"desc":"RBAC and Service Accounts","results":[{"test_number":"5.1.1","test_desc":"Ensure that the cluster-admin role is only used where required (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n","test_info":["Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.1.2","test_desc":"Minimize access to secrets (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Where possible, remove get, list and watch access to secret objects in the cluster.\n","test_info":["Where possible, remove get, list and watch access to secret objects in the cluster.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.1.3","test_desc":"Minimize wildcard use in Roles and ClusterRoles (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n","test_info":["Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.1.4","test_desc":"Minimize access to create pods (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Where possible, remove create access to pod objects in the cluster.\n","test_info":["Where possible, remove create access to pod objects in the cluster.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.1.5","test_desc":"Ensure that default service accounts are not actively used. (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n","test_info":["Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.1.6","test_desc":"Ensure that Service Account Tokens are only mounted where necessary (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n","test_info":["Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.1.7","test_desc":"Avoid use of system:masters group (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Remove the system:masters group from all users in the cluster.\n","test_info":["Remove the system:masters group from all users in the cluster.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.1.8","test_desc":"Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Where possible, remove the impersonate, bind and escalate rights from subjects.\n","test_info":["Where possible, remove the impersonate, bind and escalate rights from subjects.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"}]},{"section":"5.2","type":"","pass":0,"fail":0,"warn":9,"info":0,"desc":"Pod Security Policies","results":[{"test_number":"5.2.1","test_desc":"Minimize the admission of privileged containers (Automated)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n","test_info":["Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.2.2","test_desc":"Minimize the admission of containers wishing to share the host process ID namespace (Automated)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n","test_info":["Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.2.3","test_desc":"Minimize the admission of containers wishing to share the host IPC namespace (Automated)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n","test_info":["Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.2.4","test_desc":"Minimize the admission of containers wishing to share the host network namespace (Automated)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n","test_info":["Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.2.5","test_desc":"Minimize the admission of containers with allowPrivilegeEscalation (Automated)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n","test_info":["Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.2.6","test_desc":"Minimize the admission of root containers (Automated)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n","test_info":["Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.2.7","test_desc":"Minimize the admission of containers with the NET_RAW capability (Automated)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n","test_info":["Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.2.8","test_desc":"Minimize the admission of containers with added capabilities (Automated)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n","test_info":["Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.2.9","test_desc":"Minimize the admission of containers with capabilities assigned (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n","test_info":["Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"}]},{"section":"5.3","type":"","pass":0,"fail":0,"warn":2,"info":0,"desc":"Network Policies and CNI","results":[{"test_number":"5.3.1","test_desc":"Ensure that the CNI in use supports Network Policies (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n","test_info":["If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.3.2","test_desc":"Ensure that all Namespaces have Network Policies defined (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Follow the documentation and create NetworkPolicy objects as you need them.\n","test_info":["Follow the documentation and create NetworkPolicy objects as you need them.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"}]},{"section":"5.4","type":"","pass":0,"fail":0,"warn":2,"info":0,"desc":"Secrets Management","results":[{"test_number":"5.4.1","test_desc":"Prefer using secrets as files over secrets as environment variables (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n","test_info":["if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.4.2","test_desc":"Consider external secret storage (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n","test_info":["Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"}]},{"section":"5.5","type":"","pass":0,"fail":0,"warn":1,"info":0,"desc":"Extensible Admission Control","results":[{"test_number":"5.5.1","test_desc":"Configure Image Provenance using ImagePolicyWebhook admission controller (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Follow the Kubernetes documentation and setup image provenance.\n","test_info":["Follow the Kubernetes documentation and setup image provenance.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"}]},{"section":"5.7","type":"","pass":0,"fail":0,"warn":4,"info":0,"desc":"General Policies","results":[{"test_number":"5.7.1","test_desc":"Create administrative boundaries between resources using namespaces (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n","test_info":["Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.7.2","test_desc":"Ensure that the seccomp profile is set to docker/default in your pod definitions (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n","test_info":["Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.7.3","test_desc":"Apply Security Context to Your Pods and Containers (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n","test_info":["Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"},{"test_number":"5.7.4","test_desc":"The default namespace should not be used (Manual)","audit":"","AuditEnv":"","AuditConfig":"","type":"manual","remediation":"Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n","test_info":["Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n"],"status":"WARN","actual_value":"","scored":false,"IsMultiple":false,"expected_result":"","reason":"Test marked as a manual test"}]}],"total_pass":0,"total_fail":0,"total_warn":26,"total_info":0,"createTime":"2023-02-15T15:19:14Z","node_name":"inspectionpolicy-sample-kubebench-daemonset-s2dql"},"sort":[1676474354000]}]}})
    }
    
  }
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [ KubeBenchReportListComponent ],
      imports: [ShardTestModule],
      providers: [AssessmentService, PolicyService, ShardService, ],
      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA]
    })
    .compileComponents();

    fixture = TestBed.createComponent(KubeBenchReportListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(KubeBenchReportListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
    policyService = TestBed.inject(PolicyService);
    shardService = TestBed.inject(ShardService);
    assessmentService = TestBed.inject(AssessmentService);
    localStorage.setItem('cnsi-open-search', 'dTc0OVZRRjdoRXFEVFoyeTE2MVI5SjhGeyJ1cmwiOiJodHRwczovL29wZW5zZWFyY2gtY2x1c3Rlci1tYXN0ZXIub3BlbnNlYXJjaDo5MjAwIiwidXNlciI6ImFkbWluIiwicHN3ZCI6ImFkbWluIn0=')
    localStorage.setItem('cnsi-elastic-search', 'dTc0OVZRRjdoRXFEVFoyeTE2MVI5SjhGeyJ1cmwiOiJodHRwczovL29wZW5zZWFyY2gtY2x1c3Rlci1tYXN0ZXIub3BlbnNlYXJjaDo5MjAwIiwidXNlciI6ImFkbWluIiwicHN3ZCI6ImFkbWluIn0=')
  });

  describe('functions ', () => {

    it('get all data', fakeAsync(() => {
      spyOn(policyService, 'getInspectionpolicies').and.returnValue(
        cnsiServiceStub.getInspectionpolicies()
      );

      spyOn(shardService, 'getNodeList').and.returnValue(
        cnsiServiceStub.getNodeList()
      );

      spyOn(shardService, 'getPodList').and.returnValue(
        cnsiServiceStub.getPodList()
      );

      spyOn(assessmentService, 'getKubeBenchReport').and.returnValue(
        cnsiServiceStub.getKubeBenchReport()
      );
      
      fixture.detectChanges();
      // expect(policyService.getInspectionpolicies).toHaveBeenCalled();

      component.getNodeList();
      component.getPodList();
      component.getInspectionpolicies()
      tick(1500);
      expect(policyService.getInspectionpolicies);
      expect(shardService.getNodeList)
      expect(shardService.getPodList)

    }));

    it('get null data', fakeAsync(() => {
      cnsiServiceStub.getInspectionpolicies = () => of({items:[]})

      spyOn(policyService, 'getInspectionpolicies').and.returnValue(
        cnsiServiceStub.getInspectionpolicies()
      );
      fixture.detectChanges();
      component.getInspectionpolicies()
      tick(1500);
      expect(policyService.getInspectionpolicies);

    }));

    it('init', () => {
      component.init()
    });

    it('init', () => {
      localStorage.removeItem('cnsi-open-search')
      component.init()
    });


    it('other', () => {
      component.opensearchInfo = {
        "url": "https://opensearch-cluster-master.opensearch:9200",
        "user": "admin",
        "pswd": "admin"
      };
      component.pagination = {
        page: {
          size: 10
        }
      }
      component.getKubeBenchReportListQuery = {
        "size": 10,
        "from": 0,
        "sort": [
            {
                "createTime": {
                    "order": "desc"
                }
            }
        ],
        "query": {
            "match": {
                "text": "Worker Node Security Configuration"
            }
        }
      }
      component.getKubeBenchReportListFilter = {
        "value": "Worker Node Security Configuration",
        "key": "text",
        "reset": true
      }
      component.switchNode('sc2-10-186-131-84.eng.vmware.com"');
      component.pageChange({
        "page": {
            "from": 0,
            "to": 1,
            "size": 20,
            "current": 1
          }
      });
      component.toKubeBenchReportTests({
        "_index": "cis_report",
        "_id": "kubebench-Report_2023-02-15T15:19:14Z_4q7dm",
        "_score": null,
        "_source": {
            "id": "4",
            "version": "cis-1.20",
            "detected_version": "1.21",
            "text": "Worker Node Security Configuration",
            "node_type": "node",
            "tests": [
                {
                    "section": "4.1",
                    "type": "",
                    "pass": 10,
                    "fail": 0,
                    "warn": 0,
                    "info": 0,
                    "desc": "Worker Node Configuration Files",
                    "results": [
                        {
                            "test_number": "4.1.1",
                            "test_desc": "Ensure that the kubelet service file permissions are set to 644 or more restrictive (Automated)",
                            "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c permissions=%a /lib/systemd/system/kubelet.service; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n",
                            "test_info": [
                                "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "permissions=644",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                        },
                        {
                            "test_number": "4.1.2",
                            "test_desc": "Ensure that the kubelet service file ownership is set to root:root (Automated)",
                            "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c %U:%G /lib/systemd/system/kubelet.service; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n",
                            "test_info": [
                                "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "root:root",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'root:root' is present"
                        },
                        {
                            "test_number": "4.1.3",
                            "test_desc": "If proxy kubeconfig file exists ensure permissions are set to 644 or more restrictive (Manual)",
                            "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c permissions=%a /etc/kubernetes/proxy.conf; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n",
                            "test_info": [
                                "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n"
                            ],
                            "status": "PASS",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'permissions' is present OR '/etc/kubernetes/proxy.conf' is not present"
                        },
                        {
                            "test_number": "4.1.4",
                            "test_desc": "If proxy kubeconfig file exists ensure ownership is set to root:root (Manual)",
                            "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c %U:%G /etc/kubernetes/proxy.conf; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n",
                            "test_info": [
                                "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n"
                            ],
                            "status": "PASS",
                            "actual_value": "",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'root:root' is present OR '/etc/kubernetes/proxy.conf' is not present"
                        },
                        {
                            "test_number": "4.1.5",
                            "test_desc": "Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive (Automated)",
                            "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c permissions=%a /etc/kubernetes/kubelet.conf; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n",
                            "test_info": [
                                "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n"
                            ],
                            "status": "PASS",
                            "actual_value": "permissions=600",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                        },
                        {
                            "test_number": "4.1.6",
                            "test_desc": "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)",
                            "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c %U:%G /etc/kubernetes/kubelet.conf; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n",
                            "test_info": [
                                "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n"
                            ],
                            "status": "PASS",
                            "actual_value": "root:root",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'root:root' is present"
                        },
                        {
                            "test_number": "4.1.7",
                            "test_desc": "Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Manual)",
                            "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi\n",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n",
                            "test_info": [
                                "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n"
                            ],
                            "status": "PASS",
                            "actual_value": "permissions=644",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                        },
                        {
                            "test_number": "4.1.8",
                            "test_desc": "Ensure that the client certificate authorities file ownership is set to root:root (Manual)",
                            "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c %U:%G $CAFILE; fi\n",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n",
                            "test_info": [
                                "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n"
                            ],
                            "status": "PASS",
                            "actual_value": "root:root",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'root:root' is equal to 'root:root'"
                        },
                        {
                            "test_number": "4.1.9",
                            "test_desc": "Ensure that the kubelet --config configuration file has permissions set to 644 or more restrictive (Automated)",
                            "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c permissions=%a /var/lib/kubelet/config.yaml; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n",
                            "test_info": [
                                "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n"
                            ],
                            "status": "PASS",
                            "actual_value": "permissions=644",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                        },
                        {
                            "test_number": "4.1.10",
                            "test_desc": "Ensure that the kubelet --config configuration file ownership is set to root:root (Automated)",
                            "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c %U:%G /var/lib/kubelet/config.yaml; fi' ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n",
                            "test_info": [
                                "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n"
                            ],
                            "status": "PASS",
                            "actual_value": "root:root",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'root:root' is present"
                        }
                    ]
                },
                {
                    "section": "4.2",
                    "type": "",
                    "pass": 9,
                    "fail": 1,
                    "warn": 3,
                    "info": 0,
                    "desc": "Kubelet",
                    "results": [
                        {
                            "test_number": "4.2.1",
                            "test_desc": "Ensure that the anonymous-auth argument is set to false (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.authentication.anonymous.enabled}' is equal to 'false'"
                        },
                        {
                            "test_number": "4.2.2",
                            "test_desc": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.authorization.mode}' does not have 'AlwaysAllow'"
                        },
                        {
                            "test_number": "4.2.3",
                            "test_desc": "Ensure that the --client-ca-file argument is set as appropriate (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.authentication.x509.clientCAFile}' is present"
                        },
                        {
                            "test_number": "4.2.4",
                            "test_desc": "Ensure that the --read-only-port argument is set to 0 (Manual)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{.readOnlyPort}' is present OR '{.readOnlyPort}' is not present"
                        },
                        {
                            "test_number": "4.2.5",
                            "test_desc": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{.streamingConnectionIdleTimeout}' is not equal to '0' OR '{.streamingConnectionIdleTimeout}' is not present"
                        },
                        {
                            "test_number": "4.2.6",
                            "test_desc": "Ensure that the --protect-kernel-defaults argument is set to true (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "FAIL",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.protectKernelDefaults}' is present"
                        },
                        {
                            "test_number": "4.2.7",
                            "test_desc": "Ensure that the --make-iptables-util-chains argument is set to true (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.makeIPTablesUtilChains}' is present OR '{.makeIPTablesUtilChains}' is not present"
                        },
                        {
                            "test_number": "4.2.8",
                            "test_desc": "Ensure that the --hostname-override argument is not set (Manual)",
                            "audit": "/bin/ps -fC kubelet ",
                            "AuditEnv": "",
                            "AuditConfig": "",
                            "type": "",
                            "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "UID        PID  PPID  C STIME TTY          TIME CMD\nroot     16510     1  4 Feb14 ?        01:25:22 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.4.1",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'--hostname-override' is not present"
                        },
                        {
                            "test_number": "4.2.9",
                            "test_desc": "Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Manual)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "WARN",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{.eventRecordQPS}' is present"
                        },
                        {
                            "test_number": "4.2.10",
                            "test_desc": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "WARN",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{.tlsCertFile}' is present AND '{.tlsPrivateKeyFile}' is present"
                        },
                        {
                            "test_number": "4.2.11",
                            "test_desc": "Ensure that the --rotate-certificates argument is not set to false (Automated)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": true,
                            "IsMultiple": false,
                            "expected_result": "'{.rotateCertificates}' is equal to 'true' OR '{.rotateCertificates}' is not present"
                        },
                        {
                            "test_number": "4.2.12",
                            "test_desc": "Verify that the RotateKubeletServerCertificate argument is set to true (Manual)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "PASS",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{.featureGates.RotateKubeletServerCertificate}' is present OR '{.featureGates.RotateKubeletServerCertificate}' is not present"
                        },
                        {
                            "test_number": "4.2.13",
                            "test_desc": "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)",
                            "audit": "/bin/ps -fC kubelet",
                            "AuditEnv": "",
                            "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                            "type": "",
                            "remediation": "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                            "test_info": [
                                "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                            ],
                            "status": "WARN",
                            "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                            "scored": false,
                            "IsMultiple": false,
                            "expected_result": "'{range .tlsCipherSuites[:]}{}{','}{end}' is present"
                        }
                    ]
                }
            ],
            "total_pass": 19,
            "total_fail": 1,
            "total_warn": 3,
            "total_info": 0,
            "createTime": "2023-02-15T15:19:14Z",
            "node_name": "inspectionpolicy-sample-kubebench-daemonset-s2dql"
        },
        "sort": [
            1676474354000
        ]
      })
      component.createTimeSort()
      component.createTimeSortCallBack({
          "took": 28,
          "timed_out": false,
          "_shards": {
              "total": 1,
              "successful": 1,
              "skipped": 0,
              "failed": 0
          },
          "hits": {
              "total": {
                  "value": 9,
                  "relation": "eq"
              },
              "max_score": 1,
              "hits": [
                  {
                      "_index": "cis_report",
                      "_id": "kubebench-Report_2023-02-15T15:19:14Z_tqb5d",
                      "_score": 1,
                      "_source": {
                          "id": "4",
                          "version": "cis-1.20",
                          "detected_version": "1.21",
                          "text": "Worker Node Security Configuration",
                          "node_type": "node",
                          "tests": [
                              {
                                  "section": "4.1",
                                  "type": "",
                                  "pass": 10,
                                  "fail": 0,
                                  "warn": 0,
                                  "info": 0,
                                  "desc": "Worker Node Configuration Files",
                                  "results": [
                                      {
                                          "test_number": "4.1.1",
                                          "test_desc": "Ensure that the kubelet service file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c permissions=%a /lib/systemd/system/kubelet.service; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=644",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.2",
                                          "test_desc": "Ensure that the kubelet service file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c %U:%G /lib/systemd/system/kubelet.service; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "4.1.3",
                                          "test_desc": "If proxy kubeconfig file exists ensure permissions are set to 644 or more restrictive (Manual)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c permissions=%a /etc/kubernetes/proxy.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'permissions' is present OR '/etc/kubernetes/proxy.conf' is not present"
                                      },
                                      {
                                          "test_number": "4.1.4",
                                          "test_desc": "If proxy kubeconfig file exists ensure ownership is set to root:root (Manual)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c %U:%G /etc/kubernetes/proxy.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present OR '/etc/kubernetes/proxy.conf' is not present"
                                      },
                                      {
                                          "test_number": "4.1.5",
                                          "test_desc": "Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c permissions=%a /etc/kubernetes/kubelet.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.6",
                                          "test_desc": "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c %U:%G /etc/kubernetes/kubelet.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "4.1.7",
                                          "test_desc": "Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Manual)",
                                          "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi\n",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n",
                                          "test_info": [
                                              "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=644",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.8",
                                          "test_desc": "Ensure that the client certificate authorities file ownership is set to root:root (Manual)",
                                          "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c %U:%G $CAFILE; fi\n",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n",
                                          "test_info": [
                                              "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is equal to 'root:root'"
                                      },
                                      {
                                          "test_number": "4.1.9",
                                          "test_desc": "Ensure that the kubelet --config configuration file has permissions set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c permissions=%a /var/lib/kubelet/config.yaml; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n",
                                          "test_info": [
                                              "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=644",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.10",
                                          "test_desc": "Ensure that the kubelet --config configuration file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c %U:%G /var/lib/kubelet/config.yaml; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n",
                                          "test_info": [
                                              "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      }
                                  ]
                              },
                              {
                                  "section": "4.2",
                                  "type": "",
                                  "pass": 9,
                                  "fail": 1,
                                  "warn": 3,
                                  "info": 0,
                                  "desc": "Kubelet",
                                  "results": [
                                      {
                                          "test_number": "4.2.1",
                                          "test_desc": "Ensure that the anonymous-auth argument is set to false (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.authentication.anonymous.enabled}' is equal to 'false'"
                                      },
                                      {
                                          "test_number": "4.2.2",
                                          "test_desc": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.authorization.mode}' does not have 'AlwaysAllow'"
                                      },
                                      {
                                          "test_number": "4.2.3",
                                          "test_desc": "Ensure that the --client-ca-file argument is set as appropriate (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.authentication.x509.clientCAFile}' is present"
                                      },
                                      {
                                          "test_number": "4.2.4",
                                          "test_desc": "Ensure that the --read-only-port argument is set to 0 (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.readOnlyPort}' is present OR '{.readOnlyPort}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.5",
                                          "test_desc": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.streamingConnectionIdleTimeout}' is not equal to '0' OR '{.streamingConnectionIdleTimeout}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.6",
                                          "test_desc": "Ensure that the --protect-kernel-defaults argument is set to true (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.protectKernelDefaults}' is present"
                                      },
                                      {
                                          "test_number": "4.2.7",
                                          "test_desc": "Ensure that the --make-iptables-util-chains argument is set to true (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.makeIPTablesUtilChains}' is present OR '{.makeIPTablesUtilChains}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.8",
                                          "test_desc": "Ensure that the --hostname-override argument is not set (Manual)",
                                          "audit": "/bin/ps -fC kubelet ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "UID        PID  PPID  C STIME TTY          TIME CMD\nroot     16565     1  4 Feb14 ?        01:21:51 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.4.1",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--hostname-override' is not present"
                                      },
                                      {
                                          "test_number": "4.2.9",
                                          "test_desc": "Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.eventRecordQPS}' is present"
                                      },
                                      {
                                          "test_number": "4.2.10",
                                          "test_desc": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.tlsCertFile}' is present AND '{.tlsPrivateKeyFile}' is present"
                                      },
                                      {
                                          "test_number": "4.2.11",
                                          "test_desc": "Ensure that the --rotate-certificates argument is not set to false (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.rotateCertificates}' is equal to 'true' OR '{.rotateCertificates}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.12",
                                          "test_desc": "Verify that the RotateKubeletServerCertificate argument is set to true (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.featureGates.RotateKubeletServerCertificate}' is present OR '{.featureGates.RotateKubeletServerCertificate}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.13",
                                          "test_desc": "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{range .tlsCipherSuites[:]}{}{','}{end}' is present"
                                      }
                                  ]
                              }
                          ],
                          "total_pass": 19,
                          "total_fail": 1,
                          "total_warn": 3,
                          "total_info": 0,
                          "createTime": "2023-02-15T15:19:14Z",
                          "node_name": "inspectionpolicy-sample-kubebench-daemonset-zb882"
                      }
                  },
                  {
                      "_index": "cis_report",
                      "_id": "kubebench-Report_2023-02-15T15:19:14Z_4q7dm",
                      "_score": 1,
                      "_source": {
                          "id": "4",
                          "version": "cis-1.20",
                          "detected_version": "1.21",
                          "text": "Worker Node Security Configuration",
                          "node_type": "node",
                          "tests": [
                              {
                                  "section": "4.1",
                                  "type": "",
                                  "pass": 10,
                                  "fail": 0,
                                  "warn": 0,
                                  "info": 0,
                                  "desc": "Worker Node Configuration Files",
                                  "results": [
                                      {
                                          "test_number": "4.1.1",
                                          "test_desc": "Ensure that the kubelet service file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c permissions=%a /lib/systemd/system/kubelet.service; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=644",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.2",
                                          "test_desc": "Ensure that the kubelet service file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c %U:%G /lib/systemd/system/kubelet.service; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "4.1.3",
                                          "test_desc": "If proxy kubeconfig file exists ensure permissions are set to 644 or more restrictive (Manual)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c permissions=%a /etc/kubernetes/proxy.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'permissions' is present OR '/etc/kubernetes/proxy.conf' is not present"
                                      },
                                      {
                                          "test_number": "4.1.4",
                                          "test_desc": "If proxy kubeconfig file exists ensure ownership is set to root:root (Manual)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c %U:%G /etc/kubernetes/proxy.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present OR '/etc/kubernetes/proxy.conf' is not present"
                                      },
                                      {
                                          "test_number": "4.1.5",
                                          "test_desc": "Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c permissions=%a /etc/kubernetes/kubelet.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.6",
                                          "test_desc": "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c %U:%G /etc/kubernetes/kubelet.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "4.1.7",
                                          "test_desc": "Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Manual)",
                                          "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi\n",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n",
                                          "test_info": [
                                              "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=644",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.8",
                                          "test_desc": "Ensure that the client certificate authorities file ownership is set to root:root (Manual)",
                                          "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c %U:%G $CAFILE; fi\n",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n",
                                          "test_info": [
                                              "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is equal to 'root:root'"
                                      },
                                      {
                                          "test_number": "4.1.9",
                                          "test_desc": "Ensure that the kubelet --config configuration file has permissions set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c permissions=%a /var/lib/kubelet/config.yaml; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n",
                                          "test_info": [
                                              "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=644",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.10",
                                          "test_desc": "Ensure that the kubelet --config configuration file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c %U:%G /var/lib/kubelet/config.yaml; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n",
                                          "test_info": [
                                              "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      }
                                  ]
                              },
                              {
                                  "section": "4.2",
                                  "type": "",
                                  "pass": 9,
                                  "fail": 1,
                                  "warn": 3,
                                  "info": 0,
                                  "desc": "Kubelet",
                                  "results": [
                                      {
                                          "test_number": "4.2.1",
                                          "test_desc": "Ensure that the anonymous-auth argument is set to false (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.authentication.anonymous.enabled}' is equal to 'false'"
                                      },
                                      {
                                          "test_number": "4.2.2",
                                          "test_desc": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.authorization.mode}' does not have 'AlwaysAllow'"
                                      },
                                      {
                                          "test_number": "4.2.3",
                                          "test_desc": "Ensure that the --client-ca-file argument is set as appropriate (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.authentication.x509.clientCAFile}' is present"
                                      },
                                      {
                                          "test_number": "4.2.4",
                                          "test_desc": "Ensure that the --read-only-port argument is set to 0 (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.readOnlyPort}' is present OR '{.readOnlyPort}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.5",
                                          "test_desc": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.streamingConnectionIdleTimeout}' is not equal to '0' OR '{.streamingConnectionIdleTimeout}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.6",
                                          "test_desc": "Ensure that the --protect-kernel-defaults argument is set to true (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.protectKernelDefaults}' is present"
                                      },
                                      {
                                          "test_number": "4.2.7",
                                          "test_desc": "Ensure that the --make-iptables-util-chains argument is set to true (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.makeIPTablesUtilChains}' is present OR '{.makeIPTablesUtilChains}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.8",
                                          "test_desc": "Ensure that the --hostname-override argument is not set (Manual)",
                                          "audit": "/bin/ps -fC kubelet ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "UID        PID  PPID  C STIME TTY          TIME CMD\nroot     16510     1  4 Feb14 ?        01:25:22 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.4.1",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--hostname-override' is not present"
                                      },
                                      {
                                          "test_number": "4.2.9",
                                          "test_desc": "Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.eventRecordQPS}' is present"
                                      },
                                      {
                                          "test_number": "4.2.10",
                                          "test_desc": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.tlsCertFile}' is present AND '{.tlsPrivateKeyFile}' is present"
                                      },
                                      {
                                          "test_number": "4.2.11",
                                          "test_desc": "Ensure that the --rotate-certificates argument is not set to false (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.rotateCertificates}' is equal to 'true' OR '{.rotateCertificates}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.12",
                                          "test_desc": "Verify that the RotateKubeletServerCertificate argument is set to true (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.featureGates.RotateKubeletServerCertificate}' is present OR '{.featureGates.RotateKubeletServerCertificate}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.13",
                                          "test_desc": "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{range .tlsCipherSuites[:]}{}{','}{end}' is present"
                                      }
                                  ]
                              }
                          ],
                          "total_pass": 19,
                          "total_fail": 1,
                          "total_warn": 3,
                          "total_info": 0,
                          "createTime": "2023-02-15T15:19:14Z",
                          "node_name": "inspectionpolicy-sample-kubebench-daemonset-s2dql"
                      }
                  },
                  {
                      "_index": "cis_report",
                      "_id": "kubebench-Report_2023-02-15T15:19:14Z_lzhwz",
                      "_score": 1,
                      "_source": {
                          "id": "5",
                          "version": "cis-1.20",
                          "detected_version": "1.21",
                          "text": "Kubernetes Policies",
                          "node_type": "policies",
                          "tests": [
                              {
                                  "section": "5.1",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 8,
                                  "info": 0,
                                  "desc": "RBAC and Service Accounts",
                                  "results": [
                                      {
                                          "test_number": "5.1.1",
                                          "test_desc": "Ensure that the cluster-admin role is only used where required (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n",
                                          "test_info": [
                                              "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.2",
                                          "test_desc": "Minimize access to secrets (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible, remove get, list and watch access to secret objects in the cluster.\n",
                                          "test_info": [
                                              "Where possible, remove get, list and watch access to secret objects in the cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.3",
                                          "test_desc": "Minimize wildcard use in Roles and ClusterRoles (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n",
                                          "test_info": [
                                              "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.4",
                                          "test_desc": "Minimize access to create pods (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible, remove create access to pod objects in the cluster.\n",
                                          "test_info": [
                                              "Where possible, remove create access to pod objects in the cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.5",
                                          "test_desc": "Ensure that default service accounts are not actively used. (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n",
                                          "test_info": [
                                              "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.6",
                                          "test_desc": "Ensure that Service Account Tokens are only mounted where necessary (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n",
                                          "test_info": [
                                              "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.7",
                                          "test_desc": "Avoid use of system:masters group (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Remove the system:masters group from all users in the cluster.\n",
                                          "test_info": [
                                              "Remove the system:masters group from all users in the cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.8",
                                          "test_desc": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible, remove the impersonate, bind and escalate rights from subjects.\n",
                                          "test_info": [
                                              "Where possible, remove the impersonate, bind and escalate rights from subjects.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.2",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 9,
                                  "info": 0,
                                  "desc": "Pod Security Policies",
                                  "results": [
                                      {
                                          "test_number": "5.2.1",
                                          "test_desc": "Minimize the admission of privileged containers (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.2",
                                          "test_desc": "Minimize the admission of containers wishing to share the host process ID namespace (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.3",
                                          "test_desc": "Minimize the admission of containers wishing to share the host IPC namespace (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.4",
                                          "test_desc": "Minimize the admission of containers wishing to share the host network namespace (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.5",
                                          "test_desc": "Minimize the admission of containers with allowPrivilegeEscalation (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.6",
                                          "test_desc": "Minimize the admission of root containers (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.7",
                                          "test_desc": "Minimize the admission of containers with the NET_RAW capability (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.8",
                                          "test_desc": "Minimize the admission of containers with added capabilities (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n",
                                          "test_info": [
                                              "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.9",
                                          "test_desc": "Minimize the admission of containers with capabilities assigned (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n",
                                          "test_info": [
                                              "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.3",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 2,
                                  "info": 0,
                                  "desc": "Network Policies and CNI",
                                  "results": [
                                      {
                                          "test_number": "5.3.1",
                                          "test_desc": "Ensure that the CNI in use supports Network Policies (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n",
                                          "test_info": [
                                              "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.3.2",
                                          "test_desc": "Ensure that all Namespaces have Network Policies defined (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the documentation and create NetworkPolicy objects as you need them.\n",
                                          "test_info": [
                                              "Follow the documentation and create NetworkPolicy objects as you need them.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.4",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 2,
                                  "info": 0,
                                  "desc": "Secrets Management",
                                  "results": [
                                      {
                                          "test_number": "5.4.1",
                                          "test_desc": "Prefer using secrets as files over secrets as environment variables (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n",
                                          "test_info": [
                                              "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.4.2",
                                          "test_desc": "Consider external secret storage (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n",
                                          "test_info": [
                                              "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.5",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 1,
                                  "info": 0,
                                  "desc": "Extensible Admission Control",
                                  "results": [
                                      {
                                          "test_number": "5.5.1",
                                          "test_desc": "Configure Image Provenance using ImagePolicyWebhook admission controller (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the Kubernetes documentation and setup image provenance.\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and setup image provenance.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.7",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 4,
                                  "info": 0,
                                  "desc": "General Policies",
                                  "results": [
                                      {
                                          "test_number": "5.7.1",
                                          "test_desc": "Create administrative boundaries between resources using namespaces (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n",
                                          "test_info": [
                                              "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.7.2",
                                          "test_desc": "Ensure that the seccomp profile is set to docker/default in your pod definitions (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n",
                                          "test_info": [
                                              "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.7.3",
                                          "test_desc": "Apply Security Context to Your Pods and Containers (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.7.4",
                                          "test_desc": "The default namespace should not be used (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n",
                                          "test_info": [
                                              "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              }
                          ],
                          "total_pass": 0,
                          "total_fail": 0,
                          "total_warn": 26,
                          "total_info": 0,
                          "createTime": "2023-02-15T15:19:14Z",
                          "node_name": "inspectionpolicy-sample-kubebench-daemonset-zb882"
                      }
                  },
                  {
                      "_index": "cis_report",
                      "_id": "kubebench-Report_2023-02-15T15:19:14Z_5tnbd",
                      "_score": 1,
                      "_source": {
                          "id": "5",
                          "version": "cis-1.20",
                          "detected_version": "1.21",
                          "text": "Kubernetes Policies",
                          "node_type": "policies",
                          "tests": [
                              {
                                  "section": "5.1",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 8,
                                  "info": 0,
                                  "desc": "RBAC and Service Accounts",
                                  "results": [
                                      {
                                          "test_number": "5.1.1",
                                          "test_desc": "Ensure that the cluster-admin role is only used where required (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n",
                                          "test_info": [
                                              "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.2",
                                          "test_desc": "Minimize access to secrets (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible, remove get, list and watch access to secret objects in the cluster.\n",
                                          "test_info": [
                                              "Where possible, remove get, list and watch access to secret objects in the cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.3",
                                          "test_desc": "Minimize wildcard use in Roles and ClusterRoles (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n",
                                          "test_info": [
                                              "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.4",
                                          "test_desc": "Minimize access to create pods (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible, remove create access to pod objects in the cluster.\n",
                                          "test_info": [
                                              "Where possible, remove create access to pod objects in the cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.5",
                                          "test_desc": "Ensure that default service accounts are not actively used. (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n",
                                          "test_info": [
                                              "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.6",
                                          "test_desc": "Ensure that Service Account Tokens are only mounted where necessary (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n",
                                          "test_info": [
                                              "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.7",
                                          "test_desc": "Avoid use of system:masters group (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Remove the system:masters group from all users in the cluster.\n",
                                          "test_info": [
                                              "Remove the system:masters group from all users in the cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.8",
                                          "test_desc": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible, remove the impersonate, bind and escalate rights from subjects.\n",
                                          "test_info": [
                                              "Where possible, remove the impersonate, bind and escalate rights from subjects.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.2",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 9,
                                  "info": 0,
                                  "desc": "Pod Security Policies",
                                  "results": [
                                      {
                                          "test_number": "5.2.1",
                                          "test_desc": "Minimize the admission of privileged containers (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.2",
                                          "test_desc": "Minimize the admission of containers wishing to share the host process ID namespace (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.3",
                                          "test_desc": "Minimize the admission of containers wishing to share the host IPC namespace (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.4",
                                          "test_desc": "Minimize the admission of containers wishing to share the host network namespace (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.5",
                                          "test_desc": "Minimize the admission of containers with allowPrivilegeEscalation (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.6",
                                          "test_desc": "Minimize the admission of root containers (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.7",
                                          "test_desc": "Minimize the admission of containers with the NET_RAW capability (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.8",
                                          "test_desc": "Minimize the admission of containers with added capabilities (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n",
                                          "test_info": [
                                              "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.9",
                                          "test_desc": "Minimize the admission of containers with capabilities assigned (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n",
                                          "test_info": [
                                              "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.3",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 2,
                                  "info": 0,
                                  "desc": "Network Policies and CNI",
                                  "results": [
                                      {
                                          "test_number": "5.3.1",
                                          "test_desc": "Ensure that the CNI in use supports Network Policies (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n",
                                          "test_info": [
                                              "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.3.2",
                                          "test_desc": "Ensure that all Namespaces have Network Policies defined (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the documentation and create NetworkPolicy objects as you need them.\n",
                                          "test_info": [
                                              "Follow the documentation and create NetworkPolicy objects as you need them.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.4",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 2,
                                  "info": 0,
                                  "desc": "Secrets Management",
                                  "results": [
                                      {
                                          "test_number": "5.4.1",
                                          "test_desc": "Prefer using secrets as files over secrets as environment variables (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n",
                                          "test_info": [
                                              "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.4.2",
                                          "test_desc": "Consider external secret storage (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n",
                                          "test_info": [
                                              "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.5",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 1,
                                  "info": 0,
                                  "desc": "Extensible Admission Control",
                                  "results": [
                                      {
                                          "test_number": "5.5.1",
                                          "test_desc": "Configure Image Provenance using ImagePolicyWebhook admission controller (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the Kubernetes documentation and setup image provenance.\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and setup image provenance.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.7",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 4,
                                  "info": 0,
                                  "desc": "General Policies",
                                  "results": [
                                      {
                                          "test_number": "5.7.1",
                                          "test_desc": "Create administrative boundaries between resources using namespaces (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n",
                                          "test_info": [
                                              "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.7.2",
                                          "test_desc": "Ensure that the seccomp profile is set to docker/default in your pod definitions (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n",
                                          "test_info": [
                                              "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.7.3",
                                          "test_desc": "Apply Security Context to Your Pods and Containers (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.7.4",
                                          "test_desc": "The default namespace should not be used (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n",
                                          "test_info": [
                                              "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              }
                          ],
                          "total_pass": 0,
                          "total_fail": 0,
                          "total_warn": 26,
                          "total_info": 0,
                          "createTime": "2023-02-15T15:19:14Z",
                          "node_name": "inspectionpolicy-sample-kubebench-daemonset-s2dql"
                      }
                  },
                  {
                      "_index": "cis_report",
                      "_id": "kubebench-Report_2023-02-15T15:19:14Z_8twt5",
                      "_score": 1,
                      "_source": {
                          "id": "1",
                          "version": "cis-1.20",
                          "detected_version": "1.21",
                          "text": "Master Node Security Configuration",
                          "node_type": "master",
                          "tests": [
                              {
                                  "section": "1.1",
                                  "type": "",
                                  "pass": 18,
                                  "fail": 1,
                                  "warn": 2,
                                  "info": 0,
                                  "desc": "Master Node Configuration Files",
                                  "results": [
                                      {
                                          "test_number": "1.1.1",
                                          "test_desc": "Ensure that the API server pod specification file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-apiserver.yaml; then stat -c permissions=%a /etc/kubernetes/manifests/kube-apiserver.yaml; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the\nmaster node.\nFor example, chmod 644 /etc/kubernetes/manifests/kube-apiserver.yaml\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the\nmaster node.\nFor example, chmod 644 /etc/kubernetes/manifests/kube-apiserver.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "1.1.2",
                                          "test_desc": "Ensure that the API server pod specification file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-apiserver.yaml; then stat -c %U:%G /etc/kubernetes/manifests/kube-apiserver.yaml; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/manifests/kube-apiserver.yaml\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/manifests/kube-apiserver.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "1.1.3",
                                          "test_desc": "Ensure that the controller manager pod specification file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-controller-manager.yaml; then stat -c permissions=%a /etc/kubernetes/manifests/kube-controller-manager.yaml; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/manifests/kube-controller-manager.yaml\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/manifests/kube-controller-manager.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "1.1.4",
                                          "test_desc": "Ensure that the controller manager pod specification file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-controller-manager.yaml; then stat -c %U:%G /etc/kubernetes/manifests/kube-controller-manager.yaml; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/manifests/kube-controller-manager.yaml\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/manifests/kube-controller-manager.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "1.1.5",
                                          "test_desc": "Ensure that the scheduler pod specification file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-scheduler.yaml; then stat -c permissions=%a /etc/kubernetes/manifests/kube-scheduler.yaml; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/manifests/kube-scheduler.yaml\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/manifests/kube-scheduler.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "1.1.6",
                                          "test_desc": "Ensure that the scheduler pod specification file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/manifests/kube-scheduler.yaml; then stat -c %U:%G /etc/kubernetes/manifests/kube-scheduler.yaml; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/manifests/kube-scheduler.yaml\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/manifests/kube-scheduler.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "1.1.7",
                                          "test_desc": "Ensure that the etcd pod specification file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/manifests/etcd.yaml; then find /etc/kubernetes/manifests/etcd.yaml -name '*etcd*' | xargs stat -c permissions=%a; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/manifests/etcd.yaml\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/manifests/etcd.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600",
                                          "scored": true,
                                          "IsMultiple": true,
                                          "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "1.1.8",
                                          "test_desc": "Ensure that the etcd pod specification file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/manifests/etcd.yaml; then find /etc/kubernetes/manifests/etcd.yaml -name '*etcd*' | xargs stat -c %U:%G; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/manifests/etcd.yaml\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/manifests/etcd.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": true,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "1.1.9",
                                          "test_desc": "Ensure that the Container Network Interface file permissions are set to 644 or more restrictive (Manual)",
                                          "audit": "ps -ef | grep kubelet | grep -- --cni-conf-dir | sed 's%.*cni-conf-dir[= ]\\([^ ]*\\).*%\\1%' | xargs -I{} find {} -mindepth 1 | xargs --no-run-if-empty stat -c permissions=%a\nfind /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty stat -c permissions=%a\n",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 <path/to/cni/files>\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 <path/to/cni/files>\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": true,
                                          "expected_result": "'permissions' is present"
                                      },
                                      {
                                          "test_number": "1.1.10",
                                          "test_desc": "Ensure that the Container Network Interface file ownership is set to root:root (Manual)",
                                          "audit": "ps -ef | grep kubelet | grep -- --cni-conf-dir | sed 's%.*cni-conf-dir[= ]\\([^ ]*\\).*%\\1%' | xargs -I{} find {} -mindepth 1 | xargs --no-run-if-empty stat -c %U:%G\nfind /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty stat -c %U:%G\n",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root <path/to/cni/files>\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root <path/to/cni/files>\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": true,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "1.1.11",
                                          "test_desc": "Ensure that the etcd data directory permissions are set to 700 or more restrictive (Automated)",
                                          "audit": "ps -ef | grep etcd | grep -- --data-dir | sed 's%.*data-dir[= ]\\([^ ]*\\).*%\\1%' | xargs stat -c permissions=%a",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "On the etcd server node, get the etcd data directory, passed as an argument --data-dir,\nfrom the below command:\nps -ef | grep etcd\nRun the below command (based on the etcd data directory found above). For example,\nchmod 700 /var/lib/etcd\n",
                                          "test_info": [
                                              "On the etcd server node, get the etcd data directory, passed as an argument --data-dir,\nfrom the below command:\nps -ef | grep etcd\nRun the below command (based on the etcd data directory found above). For example,\nchmod 700 /var/lib/etcd\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=700",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 700, expected 700 or more restrictive"
                                      },
                                      {
                                          "test_number": "1.1.12",
                                          "test_desc": "Ensure that the etcd data directory ownership is set to etcd:etcd (Automated)",
                                          "audit": "ps -ef | grep etcd | grep -- --data-dir | sed 's%.*data-dir[= ]\\([^ ]*\\).*%\\1%' | xargs stat -c %U:%G",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "On the etcd server node, get the etcd data directory, passed as an argument --data-dir,\nfrom the below command:\nps -ef | grep etcd\nRun the below command (based on the etcd data directory found above).\nFor example, chown etcd:etcd /var/lib/etcd\n",
                                          "test_info": [
                                              "On the etcd server node, get the etcd data directory, passed as an argument --data-dir,\nfrom the below command:\nps -ef | grep etcd\nRun the below command (based on the etcd data directory found above).\nFor example, chown etcd:etcd /var/lib/etcd\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'etcd:etcd' is present"
                                      },
                                      {
                                          "test_number": "1.1.13",
                                          "test_desc": "Ensure that the admin.conf file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c permissions=%a /etc/kubernetes/admin.conf; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/admin.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/admin.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "1.1.14",
                                          "test_desc": "Ensure that the admin.conf file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/admin.conf; then stat -c %U:%G /etc/kubernetes/admin.conf; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/admin.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/admin.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "1.1.15",
                                          "test_desc": "Ensure that the scheduler.conf file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/scheduler.conf; then stat -c permissions=%a /etc/kubernetes/scheduler.conf; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/scheduler.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/scheduler.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "1.1.16",
                                          "test_desc": "Ensure that the scheduler.conf file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/scheduler.conf; then stat -c %U:%G /etc/kubernetes/scheduler.conf; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/scheduler.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/scheduler.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "1.1.17",
                                          "test_desc": "Ensure that the controller-manager.conf file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/controller-manager.conf; then stat -c permissions=%a /etc/kubernetes/controller-manager.conf; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/controller-manager.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod 644 /etc/kubernetes/controller-manager.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "1.1.18",
                                          "test_desc": "Ensure that the controller-manager.conf file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/controller-manager.conf; then stat -c %U:%G /etc/kubernetes/controller-manager.conf; fi'",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/controller-manager.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown root:root /etc/kubernetes/controller-manager.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "1.1.19",
                                          "test_desc": "Ensure that the Kubernetes PKI directory and file ownership is set to root:root (Automated)",
                                          "audit": "find /etc/kubernetes/pki/ | xargs stat -c %U:%G",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown -R root:root /etc/kubernetes/pki/\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchown -R root:root /etc/kubernetes/pki/\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root\nroot:root",
                                          "scored": true,
                                          "IsMultiple": true,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "1.1.20",
                                          "test_desc": "Ensure that the Kubernetes PKI certificate file permissions are set to 644 or more restrictive (Manual)",
                                          "audit": "find /etc/kubernetes/pki/ -name '*.crt' | xargs stat -c permissions=%a",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod -R 644 /etc/kubernetes/pki/*.crt\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod -R 644 /etc/kubernetes/pki/*.crt\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=644\npermissions=644\npermissions=644\npermissions=644\npermissions=644\npermissions=644\npermissions=644\npermissions=644\npermissions=644\npermissions=644",
                                          "scored": false,
                                          "IsMultiple": true,
                                          "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "1.1.21",
                                          "test_desc": "Ensure that the Kubernetes PKI key file permissions are set to 600 (Manual)",
                                          "audit": "find /etc/kubernetes/pki/ -name '*.key' | xargs stat -c permissions=%a",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod -R 600 /etc/kubernetes/pki/*.key\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the master node.\nFor example,\nchmod -R 600 /etc/kubernetes/pki/*.key\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600\npermissions=600\npermissions=600\npermissions=600\npermissions=600\npermissions=600\npermissions=600\npermissions=600\npermissions=600\npermissions=600\npermissions=600",
                                          "scored": false,
                                          "IsMultiple": true,
                                          "expected_result": "permissions has permissions 600, expected 600 or more restrictive"
                                      }
                                  ]
                              },
                              {
                                  "section": "1.2",
                                  "type": "",
                                  "pass": 19,
                                  "fail": 7,
                                  "warn": 8,
                                  "info": 0,
                                  "desc": "API Server",
                                  "results": [
                                      {
                                          "test_number": "1.2.1",
                                          "test_desc": "Ensure that the --anonymous-auth argument is set to false (Manual)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--anonymous-auth=false\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--anonymous-auth=false\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--anonymous-auth' is present"
                                      },
                                      {
                                          "test_number": "1.2.2",
                                          "test_desc": "Ensure that the --token-auth-file parameter is not set (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the documentation and configure alternate mechanisms for authentication. Then,\nedit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and remove the --token-auth-file=<filename> parameter.\n",
                                          "test_info": [
                                              "Follow the documentation and configure alternate mechanisms for authentication. Then,\nedit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and remove the --token-auth-file=<filename> parameter.\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--token-auth-file' is not present"
                                      },
                                      {
                                          "test_number": "1.2.3",
                                          "test_desc": "Ensure that the --kubelet-https argument is set to true (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and remove the --kubelet-https parameter.\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and remove the --kubelet-https parameter.\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--kubelet-https' is present OR '--kubelet-https' is not present"
                                      },
                                      {
                                          "test_number": "1.2.4",
                                          "test_desc": "Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the Kubernetes documentation and set up the TLS connection between the\napiserver and kubelets. Then, edit API server pod specification file\n/etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the\nkubelet client certificate and key parameters as below.\n--kubelet-client-certificate=<path/to/client-certificate-file>\n--kubelet-client-key=<path/to/client-key-file>\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and set up the TLS connection between the\napiserver and kubelets. Then, edit API server pod specification file\n/etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the\nkubelet client certificate and key parameters as below.\n--kubelet-client-certificate=<path/to/client-certificate-file>\n--kubelet-client-key=<path/to/client-key-file>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--kubelet-client-certificate' is present AND '--kubelet-client-key' is present"
                                      },
                                      {
                                          "test_number": "1.2.5",
                                          "test_desc": "Ensure that the --kubelet-certificate-authority argument is set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the Kubernetes documentation and setup the TLS connection between\nthe apiserver and kubelets. Then, edit the API server pod specification file\n/etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the\n--kubelet-certificate-authority parameter to the path to the cert file for the certificate authority.\n--kubelet-certificate-authority=<ca-string>\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and setup the TLS connection between\nthe apiserver and kubelets. Then, edit the API server pod specification file\n/etc/kubernetes/manifests/kube-apiserver.yaml on the master node and set the\n--kubelet-certificate-authority parameter to the path to the cert file for the certificate authority.\n--kubelet-certificate-authority=<ca-string>\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--kubelet-certificate-authority' is present"
                                      },
                                      {
                                          "test_number": "1.2.6",
                                          "test_desc": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --authorization-mode parameter to values other than AlwaysAllow.\nOne such example could be as below.\n--authorization-mode=RBAC\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --authorization-mode parameter to values other than AlwaysAllow.\nOne such example could be as below.\n--authorization-mode=RBAC\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--authorization-mode' does not have 'AlwaysAllow'"
                                      },
                                      {
                                          "test_number": "1.2.7",
                                          "test_desc": "Ensure that the --authorization-mode argument includes Node (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --authorization-mode parameter to a value that includes Node.\n--authorization-mode=Node,RBAC\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --authorization-mode parameter to a value that includes Node.\n--authorization-mode=Node,RBAC\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--authorization-mode' has 'Node'"
                                      },
                                      {
                                          "test_number": "1.2.8",
                                          "test_desc": "Ensure that the --authorization-mode argument includes RBAC (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --authorization-mode parameter to a value that includes RBAC,\nfor example:\n--authorization-mode=Node,RBAC\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --authorization-mode parameter to a value that includes RBAC,\nfor example:\n--authorization-mode=Node,RBAC\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--authorization-mode' has 'RBAC'"
                                      },
                                      {
                                          "test_number": "1.2.9",
                                          "test_desc": "Ensure that the admission control plugin EventRateLimit is set (Manual)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the Kubernetes documentation and set the desired limits in a configuration file.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\nand set the below parameters.\n--enable-admission-plugins=...,EventRateLimit,...\n--admission-control-config-file=<path/to/configuration/file>\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and set the desired limits in a configuration file.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\nand set the below parameters.\n--enable-admission-plugins=...,EventRateLimit,...\n--admission-control-config-file=<path/to/configuration/file>\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--enable-admission-plugins' has 'EventRateLimit'"
                                      },
                                      {
                                          "test_number": "1.2.10",
                                          "test_desc": "Ensure that the admission control plugin AlwaysAdmit is not set (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and either remove the --enable-admission-plugins parameter, or set it to a\nvalue that does not include AlwaysAdmit.\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and either remove the --enable-admission-plugins parameter, or set it to a\nvalue that does not include AlwaysAdmit.\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--enable-admission-plugins' does not have 'AlwaysAdmit' OR '--enable-admission-plugins' is not present"
                                      },
                                      {
                                          "test_number": "1.2.11",
                                          "test_desc": "Ensure that the admission control plugin AlwaysPullImages is set (Manual)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to include\nAlwaysPullImages.\n--enable-admission-plugins=...,AlwaysPullImages,...\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to include\nAlwaysPullImages.\n--enable-admission-plugins=...,AlwaysPullImages,...\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--enable-admission-plugins' has 'AlwaysPullImages'"
                                      },
                                      {
                                          "test_number": "1.2.12",
                                          "test_desc": "Ensure that the admission control plugin SecurityContextDeny is set if PodSecurityPolicy is not used (Manual)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to include\nSecurityContextDeny, unless PodSecurityPolicy is already in place.\n--enable-admission-plugins=...,SecurityContextDeny,...\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to include\nSecurityContextDeny, unless PodSecurityPolicy is already in place.\n--enable-admission-plugins=...,SecurityContextDeny,...\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--enable-admission-plugins' has 'SecurityContextDeny' OR '--enable-admission-plugins' has 'PodSecurityPolicy'"
                                      },
                                      {
                                          "test_number": "1.2.13",
                                          "test_desc": "Ensure that the admission control plugin ServiceAccount is set (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the documentation and create ServiceAccount objects as per your environment.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and ensure that the --disable-admission-plugins parameter is set to a\nvalue that does not include ServiceAccount.\n",
                                          "test_info": [
                                              "Follow the documentation and create ServiceAccount objects as per your environment.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and ensure that the --disable-admission-plugins parameter is set to a\nvalue that does not include ServiceAccount.\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--disable-admission-plugins' is present OR '--disable-admission-plugins' is not present"
                                      },
                                      {
                                          "test_number": "1.2.14",
                                          "test_desc": "Ensure that the admission control plugin NamespaceLifecycle is set (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --disable-admission-plugins parameter to\nensure it does not include NamespaceLifecycle.\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --disable-admission-plugins parameter to\nensure it does not include NamespaceLifecycle.\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--disable-admission-plugins' is present OR '--disable-admission-plugins' is not present"
                                      },
                                      {
                                          "test_number": "1.2.15",
                                          "test_desc": "Ensure that the admission control plugin PodSecurityPolicy is set (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the documentation and create Pod Security Policy objects as per your environment.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to a\nvalue that includes PodSecurityPolicy:\n--enable-admission-plugins=...,PodSecurityPolicy,...\nThen restart the API Server.\n",
                                          "test_info": [
                                              "Follow the documentation and create Pod Security Policy objects as per your environment.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to a\nvalue that includes PodSecurityPolicy:\n--enable-admission-plugins=...,PodSecurityPolicy,...\nThen restart the API Server.\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--enable-admission-plugins' has 'PodSecurityPolicy'"
                                      },
                                      {
                                          "test_number": "1.2.16",
                                          "test_desc": "Ensure that the admission control plugin NodeRestriction is set (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the Kubernetes documentation and configure NodeRestriction plug-in on kubelets.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to a\nvalue that includes NodeRestriction.\n--enable-admission-plugins=...,NodeRestriction,...\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and configure NodeRestriction plug-in on kubelets.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --enable-admission-plugins parameter to a\nvalue that includes NodeRestriction.\n--enable-admission-plugins=...,NodeRestriction,...\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--enable-admission-plugins' has 'NodeRestriction'"
                                      },
                                      {
                                          "test_number": "1.2.17",
                                          "test_desc": "Ensure that the --insecure-bind-address argument is not set (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and remove the --insecure-bind-address parameter.\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and remove the --insecure-bind-address parameter.\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--insecure-bind-address' is not present"
                                      },
                                      {
                                          "test_number": "1.2.18",
                                          "test_desc": "Ensure that the --insecure-port argument is set to 0 (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--insecure-port=0\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--insecure-port=0\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--insecure-port' is equal to '0'"
                                      },
                                      {
                                          "test_number": "1.2.19",
                                          "test_desc": "Ensure that the --secure-port argument is not set to 0 (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and either remove the --secure-port parameter or\nset it to a different (non-zero) desired port.\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and either remove the --secure-port parameter or\nset it to a different (non-zero) desired port.\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--secure-port' is greater than 0 OR '--secure-port' is not present"
                                      },
                                      {
                                          "test_number": "1.2.20",
                                          "test_desc": "Ensure that the --profiling argument is set to false (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--profiling=false\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--profiling=false\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--profiling' is present"
                                      },
                                      {
                                          "test_number": "1.2.21",
                                          "test_desc": "Ensure that the --audit-log-path argument is set (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-path parameter to a suitable path and\nfile where you would like audit logs to be written, for example:\n--audit-log-path=/var/log/apiserver/audit.log\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-path parameter to a suitable path and\nfile where you would like audit logs to be written, for example:\n--audit-log-path=/var/log/apiserver/audit.log\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--audit-log-path' is present"
                                      },
                                      {
                                          "test_number": "1.2.22",
                                          "test_desc": "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-maxage parameter to 30 or as an appropriate number of days:\n--audit-log-maxage=30\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-maxage parameter to 30 or as an appropriate number of days:\n--audit-log-maxage=30\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--audit-log-maxage' is present"
                                      },
                                      {
                                          "test_number": "1.2.23",
                                          "test_desc": "Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-maxbackup parameter to 10 or to an appropriate\nvalue.\n--audit-log-maxbackup=10\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-maxbackup parameter to 10 or to an appropriate\nvalue.\n--audit-log-maxbackup=10\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--audit-log-maxbackup' is present"
                                      },
                                      {
                                          "test_number": "1.2.24",
                                          "test_desc": "Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-maxsize parameter to an appropriate size in MB.\nFor example, to set it as 100 MB:\n--audit-log-maxsize=100\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --audit-log-maxsize parameter to an appropriate size in MB.\nFor example, to set it as 100 MB:\n--audit-log-maxsize=100\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--audit-log-maxsize' is present"
                                      },
                                      {
                                          "test_number": "1.2.25",
                                          "test_desc": "Ensure that the --request-timeout argument is set as appropriate (Manual)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\nand set the below parameter as appropriate and if needed.\nFor example,\n--request-timeout=300s\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\nand set the below parameter as appropriate and if needed.\nFor example,\n--request-timeout=300s\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "1.2.26",
                                          "test_desc": "Ensure that the --service-account-lookup argument is set to true (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--service-account-lookup=true\nAlternatively, you can delete the --service-account-lookup parameter from this file so\nthat the default takes effect.\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--service-account-lookup=true\nAlternatively, you can delete the --service-account-lookup parameter from this file so\nthat the default takes effect.\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--service-account-lookup' is not present OR '--service-account-lookup' is present"
                                      },
                                      {
                                          "test_number": "1.2.27",
                                          "test_desc": "Ensure that the --service-account-key-file argument is set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --service-account-key-file parameter\nto the public key file for service accounts:\n--service-account-key-file=<filename>\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --service-account-key-file parameter\nto the public key file for service accounts:\n--service-account-key-file=<filename>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--service-account-key-file' is present"
                                      },
                                      {
                                          "test_number": "1.2.28",
                                          "test_desc": "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the etcd certificate and key file parameters.\n--etcd-certfile=<path/to/client-certificate-file>\n--etcd-keyfile=<path/to/client-key-file>\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the etcd certificate and key file parameters.\n--etcd-certfile=<path/to/client-certificate-file>\n--etcd-keyfile=<path/to/client-key-file>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--etcd-certfile' is present AND '--etcd-keyfile' is present"
                                      },
                                      {
                                          "test_number": "1.2.29",
                                          "test_desc": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the Kubernetes documentation and set up the TLS connection on the apiserver.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the TLS certificate and private key file parameters.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and set up the TLS connection on the apiserver.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the TLS certificate and private key file parameters.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--tls-cert-file' is present AND '--tls-private-key-file' is present"
                                      },
                                      {
                                          "test_number": "1.2.30",
                                          "test_desc": "Ensure that the --client-ca-file argument is set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the Kubernetes documentation and set up the TLS connection on the apiserver.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the client certificate authority file.\n--client-ca-file=<path/to/client-ca-file>\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and set up the TLS connection on the apiserver.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the client certificate authority file.\n--client-ca-file=<path/to/client-ca-file>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--client-ca-file' is present"
                                      },
                                      {
                                          "test_number": "1.2.31",
                                          "test_desc": "Ensure that the --etcd-cafile argument is set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the etcd certificate authority file parameter.\n--etcd-cafile=<path/to/ca-file>\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and set up the TLS connection between the apiserver and etcd.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the etcd certificate authority file parameter.\n--etcd-cafile=<path/to/ca-file>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--etcd-cafile' is present"
                                      },
                                      {
                                          "test_number": "1.2.32",
                                          "test_desc": "Ensure that the --encryption-provider-config argument is set as appropriate (Manual)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the Kubernetes documentation and configure a EncryptionConfig file.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --encryption-provider-config parameter to the path of that file: --encryption-provider-config=</path/to/EncryptionConfig/File>\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and configure a EncryptionConfig file.\nThen, edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the --encryption-provider-config parameter to the path of that file: --encryption-provider-config=</path/to/EncryptionConfig/File>\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--encryption-provider-config' is present"
                                      },
                                      {
                                          "test_number": "1.2.33",
                                          "test_desc": "Ensure that encryption providers are appropriately configured (Manual)",
                                          "audit": "ENCRYPTION_PROVIDER_CONFIG=$(ps -ef | grep kube-apiserver | grep -- --encryption-provider-config | sed 's%.*encryption-provider-config[= ]\\([^ ]*\\).*%\\1%')\nif test -e $ENCRYPTION_PROVIDER_CONFIG; then grep -A1 'providers:' $ENCRYPTION_PROVIDER_CONFIG | tail -n1 | grep -o \"[A-Za-z]*\" | sed 's/^/provider=/'; fi\n",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the Kubernetes documentation and configure a EncryptionConfig file.\nIn this file, choose aescbc, kms or secretbox as the encryption provider.\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and configure a EncryptionConfig file.\nIn this file, choose aescbc, kms or secretbox as the encryption provider.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'provider' is present"
                                      },
                                      {
                                          "test_number": "1.2.34",
                                          "test_desc": "Ensure that the API Server only makes use of Strong Cryptographic Ciphers (Manual)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM\n_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM\n_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM\n_SHA384\n",
                                          "test_info": [
                                              "Edit the API server pod specification file /etc/kubernetes/manifests/kube-apiserver.yaml\non the master node and set the below parameter.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM\n_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM\n_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM\n_SHA384\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--tls-cipher-suites' is present"
                                      }
                                  ]
                              },
                              {
                                  "section": "1.3",
                                  "type": "",
                                  "pass": 5,
                                  "fail": 1,
                                  "warn": 1,
                                  "info": 0,
                                  "desc": "Controller Manager",
                                  "results": [
                                      {
                                          "test_number": "1.3.1",
                                          "test_desc": "Ensure that the --terminated-pod-gc-threshold argument is set as appropriate (Manual)",
                                          "audit": "/bin/ps -ef | grep kube-controller-manager | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and set the --terminated-pod-gc-threshold to an appropriate threshold,\nfor example:\n--terminated-pod-gc-threshold=10\n",
                                          "test_info": [
                                              "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and set the --terminated-pod-gc-threshold to an appropriate threshold,\nfor example:\n--terminated-pod-gc-threshold=10\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "root     31084 31018  2 Feb14 ?        00:54:28 kube-controller-manager --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1 --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key --controllers=*,bootstrapsigner,tokencleaner --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0 --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --use-service-account-credentials=true",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--terminated-pod-gc-threshold' is present"
                                      },
                                      {
                                          "test_number": "1.3.2",
                                          "test_desc": "Ensure that the --profiling argument is set to false (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-controller-manager | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and set the below parameter.\n--profiling=false\n",
                                          "test_info": [
                                              "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and set the below parameter.\n--profiling=false\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "root     31084 31018  2 Feb14 ?        00:54:28 kube-controller-manager --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1 --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key --controllers=*,bootstrapsigner,tokencleaner --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0 --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --use-service-account-credentials=true",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--profiling' is present"
                                      },
                                      {
                                          "test_number": "1.3.3",
                                          "test_desc": "Ensure that the --use-service-account-credentials argument is set to true (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-controller-manager | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node to set the below parameter.\n--use-service-account-credentials=true\n",
                                          "test_info": [
                                              "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node to set the below parameter.\n--use-service-account-credentials=true\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31084 31018  2 Feb14 ?        00:54:28 kube-controller-manager --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1 --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key --controllers=*,bootstrapsigner,tokencleaner --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0 --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --use-service-account-credentials=true",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--use-service-account-credentials' is not equal to 'false'"
                                      },
                                      {
                                          "test_number": "1.3.4",
                                          "test_desc": "Ensure that the --service-account-private-key-file argument is set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-controller-manager | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and set the --service-account-private-key-file parameter\nto the private key file for service accounts.\n--service-account-private-key-file=<filename>\n",
                                          "test_info": [
                                              "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and set the --service-account-private-key-file parameter\nto the private key file for service accounts.\n--service-account-private-key-file=<filename>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31084 31018  2 Feb14 ?        00:54:28 kube-controller-manager --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1 --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key --controllers=*,bootstrapsigner,tokencleaner --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0 --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --use-service-account-credentials=true",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--service-account-private-key-file' is present"
                                      },
                                      {
                                          "test_number": "1.3.5",
                                          "test_desc": "Ensure that the --root-ca-file argument is set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-controller-manager | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and set the --root-ca-file parameter to the certificate bundle file`.\n--root-ca-file=<path/to/file>\n",
                                          "test_info": [
                                              "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and set the --root-ca-file parameter to the certificate bundle file`.\n--root-ca-file=<path/to/file>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31084 31018  2 Feb14 ?        00:54:28 kube-controller-manager --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1 --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key --controllers=*,bootstrapsigner,tokencleaner --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0 --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --use-service-account-credentials=true",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--root-ca-file' is present"
                                      },
                                      {
                                          "test_number": "1.3.6",
                                          "test_desc": "Ensure that the RotateKubeletServerCertificate argument is set to true (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-controller-manager | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.\n--feature-gates=RotateKubeletServerCertificate=true\n",
                                          "test_info": [
                                              "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.\n--feature-gates=RotateKubeletServerCertificate=true\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31084 31018  2 Feb14 ?        00:54:28 kube-controller-manager --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1 --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key --controllers=*,bootstrapsigner,tokencleaner --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0 --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --use-service-account-credentials=true",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--feature-gates' is present OR '--feature-gates' is not present"
                                      },
                                      {
                                          "test_number": "1.3.7",
                                          "test_desc": "Ensure that the --bind-address argument is set to 127.0.0.1 (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-controller-manager | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and ensure the correct value for the --bind-address parameter\n",
                                          "test_info": [
                                              "Edit the Controller Manager pod specification file /etc/kubernetes/manifests/kube-controller-manager.yaml\non the master node and ensure the correct value for the --bind-address parameter\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31084 31018  2 Feb14 ?        00:54:28 kube-controller-manager --allocate-node-cidrs=true --authentication-kubeconfig=/etc/kubernetes/controller-manager.conf --authorization-kubeconfig=/etc/kubernetes/controller-manager.conf --bind-address=127.0.0.1 --client-ca-file=/etc/kubernetes/pki/ca.crt --cluster-cidr=10.244.0.0/16 --cluster-name=kubernetes --cluster-signing-cert-file=/etc/kubernetes/pki/ca.crt --cluster-signing-key-file=/etc/kubernetes/pki/ca.key --controllers=*,bootstrapsigner,tokencleaner --kubeconfig=/etc/kubernetes/controller-manager.conf --leader-elect=true --port=0 --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --root-ca-file=/etc/kubernetes/pki/ca.crt --service-account-private-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --use-service-account-credentials=true",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--bind-address' is equal to '127.0.0.1' OR '--bind-address' is not present"
                                      }
                                  ]
                              },
                              {
                                  "section": "1.4",
                                  "type": "",
                                  "pass": 1,
                                  "fail": 1,
                                  "warn": 0,
                                  "info": 0,
                                  "desc": "Scheduler",
                                  "results": [
                                      {
                                          "test_number": "1.4.1",
                                          "test_desc": "Ensure that the --profiling argument is set to false (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-scheduler | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-scheduler.yaml file\non the master node and set the below parameter.\n--profiling=false\n",
                                          "test_info": [
                                              "Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-scheduler.yaml file\non the master node and set the below parameter.\n--profiling=false\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "root     31076 30971  0 Feb14 ?        00:10:43 kube-scheduler --authentication-kubeconfig=/etc/kubernetes/scheduler.conf --authorization-kubeconfig=/etc/kubernetes/scheduler.conf --bind-address=127.0.0.1 --kubeconfig=/etc/kubernetes/scheduler.conf --leader-elect=true --port=0",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--profiling' is present"
                                      },
                                      {
                                          "test_number": "1.4.2",
                                          "test_desc": "Ensure that the --bind-address argument is set to 127.0.0.1 (Automated)",
                                          "audit": "/bin/ps -ef | grep kube-scheduler | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-scheduler.yaml\non the master node and ensure the correct value for the --bind-address parameter\n",
                                          "test_info": [
                                              "Edit the Scheduler pod specification file /etc/kubernetes/manifests/kube-scheduler.yaml\non the master node and ensure the correct value for the --bind-address parameter\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31076 30971  0 Feb14 ?        00:10:43 kube-scheduler --authentication-kubeconfig=/etc/kubernetes/scheduler.conf --authorization-kubeconfig=/etc/kubernetes/scheduler.conf --bind-address=127.0.0.1 --kubeconfig=/etc/kubernetes/scheduler.conf --leader-elect=true --port=0",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--bind-address' is equal to '127.0.0.1' OR '--bind-address' is not present"
                                      }
                                  ]
                              }
                          ],
                          "total_pass": 43,
                          "total_fail": 10,
                          "total_warn": 11,
                          "total_info": 0,
                          "createTime": "2023-02-15T15:19:14Z",
                          "node_name": "inspectionpolicy-sample-kubebench-daemonset-7qjdg"
                      }
                  },
                  {
                      "_index": "cis_report",
                      "_id": "kubebench-Report_2023-02-15T15:19:14Z_lczbx",
                      "_score": 1,
                      "_source": {
                          "id": "3",
                          "version": "cis-1.20",
                          "detected_version": "1.21",
                          "text": "Control Plane Configuration",
                          "node_type": "controlplane",
                          "tests": [
                              {
                                  "section": "3.1",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 1,
                                  "info": 0,
                                  "desc": "Authentication and Authorization",
                                  "results": [
                                      {
                                          "test_number": "3.1.1",
                                          "test_desc": "Client certificate authentication should not be used for users (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Alternative mechanisms provided by Kubernetes such as the use of OIDC should be\nimplemented in place of client certificates.\n",
                                          "test_info": [
                                              "Alternative mechanisms provided by Kubernetes such as the use of OIDC should be\nimplemented in place of client certificates.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "3.2",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 2,
                                  "info": 0,
                                  "desc": "Logging",
                                  "results": [
                                      {
                                          "test_number": "3.2.1",
                                          "test_desc": "Ensure that a minimal audit policy is created (Manual)",
                                          "audit": "/bin/ps -ef | grep kube-apiserver | grep -v grep",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Create an audit policy file for your cluster.\n",
                                          "test_info": [
                                              "Create an audit policy file for your cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "root     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--audit-policy-file' is present"
                                      },
                                      {
                                          "test_number": "3.2.2",
                                          "test_desc": "Ensure that the audit policy covers key security concerns (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Consider modification of the audit policy in use on the cluster to include these items, at a\nminimum.\n",
                                          "test_info": [
                                              "Consider modification of the audit policy in use on the cluster to include these items, at a\nminimum.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              }
                          ],
                          "total_pass": 0,
                          "total_fail": 0,
                          "total_warn": 3,
                          "total_info": 0,
                          "createTime": "2023-02-15T15:19:14Z",
                          "node_name": "inspectionpolicy-sample-kubebench-daemonset-7qjdg"
                      }
                  },
                  {
                      "_index": "cis_report",
                      "_id": "kubebench-Report_2023-02-15T15:19:14Z_pww65",
                      "_score": 1,
                      "_source": {
                          "id": "2",
                          "version": "cis-1.20",
                          "detected_version": "1.21",
                          "text": "Etcd Node Configuration",
                          "node_type": "etcd",
                          "tests": [
                              {
                                  "section": "2",
                                  "type": "",
                                  "pass": 7,
                                  "fail": 0,
                                  "warn": 0,
                                  "info": 0,
                                  "desc": "Etcd Node Configuration Files",
                                  "results": [
                                      {
                                          "test_number": "2.1",
                                          "test_desc": "Ensure that the --cert-file and --key-file arguments are set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | /bin/grep etcd | /bin/grep -v grep",
                                          "AuditEnv": "cat \"/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ\" | tr '\\0' '\\n'",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the etcd service documentation and configure TLS encryption.\nThen, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml\non the master node and set the below parameters.\n--cert-file=</path/to/ca-file>\n--key-file=</path/to/key-file>\n",
                                          "test_info": [
                                              "Follow the etcd service documentation and configure TLS encryption.\nThen, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml\non the master node and set the below parameters.\n--cert-file=</path/to/ca-file>\n--key-file=</path/to/key-file>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31086 30990  3 Feb14 ?        01:02:18 etcd --advertise-client-urls=https://10.186.142.227:2379 --cert-file=/etc/kubernetes/pki/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/etcd --initial-advertise-peer-urls=https://10.186.142.227:2380 --initial-cluster=sc2-10-186-142-227.eng.vmware.com=https://10.186.142.227:2380 --key-file=/etc/kubernetes/pki/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://10.186.142.227:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://10.186.142.227:2380 --name=sc2-10-186-142-227.eng.vmware.com --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/etc/kubernetes/pki/etcd/peer.key --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt\nroot     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--cert-file' is present AND '--key-file' is present"
                                      },
                                      {
                                          "test_number": "2.2",
                                          "test_desc": "Ensure that the --client-cert-auth argument is set to true (Automated)",
                                          "audit": "/bin/ps -ef | /bin/grep etcd | /bin/grep -v grep",
                                          "AuditEnv": "cat \"/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ\" | tr '\\0' '\\n'",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master\nnode and set the below parameter.\n--client-cert-auth=\"true\"\n",
                                          "test_info": [
                                              "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master\nnode and set the below parameter.\n--client-cert-auth=\"true\"\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31086 30990  3 Feb14 ?        01:02:18 etcd --advertise-client-urls=https://10.186.142.227:2379 --cert-file=/etc/kubernetes/pki/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/etcd --initial-advertise-peer-urls=https://10.186.142.227:2380 --initial-cluster=sc2-10-186-142-227.eng.vmware.com=https://10.186.142.227:2380 --key-file=/etc/kubernetes/pki/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://10.186.142.227:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://10.186.142.227:2380 --name=sc2-10-186-142-227.eng.vmware.com --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/etc/kubernetes/pki/etcd/peer.key --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt\nroot     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--client-cert-auth' is equal to 'true'"
                                      },
                                      {
                                          "test_number": "2.3",
                                          "test_desc": "Ensure that the --auto-tls argument is not set to true (Automated)",
                                          "audit": "/bin/ps -ef | /bin/grep etcd | /bin/grep -v grep",
                                          "AuditEnv": "cat \"/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ\" | tr '\\0' '\\n'",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master\nnode and either remove the --auto-tls parameter or set it to false.\n  --auto-tls=false\n",
                                          "test_info": [
                                              "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master\nnode and either remove the --auto-tls parameter or set it to false.\n  --auto-tls=false\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=sc2-10-186-142-227.eng.vmware.com\nSSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt\nHOME=/root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'ETCD_AUTO_TLS' is not present OR 'ETCD_AUTO_TLS' is present"
                                      },
                                      {
                                          "test_number": "2.4",
                                          "test_desc": "Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate (Automated)",
                                          "audit": "/bin/ps -ef | /bin/grep etcd | /bin/grep -v grep",
                                          "AuditEnv": "cat \"/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ\" | tr '\\0' '\\n'",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Follow the etcd service documentation and configure peer TLS encryption as appropriate\nfor your etcd cluster.\nThen, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the\nmaster node and set the below parameters.\n--peer-client-file=</path/to/peer-cert-file>\n--peer-key-file=</path/to/peer-key-file>\n",
                                          "test_info": [
                                              "Follow the etcd service documentation and configure peer TLS encryption as appropriate\nfor your etcd cluster.\nThen, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the\nmaster node and set the below parameters.\n--peer-client-file=</path/to/peer-cert-file>\n--peer-key-file=</path/to/peer-key-file>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31086 30990  3 Feb14 ?        01:02:18 etcd --advertise-client-urls=https://10.186.142.227:2379 --cert-file=/etc/kubernetes/pki/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/etcd --initial-advertise-peer-urls=https://10.186.142.227:2380 --initial-cluster=sc2-10-186-142-227.eng.vmware.com=https://10.186.142.227:2380 --key-file=/etc/kubernetes/pki/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://10.186.142.227:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://10.186.142.227:2380 --name=sc2-10-186-142-227.eng.vmware.com --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/etc/kubernetes/pki/etcd/peer.key --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt\nroot     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--peer-cert-file' is present AND '--peer-key-file' is present"
                                      },
                                      {
                                          "test_number": "2.5",
                                          "test_desc": "Ensure that the --peer-client-cert-auth argument is set to true (Automated)",
                                          "audit": "/bin/ps -ef | /bin/grep etcd | /bin/grep -v grep",
                                          "AuditEnv": "cat \"/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ\" | tr '\\0' '\\n'",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master\nnode and set the below parameter.\n--peer-client-cert-auth=true\n",
                                          "test_info": [
                                              "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master\nnode and set the below parameter.\n--peer-client-cert-auth=true\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31086 30990  3 Feb14 ?        01:02:18 etcd --advertise-client-urls=https://10.186.142.227:2379 --cert-file=/etc/kubernetes/pki/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/etcd --initial-advertise-peer-urls=https://10.186.142.227:2380 --initial-cluster=sc2-10-186-142-227.eng.vmware.com=https://10.186.142.227:2380 --key-file=/etc/kubernetes/pki/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://10.186.142.227:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://10.186.142.227:2380 --name=sc2-10-186-142-227.eng.vmware.com --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/etc/kubernetes/pki/etcd/peer.key --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt\nroot     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'--peer-client-cert-auth' is equal to 'true'"
                                      },
                                      {
                                          "test_number": "2.6",
                                          "test_desc": "Ensure that the --peer-auto-tls argument is not set to true (Automated)",
                                          "audit": "/bin/ps -ef | /bin/grep etcd | /bin/grep -v grep",
                                          "AuditEnv": "cat \"/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ\" | tr '\\0' '\\n'",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master\nnode and either remove the --peer-auto-tls parameter or set it to false.\n--peer-auto-tls=false\n",
                                          "test_info": [
                                              "Edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the master\nnode and either remove the --peer-auto-tls parameter or set it to false.\n--peer-auto-tls=false\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=sc2-10-186-142-227.eng.vmware.com\nSSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt\nHOME=/root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'ETCD_PEER_AUTO_TLS' is not present OR 'ETCD_PEER_AUTO_TLS' is present"
                                      },
                                      {
                                          "test_number": "2.7",
                                          "test_desc": "Ensure that a unique Certificate Authority is used for etcd (Manual)",
                                          "audit": "/bin/ps -ef | /bin/grep etcd | /bin/grep -v grep",
                                          "AuditEnv": "cat \"/proc/$(/bin/ps -C etcd -o pid= | tr -d ' ')/environ\" | tr '\\0' '\\n'",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "[Manual test]\nFollow the etcd documentation and create a dedicated certificate authority setup for the\netcd service.\nThen, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the\nmaster node and set the below parameter.\n--trusted-ca-file=</path/to/ca-file>\n",
                                          "test_info": [
                                              "[Manual test]\nFollow the etcd documentation and create a dedicated certificate authority setup for the\netcd service.\nThen, edit the etcd pod specification file /etc/kubernetes/manifests/etcd.yaml on the\nmaster node and set the below parameter.\n--trusted-ca-file=</path/to/ca-file>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root     31086 30990  3 Feb14 ?        01:02:18 etcd --advertise-client-urls=https://10.186.142.227:2379 --cert-file=/etc/kubernetes/pki/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/etcd --initial-advertise-peer-urls=https://10.186.142.227:2380 --initial-cluster=sc2-10-186-142-227.eng.vmware.com=https://10.186.142.227:2380 --key-file=/etc/kubernetes/pki/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://10.186.142.227:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://10.186.142.227:2380 --name=sc2-10-186-142-227.eng.vmware.com --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/etc/kubernetes/pki/etcd/peer.key --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt\nroot     31087 31046  9 Feb14 ?        02:56:30 kube-apiserver --advertise-address=10.186.142.227 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/etc/kubernetes/pki/ca.crt --enable-admission-plugins=NodeRestriction --enable-bootstrap-token-auth=true --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6443 --service-account-issuer=https://kubernetes.default.svc.cluster.local --service-account-key-file=/etc/kubernetes/pki/sa.pub --service-account-signing-key-file=/etc/kubernetes/pki/sa.key --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/etc/kubernetes/pki/apiserver.crt --tls-private-key-file=/etc/kubernetes/pki/apiserver.key",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--trusted-ca-file' is present"
                                      }
                                  ]
                              }
                          ],
                          "total_pass": 7,
                          "total_fail": 0,
                          "total_warn": 0,
                          "total_info": 0,
                          "createTime": "2023-02-15T15:19:14Z",
                          "node_name": "inspectionpolicy-sample-kubebench-daemonset-7qjdg"
                      }
                  },
                  {
                      "_index": "cis_report",
                      "_id": "kubebench-Report_2023-02-15T15:19:14Z_rwq78",
                      "_score": 1,
                      "_source": {
                          "id": "4",
                          "version": "cis-1.20",
                          "detected_version": "1.21",
                          "text": "Worker Node Security Configuration",
                          "node_type": "node",
                          "tests": [
                              {
                                  "section": "4.1",
                                  "type": "",
                                  "pass": 10,
                                  "fail": 0,
                                  "warn": 0,
                                  "info": 0,
                                  "desc": "Worker Node Configuration Files",
                                  "results": [
                                      {
                                          "test_number": "4.1.1",
                                          "test_desc": "Ensure that the kubelet service file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c permissions=%a /lib/systemd/system/kubelet.service; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=644",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.2",
                                          "test_desc": "Ensure that the kubelet service file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c %U:%G /lib/systemd/system/kubelet.service; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "4.1.3",
                                          "test_desc": "If proxy kubeconfig file exists ensure permissions are set to 644 or more restrictive (Manual)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c permissions=%a /etc/kubernetes/proxy.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'permissions' is present OR '/etc/kubernetes/proxy.conf' is not present"
                                      },
                                      {
                                          "test_number": "4.1.4",
                                          "test_desc": "If proxy kubeconfig file exists ensure ownership is set to root:root (Manual)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c %U:%G /etc/kubernetes/proxy.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present OR '/etc/kubernetes/proxy.conf' is not present"
                                      },
                                      {
                                          "test_number": "4.1.5",
                                          "test_desc": "Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c permissions=%a /etc/kubernetes/kubelet.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=600",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.6",
                                          "test_desc": "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c %U:%G /etc/kubernetes/kubelet.conf; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n",
                                          "test_info": [
                                              "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      },
                                      {
                                          "test_number": "4.1.7",
                                          "test_desc": "Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Manual)",
                                          "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi\n",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n",
                                          "test_info": [
                                              "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=644",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.8",
                                          "test_desc": "Ensure that the client certificate authorities file ownership is set to root:root (Manual)",
                                          "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c %U:%G $CAFILE; fi\n",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n",
                                          "test_info": [
                                              "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is equal to 'root:root'"
                                      },
                                      {
                                          "test_number": "4.1.9",
                                          "test_desc": "Ensure that the kubelet --config configuration file has permissions set to 644 or more restrictive (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c permissions=%a /var/lib/kubelet/config.yaml; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n",
                                          "test_info": [
                                              "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "permissions=644",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                      },
                                      {
                                          "test_number": "4.1.10",
                                          "test_desc": "Ensure that the kubelet --config configuration file ownership is set to root:root (Automated)",
                                          "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c %U:%G /var/lib/kubelet/config.yaml; fi' ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n",
                                          "test_info": [
                                              "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "root:root",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'root:root' is present"
                                      }
                                  ]
                              },
                              {
                                  "section": "4.2",
                                  "type": "",
                                  "pass": 9,
                                  "fail": 1,
                                  "warn": 3,
                                  "info": 0,
                                  "desc": "Kubelet",
                                  "results": [
                                      {
                                          "test_number": "4.2.1",
                                          "test_desc": "Ensure that the anonymous-auth argument is set to false (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.authentication.anonymous.enabled}' is equal to 'false'"
                                      },
                                      {
                                          "test_number": "4.2.2",
                                          "test_desc": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.authorization.mode}' does not have 'AlwaysAllow'"
                                      },
                                      {
                                          "test_number": "4.2.3",
                                          "test_desc": "Ensure that the --client-ca-file argument is set as appropriate (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.authentication.x509.clientCAFile}' is present"
                                      },
                                      {
                                          "test_number": "4.2.4",
                                          "test_desc": "Ensure that the --read-only-port argument is set to 0 (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.readOnlyPort}' is present OR '{.readOnlyPort}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.5",
                                          "test_desc": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.streamingConnectionIdleTimeout}' is not equal to '0' OR '{.streamingConnectionIdleTimeout}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.6",
                                          "test_desc": "Ensure that the --protect-kernel-defaults argument is set to true (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "FAIL",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.protectKernelDefaults}' is present"
                                      },
                                      {
                                          "test_number": "4.2.7",
                                          "test_desc": "Ensure that the --make-iptables-util-chains argument is set to true (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.makeIPTablesUtilChains}' is present OR '{.makeIPTablesUtilChains}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.8",
                                          "test_desc": "Ensure that the --hostname-override argument is not set (Manual)",
                                          "audit": "/bin/ps -fC kubelet ",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "",
                                          "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "UID        PID  PPID  C STIME TTY          TIME CMD\nroot     31573     1  5 Feb14 ?        01:43:46 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.4.1",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'--hostname-override' is not present"
                                      },
                                      {
                                          "test_number": "4.2.9",
                                          "test_desc": "Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.eventRecordQPS}' is present"
                                      },
                                      {
                                          "test_number": "4.2.10",
                                          "test_desc": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.tlsCertFile}' is present AND '{.tlsPrivateKeyFile}' is present"
                                      },
                                      {
                                          "test_number": "4.2.11",
                                          "test_desc": "Ensure that the --rotate-certificates argument is not set to false (Automated)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": true,
                                          "IsMultiple": false,
                                          "expected_result": "'{.rotateCertificates}' is equal to 'true' OR '{.rotateCertificates}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.12",
                                          "test_desc": "Verify that the RotateKubeletServerCertificate argument is set to true (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "PASS",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{.featureGates.RotateKubeletServerCertificate}' is present OR '{.featureGates.RotateKubeletServerCertificate}' is not present"
                                      },
                                      {
                                          "test_number": "4.2.13",
                                          "test_desc": "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)",
                                          "audit": "/bin/ps -fC kubelet",
                                          "AuditEnv": "",
                                          "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                          "type": "",
                                          "remediation": "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                          "test_info": [
                                              "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "'{range .tlsCipherSuites[:]}{}{','}{end}' is present"
                                      }
                                  ]
                              }
                          ],
                          "total_pass": 19,
                          "total_fail": 1,
                          "total_warn": 3,
                          "total_info": 0,
                          "createTime": "2023-02-15T15:19:14Z",
                          "node_name": "inspectionpolicy-sample-kubebench-daemonset-7qjdg"
                      }
                  },
                  {
                      "_index": "cis_report",
                      "_id": "kubebench-Report_2023-02-15T15:19:14Z_8h47l",
                      "_score": 1,
                      "_source": {
                          "id": "5",
                          "version": "cis-1.20",
                          "detected_version": "1.21",
                          "text": "Kubernetes Policies",
                          "node_type": "policies",
                          "tests": [
                              {
                                  "section": "5.1",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 8,
                                  "info": 0,
                                  "desc": "RBAC and Service Accounts",
                                  "results": [
                                      {
                                          "test_number": "5.1.1",
                                          "test_desc": "Ensure that the cluster-admin role is only used where required (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n",
                                          "test_info": [
                                              "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.2",
                                          "test_desc": "Minimize access to secrets (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible, remove get, list and watch access to secret objects in the cluster.\n",
                                          "test_info": [
                                              "Where possible, remove get, list and watch access to secret objects in the cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.3",
                                          "test_desc": "Minimize wildcard use in Roles and ClusterRoles (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n",
                                          "test_info": [
                                              "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.4",
                                          "test_desc": "Minimize access to create pods (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible, remove create access to pod objects in the cluster.\n",
                                          "test_info": [
                                              "Where possible, remove create access to pod objects in the cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.5",
                                          "test_desc": "Ensure that default service accounts are not actively used. (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n",
                                          "test_info": [
                                              "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.6",
                                          "test_desc": "Ensure that Service Account Tokens are only mounted where necessary (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n",
                                          "test_info": [
                                              "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.7",
                                          "test_desc": "Avoid use of system:masters group (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Remove the system:masters group from all users in the cluster.\n",
                                          "test_info": [
                                              "Remove the system:masters group from all users in the cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.1.8",
                                          "test_desc": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Where possible, remove the impersonate, bind and escalate rights from subjects.\n",
                                          "test_info": [
                                              "Where possible, remove the impersonate, bind and escalate rights from subjects.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.2",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 9,
                                  "info": 0,
                                  "desc": "Pod Security Policies",
                                  "results": [
                                      {
                                          "test_number": "5.2.1",
                                          "test_desc": "Minimize the admission of privileged containers (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.2",
                                          "test_desc": "Minimize the admission of containers wishing to share the host process ID namespace (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.3",
                                          "test_desc": "Minimize the admission of containers wishing to share the host IPC namespace (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.4",
                                          "test_desc": "Minimize the admission of containers wishing to share the host network namespace (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.5",
                                          "test_desc": "Minimize the admission of containers with allowPrivilegeEscalation (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.6",
                                          "test_desc": "Minimize the admission of root containers (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.7",
                                          "test_desc": "Minimize the admission of containers with the NET_RAW capability (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n",
                                          "test_info": [
                                              "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.8",
                                          "test_desc": "Minimize the admission of containers with added capabilities (Automated)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n",
                                          "test_info": [
                                              "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.2.9",
                                          "test_desc": "Minimize the admission of containers with capabilities assigned (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n",
                                          "test_info": [
                                              "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.3",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 2,
                                  "info": 0,
                                  "desc": "Network Policies and CNI",
                                  "results": [
                                      {
                                          "test_number": "5.3.1",
                                          "test_desc": "Ensure that the CNI in use supports Network Policies (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n",
                                          "test_info": [
                                              "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.3.2",
                                          "test_desc": "Ensure that all Namespaces have Network Policies defined (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the documentation and create NetworkPolicy objects as you need them.\n",
                                          "test_info": [
                                              "Follow the documentation and create NetworkPolicy objects as you need them.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.4",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 2,
                                  "info": 0,
                                  "desc": "Secrets Management",
                                  "results": [
                                      {
                                          "test_number": "5.4.1",
                                          "test_desc": "Prefer using secrets as files over secrets as environment variables (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n",
                                          "test_info": [
                                              "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.4.2",
                                          "test_desc": "Consider external secret storage (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n",
                                          "test_info": [
                                              "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.5",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 1,
                                  "info": 0,
                                  "desc": "Extensible Admission Control",
                                  "results": [
                                      {
                                          "test_number": "5.5.1",
                                          "test_desc": "Configure Image Provenance using ImagePolicyWebhook admission controller (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the Kubernetes documentation and setup image provenance.\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and setup image provenance.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              },
                              {
                                  "section": "5.7",
                                  "type": "",
                                  "pass": 0,
                                  "fail": 0,
                                  "warn": 4,
                                  "info": 0,
                                  "desc": "General Policies",
                                  "results": [
                                      {
                                          "test_number": "5.7.1",
                                          "test_desc": "Create administrative boundaries between resources using namespaces (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n",
                                          "test_info": [
                                              "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.7.2",
                                          "test_desc": "Ensure that the seccomp profile is set to docker/default in your pod definitions (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n",
                                          "test_info": [
                                              "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.7.3",
                                          "test_desc": "Apply Security Context to Your Pods and Containers (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n",
                                          "test_info": [
                                              "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      },
                                      {
                                          "test_number": "5.7.4",
                                          "test_desc": "The default namespace should not be used (Manual)",
                                          "audit": "",
                                          "AuditEnv": "",
                                          "AuditConfig": "",
                                          "type": "manual",
                                          "remediation": "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n",
                                          "test_info": [
                                              "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n"
                                          ],
                                          "status": "WARN",
                                          "actual_value": "",
                                          "scored": false,
                                          "IsMultiple": false,
                                          "expected_result": "",
                                          "reason": "Test marked as a manual test"
                                      }
                                  ]
                              }
                          ],
                          "total_pass": 0,
                          "total_fail": 0,
                          "total_warn": 26,
                          "total_info": 0,
                          "createTime": "2023-02-15T15:19:14Z",
                          "node_name": "inspectionpolicy-sample-kubebench-daemonset-7qjdg"
                      }
                  }
              ]
          }
      }, component)
      component.getKubeBenchReportList({
        "value": "Kubernetes Policies",
        "key": "text",
        "reset": true
      })


      component.createTimeSort()
      component.getKubeBenchReportList({
        "value": "Worker Node Security Configuration",
        "key": "text",
        "reset": true
      })
      component.initKubeBenchReportListCallBack({
        "took": 16,
        "timed_out": false,
        "_shards": {
            "total": 1,
            "successful": 1,
            "skipped": 0,
            "failed": 0
        },
        "hits": {
            "total": {
                "value": 2,
                "relation": "eq"
            },
            "max_score": null,
            "hits": [
                {
                    "_index": "cis_report",
                    "_id": "kubebench-Report_2023-02-15T15:19:14Z_4q7dm",
                    "_score": null,
                    "_source": {
                        "id": "4",
                        "version": "cis-1.20",
                        "detected_version": "1.21",
                        "text": "Worker Node Security Configuration",
                        "node_type": "node",
                        "tests": [
                            {
                                "section": "4.1",
                                "type": "",
                                "pass": 10,
                                "fail": 0,
                                "warn": 0,
                                "info": 0,
                                "desc": "Worker Node Configuration Files",
                                "results": [
                                    {
                                        "test_number": "4.1.1",
                                        "test_desc": "Ensure that the kubelet service file permissions are set to 644 or more restrictive (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c permissions=%a /lib/systemd/system/kubelet.service; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "permissions=644",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                    },
                                    {
                                        "test_number": "4.1.2",
                                        "test_desc": "Ensure that the kubelet service file ownership is set to root:root (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c %U:%G /lib/systemd/system/kubelet.service; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "root:root",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'root:root' is present"
                                    },
                                    {
                                        "test_number": "4.1.3",
                                        "test_desc": "If proxy kubeconfig file exists ensure permissions are set to 644 or more restrictive (Manual)",
                                        "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c permissions=%a /etc/kubernetes/proxy.conf; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'permissions' is present OR '/etc/kubernetes/proxy.conf' is not present"
                                    },
                                    {
                                        "test_number": "4.1.4",
                                        "test_desc": "If proxy kubeconfig file exists ensure ownership is set to root:root (Manual)",
                                        "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c %U:%G /etc/kubernetes/proxy.conf; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'root:root' is present OR '/etc/kubernetes/proxy.conf' is not present"
                                    },
                                    {
                                        "test_number": "4.1.5",
                                        "test_desc": "Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c permissions=%a /etc/kubernetes/kubelet.conf; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "permissions=600",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                    },
                                    {
                                        "test_number": "4.1.6",
                                        "test_desc": "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c %U:%G /etc/kubernetes/kubelet.conf; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "root:root",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'root:root' is present"
                                    },
                                    {
                                        "test_number": "4.1.7",
                                        "test_desc": "Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Manual)",
                                        "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi\n",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n",
                                        "test_info": [
                                            "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "permissions=644",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                    },
                                    {
                                        "test_number": "4.1.8",
                                        "test_desc": "Ensure that the client certificate authorities file ownership is set to root:root (Manual)",
                                        "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c %U:%G $CAFILE; fi\n",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n",
                                        "test_info": [
                                            "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "root:root",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'root:root' is equal to 'root:root'"
                                    },
                                    {
                                        "test_number": "4.1.9",
                                        "test_desc": "Ensure that the kubelet --config configuration file has permissions set to 644 or more restrictive (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c permissions=%a /var/lib/kubelet/config.yaml; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n",
                                        "test_info": [
                                            "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "permissions=644",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                    },
                                    {
                                        "test_number": "4.1.10",
                                        "test_desc": "Ensure that the kubelet --config configuration file ownership is set to root:root (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c %U:%G /var/lib/kubelet/config.yaml; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n",
                                        "test_info": [
                                            "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "root:root",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'root:root' is present"
                                    }
                                ]
                            },
                            {
                                "section": "4.2",
                                "type": "",
                                "pass": 9,
                                "fail": 1,
                                "warn": 3,
                                "info": 0,
                                "desc": "Kubelet",
                                "results": [
                                    {
                                        "test_number": "4.2.1",
                                        "test_desc": "Ensure that the anonymous-auth argument is set to false (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.authentication.anonymous.enabled}' is equal to 'false'"
                                    },
                                    {
                                        "test_number": "4.2.2",
                                        "test_desc": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.authorization.mode}' does not have 'AlwaysAllow'"
                                    },
                                    {
                                        "test_number": "4.2.3",
                                        "test_desc": "Ensure that the --client-ca-file argument is set as appropriate (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.authentication.x509.clientCAFile}' is present"
                                    },
                                    {
                                        "test_number": "4.2.4",
                                        "test_desc": "Ensure that the --read-only-port argument is set to 0 (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{.readOnlyPort}' is present OR '{.readOnlyPort}' is not present"
                                    },
                                    {
                                        "test_number": "4.2.5",
                                        "test_desc": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{.streamingConnectionIdleTimeout}' is not equal to '0' OR '{.streamingConnectionIdleTimeout}' is not present"
                                    },
                                    {
                                        "test_number": "4.2.6",
                                        "test_desc": "Ensure that the --protect-kernel-defaults argument is set to true (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "FAIL",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.protectKernelDefaults}' is present"
                                    },
                                    {
                                        "test_number": "4.2.7",
                                        "test_desc": "Ensure that the --make-iptables-util-chains argument is set to true (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.makeIPTablesUtilChains}' is present OR '{.makeIPTablesUtilChains}' is not present"
                                    },
                                    {
                                        "test_number": "4.2.8",
                                        "test_desc": "Ensure that the --hostname-override argument is not set (Manual)",
                                        "audit": "/bin/ps -fC kubelet ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "UID        PID  PPID  C STIME TTY          TIME CMD\nroot     16510     1  4 Feb14 ?        01:25:22 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.4.1",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'--hostname-override' is not present"
                                    },
                                    {
                                        "test_number": "4.2.9",
                                        "test_desc": "Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{.eventRecordQPS}' is present"
                                    },
                                    {
                                        "test_number": "4.2.10",
                                        "test_desc": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{.tlsCertFile}' is present AND '{.tlsPrivateKeyFile}' is present"
                                    },
                                    {
                                        "test_number": "4.2.11",
                                        "test_desc": "Ensure that the --rotate-certificates argument is not set to false (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.rotateCertificates}' is equal to 'true' OR '{.rotateCertificates}' is not present"
                                    },
                                    {
                                        "test_number": "4.2.12",
                                        "test_desc": "Verify that the RotateKubeletServerCertificate argument is set to true (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{.featureGates.RotateKubeletServerCertificate}' is present OR '{.featureGates.RotateKubeletServerCertificate}' is not present"
                                    },
                                    {
                                        "test_number": "4.2.13",
                                        "test_desc": "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{range .tlsCipherSuites[:]}{}{','}{end}' is present"
                                    }
                                ]
                            }
                        ],
                        "total_pass": 19,
                        "total_fail": 1,
                        "total_warn": 3,
                        "total_info": 0,
                        "createTime": "2023-02-15T15:19:14Z",
                        "node_name": "inspectionpolicy-sample-kubebench-daemonset-s2dql"
                    },
                    "sort": [
                        1676474354000
                    ]
                },
                {
                    "_index": "cis_report",
                    "_id": "kubebench-Report_2023-02-15T15:19:14Z_5tnbd",
                    "_score": null,
                    "_source": {
                        "id": "5",
                        "version": "cis-1.20",
                        "detected_version": "1.21",
                        "text": "Kubernetes Policies",
                        "node_type": "policies",
                        "tests": [
                            {
                                "section": "5.1",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 8,
                                "info": 0,
                                "desc": "RBAC and Service Accounts",
                                "results": [
                                    {
                                        "test_number": "5.1.1",
                                        "test_desc": "Ensure that the cluster-admin role is only used where required (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n",
                                        "test_info": [
                                            "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.2",
                                        "test_desc": "Minimize access to secrets (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Where possible, remove get, list and watch access to secret objects in the cluster.\n",
                                        "test_info": [
                                            "Where possible, remove get, list and watch access to secret objects in the cluster.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.3",
                                        "test_desc": "Minimize wildcard use in Roles and ClusterRoles (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n",
                                        "test_info": [
                                            "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.4",
                                        "test_desc": "Minimize access to create pods (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Where possible, remove create access to pod objects in the cluster.\n",
                                        "test_info": [
                                            "Where possible, remove create access to pod objects in the cluster.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.5",
                                        "test_desc": "Ensure that default service accounts are not actively used. (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n",
                                        "test_info": [
                                            "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.6",
                                        "test_desc": "Ensure that Service Account Tokens are only mounted where necessary (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n",
                                        "test_info": [
                                            "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.7",
                                        "test_desc": "Avoid use of system:masters group (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Remove the system:masters group from all users in the cluster.\n",
                                        "test_info": [
                                            "Remove the system:masters group from all users in the cluster.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.8",
                                        "test_desc": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Where possible, remove the impersonate, bind and escalate rights from subjects.\n",
                                        "test_info": [
                                            "Where possible, remove the impersonate, bind and escalate rights from subjects.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            },
                            {
                                "section": "5.2",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 9,
                                "info": 0,
                                "desc": "Pod Security Policies",
                                "results": [
                                    {
                                        "test_number": "5.2.1",
                                        "test_desc": "Minimize the admission of privileged containers (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.2",
                                        "test_desc": "Minimize the admission of containers wishing to share the host process ID namespace (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.3",
                                        "test_desc": "Minimize the admission of containers wishing to share the host IPC namespace (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.4",
                                        "test_desc": "Minimize the admission of containers wishing to share the host network namespace (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.5",
                                        "test_desc": "Minimize the admission of containers with allowPrivilegeEscalation (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.6",
                                        "test_desc": "Minimize the admission of root containers (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.7",
                                        "test_desc": "Minimize the admission of containers with the NET_RAW capability (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.8",
                                        "test_desc": "Minimize the admission of containers with added capabilities (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n",
                                        "test_info": [
                                            "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.9",
                                        "test_desc": "Minimize the admission of containers with capabilities assigned (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n",
                                        "test_info": [
                                            "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            },
                            {
                                "section": "5.3",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 2,
                                "info": 0,
                                "desc": "Network Policies and CNI",
                                "results": [
                                    {
                                        "test_number": "5.3.1",
                                        "test_desc": "Ensure that the CNI in use supports Network Policies (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n",
                                        "test_info": [
                                            "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.3.2",
                                        "test_desc": "Ensure that all Namespaces have Network Policies defined (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Follow the documentation and create NetworkPolicy objects as you need them.\n",
                                        "test_info": [
                                            "Follow the documentation and create NetworkPolicy objects as you need them.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            },
                            {
                                "section": "5.4",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 2,
                                "info": 0,
                                "desc": "Secrets Management",
                                "results": [
                                    {
                                        "test_number": "5.4.1",
                                        "test_desc": "Prefer using secrets as files over secrets as environment variables (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n",
                                        "test_info": [
                                            "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.4.2",
                                        "test_desc": "Consider external secret storage (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n",
                                        "test_info": [
                                            "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            },
                            {
                                "section": "5.5",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 1,
                                "info": 0,
                                "desc": "Extensible Admission Control",
                                "results": [
                                    {
                                        "test_number": "5.5.1",
                                        "test_desc": "Configure Image Provenance using ImagePolicyWebhook admission controller (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Follow the Kubernetes documentation and setup image provenance.\n",
                                        "test_info": [
                                            "Follow the Kubernetes documentation and setup image provenance.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            },
                            {
                                "section": "5.7",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 4,
                                "info": 0,
                                "desc": "General Policies",
                                "results": [
                                    {
                                        "test_number": "5.7.1",
                                        "test_desc": "Create administrative boundaries between resources using namespaces (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n",
                                        "test_info": [
                                            "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.7.2",
                                        "test_desc": "Ensure that the seccomp profile is set to docker/default in your pod definitions (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n",
                                        "test_info": [
                                            "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.7.3",
                                        "test_desc": "Apply Security Context to Your Pods and Containers (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n",
                                        "test_info": [
                                            "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.7.4",
                                        "test_desc": "The default namespace should not be used (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n",
                                        "test_info": [
                                            "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            }
                        ],
                        "total_pass": 0,
                        "total_fail": 0,
                        "total_warn": 26,
                        "total_info": 0,
                        "createTime": "2023-02-15T15:19:14Z",
                        "node_name": "inspectionpolicy-sample-kubebench-daemonset-s2dql"
                    },
                    "sort": [
                        1676474354000
                    ]
                }
            ]
        }
      }, component)

      component.getKubeBenchReportListCallBack({
        "took": 16,
        "timed_out": false,
        "_shards": {
            "total": 1,
            "successful": 1,
            "skipped": 0,
            "failed": 0
        },
        "hits": {
            "total": {
                "value": 2,
                "relation": "eq"
            },
            "max_score": null,
            "hits": [
                {
                    "_index": "cis_report",
                    "_id": "kubebench-Report_2023-02-15T15:19:14Z_4q7dm",
                    "_score": null,
                    "_source": {
                        "id": "4",
                        "version": "cis-1.20",
                        "detected_version": "1.21",
                        "text": "Worker Node Security Configuration",
                        "node_type": "node",
                        "tests": [
                            {
                                "section": "4.1",
                                "type": "",
                                "pass": 10,
                                "fail": 0,
                                "warn": 0,
                                "info": 0,
                                "desc": "Worker Node Configuration Files",
                                "results": [
                                    {
                                        "test_number": "4.1.1",
                                        "test_desc": "Ensure that the kubelet service file permissions are set to 644 or more restrictive (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c permissions=%a /lib/systemd/system/kubelet.service; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /lib/systemd/system/kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "permissions=644",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                    },
                                    {
                                        "test_number": "4.1.2",
                                        "test_desc": "Ensure that the kubelet service file ownership is set to root:root (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /lib/systemd/system/kubelet.service; then stat -c %U:%G /lib/systemd/system/kubelet.service; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /lib/systemd/system/kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "root:root",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'root:root' is present"
                                    },
                                    {
                                        "test_number": "4.1.3",
                                        "test_desc": "If proxy kubeconfig file exists ensure permissions are set to 644 or more restrictive (Manual)",
                                        "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c permissions=%a /etc/kubernetes/proxy.conf; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/proxy.conf\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'permissions' is present OR '/etc/kubernetes/proxy.conf' is not present"
                                    },
                                    {
                                        "test_number": "4.1.4",
                                        "test_desc": "If proxy kubeconfig file exists ensure ownership is set to root:root (Manual)",
                                        "audit": "/bin/sh -c 'if test -e /etc/kubernetes/proxy.conf; then stat -c %U:%G /etc/kubernetes/proxy.conf; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example, chown root:root /etc/kubernetes/proxy.conf\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'root:root' is present OR '/etc/kubernetes/proxy.conf' is not present"
                                    },
                                    {
                                        "test_number": "4.1.5",
                                        "test_desc": "Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c permissions=%a /etc/kubernetes/kubelet.conf; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchmod 644 /etc/kubernetes/kubelet.conf\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "permissions=600",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "permissions has permissions 600, expected 644 or more restrictive"
                                    },
                                    {
                                        "test_number": "4.1.6",
                                        "test_desc": "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /etc/kubernetes/kubelet.conf; then stat -c %U:%G /etc/kubernetes/kubelet.conf; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n",
                                        "test_info": [
                                            "Run the below command (based on the file location on your system) on the each worker node.\nFor example,\nchown root:root /etc/kubernetes/kubelet.conf\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "root:root",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'root:root' is present"
                                    },
                                    {
                                        "test_number": "4.1.7",
                                        "test_desc": "Ensure that the certificate authorities file permissions are set to 644 or more restrictive (Manual)",
                                        "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c permissions=%a $CAFILE; fi\n",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n",
                                        "test_info": [
                                            "Run the following command to modify the file permissions of the\n--client-ca-file chmod 644 <filename>\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "permissions=644",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                    },
                                    {
                                        "test_number": "4.1.8",
                                        "test_desc": "Ensure that the client certificate authorities file ownership is set to root:root (Manual)",
                                        "audit": "CAFILE=$(ps -ef | grep kubelet | grep -v apiserver | grep -- --client-ca-file= | awk -F '--client-ca-file=' '{print $2}' | awk '{print $1}')\nif test -z $CAFILE; then CAFILE=/etc/kubernetes/pki/ca.crt; fi\nif test -e $CAFILE; then stat -c %U:%G $CAFILE; fi\n",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n",
                                        "test_info": [
                                            "Run the following command to modify the ownership of the --client-ca-file.\nchown root:root <filename>\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "root:root",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'root:root' is equal to 'root:root'"
                                    },
                                    {
                                        "test_number": "4.1.9",
                                        "test_desc": "Ensure that the kubelet --config configuration file has permissions set to 644 or more restrictive (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c permissions=%a /var/lib/kubelet/config.yaml; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n",
                                        "test_info": [
                                            "Run the following command (using the config file location identified in the Audit step)\nchmod 644 /var/lib/kubelet/config.yaml\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "permissions=644",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "permissions has permissions 644, expected 644 or more restrictive"
                                    },
                                    {
                                        "test_number": "4.1.10",
                                        "test_desc": "Ensure that the kubelet --config configuration file ownership is set to root:root (Automated)",
                                        "audit": "/bin/sh -c 'if test -e /var/lib/kubelet/config.yaml; then stat -c %U:%G /var/lib/kubelet/config.yaml; fi' ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n",
                                        "test_info": [
                                            "Run the following command (using the config file location identified in the Audit step)\nchown root:root /var/lib/kubelet/config.yaml\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "root:root",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'root:root' is present"
                                    }
                                ]
                            },
                            {
                                "section": "4.2",
                                "type": "",
                                "pass": 9,
                                "fail": 1,
                                "warn": 3,
                                "info": 0,
                                "desc": "Kubelet",
                                "results": [
                                    {
                                        "test_number": "4.2.1",
                                        "test_desc": "Ensure that the anonymous-auth argument is set to false (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set authentication: anonymous: enabled to\nfalse.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--anonymous-auth=false\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.authentication.anonymous.enabled}' is equal to 'false'"
                                    },
                                    {
                                        "test_number": "4.2.2",
                                        "test_desc": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set authorization: mode to Webhook. If\nusing executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--authorization-mode=Webhook\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.authorization.mode}' does not have 'AlwaysAllow'"
                                    },
                                    {
                                        "test_number": "4.2.3",
                                        "test_desc": "Ensure that the --client-ca-file argument is set as appropriate (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set authentication: x509: clientCAFile to\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_AUTHZ_ARGS variable.\n--client-ca-file=<path/to/client-ca-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.authentication.x509.clientCAFile}' is present"
                                    },
                                    {
                                        "test_number": "4.2.4",
                                        "test_desc": "Ensure that the --read-only-port argument is set to 0 (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set readOnlyPort to 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--read-only-port=0\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{.readOnlyPort}' is present OR '{.readOnlyPort}' is not present"
                                    },
                                    {
                                        "test_number": "4.2.5",
                                        "test_desc": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set streamingConnectionIdleTimeout to a\nvalue other than 0.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--streaming-connection-idle-timeout=5m\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{.streamingConnectionIdleTimeout}' is not equal to '0' OR '{.streamingConnectionIdleTimeout}' is not present"
                                    },
                                    {
                                        "test_number": "4.2.6",
                                        "test_desc": "Ensure that the --protect-kernel-defaults argument is set to true (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set protectKernelDefaults: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\n--protect-kernel-defaults=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "FAIL",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.protectKernelDefaults}' is present"
                                    },
                                    {
                                        "test_number": "4.2.7",
                                        "test_desc": "Ensure that the --make-iptables-util-chains argument is set to true (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set makeIPTablesUtilChains: true.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove the --make-iptables-util-chains argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.makeIPTablesUtilChains}' is present OR '{.makeIPTablesUtilChains}' is not present"
                                    },
                                    {
                                        "test_number": "4.2.8",
                                        "test_desc": "Ensure that the --hostname-override argument is not set (Manual)",
                                        "audit": "/bin/ps -fC kubelet ",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "",
                                        "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and remove the --hostname-override argument from the\nKUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "UID        PID  PPID  C STIME TTY          TIME CMD\nroot     16510     1  4 Feb14 ?        01:25:22 /usr/bin/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf --config=/var/lib/kubelet/config.yaml --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.4.1",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'--hostname-override' is not present"
                                    },
                                    {
                                        "test_number": "4.2.9",
                                        "test_desc": "Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set eventRecordQPS: to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameter in KUBELET_SYSTEM_PODS_ARGS variable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{.eventRecordQPS}' is present"
                                    },
                                    {
                                        "test_number": "4.2.10",
                                        "test_desc": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set tlsCertFile to the location\nof the certificate file to use to identify this Kubelet, and tlsPrivateKeyFile\nto the location of the corresponding private key file.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{.tlsCertFile}' is present AND '{.tlsPrivateKeyFile}' is present"
                                    },
                                    {
                                        "test_number": "4.2.11",
                                        "test_desc": "Ensure that the --rotate-certificates argument is not set to false (Automated)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to add the line rotateCertificates: true or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nremove --rotate-certificates=false argument from the KUBELET_CERTIFICATE_ARGS\nvariable.\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": true,
                                        "IsMultiple": false,
                                        "expected_result": "'{.rotateCertificates}' is equal to 'true' OR '{.rotateCertificates}' is not present"
                                    },
                                    {
                                        "test_number": "4.2.12",
                                        "test_desc": "Verify that the RotateKubeletServerCertificate argument is set to true (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "Edit the kubelet service file /lib/systemd/system/kubelet.service\non each worker node and set the below parameter in KUBELET_CERTIFICATE_ARGS variable.\n--feature-gates=RotateKubeletServerCertificate=true\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "PASS",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{.featureGates.RotateKubeletServerCertificate}' is present OR '{.featureGates.RotateKubeletServerCertificate}' is not present"
                                    },
                                    {
                                        "test_number": "4.2.13",
                                        "test_desc": "Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers (Manual)",
                                        "audit": "/bin/ps -fC kubelet",
                                        "AuditEnv": "",
                                        "AuditConfig": "/bin/cat /var/lib/kubelet/config.yaml",
                                        "type": "",
                                        "remediation": "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n",
                                        "test_info": [
                                            "If using a Kubelet config file, edit the file to set TLSCipherSuites: to\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nor to a subset of these values.\nIf using executable arguments, edit the kubelet service file\n/lib/systemd/system/kubelet.service on each worker node and\nset the --tls-cipher-suites parameter as follows, or to a subset of these values.\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\nBased on your system, restart the kubelet service. For example:\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "apiVersion: kubelet.config.k8s.io/v1beta1\nauthentication:\n  anonymous:\n    enabled: false\n  webhook:\n    cacheTTL: 0s\n    enabled: true\n  x509:\n    clientCAFile: /etc/kubernetes/pki/ca.crt\nauthorization:\n  mode: Webhook\n  webhook:\n    cacheAuthorizedTTL: 0s\n    cacheUnauthorizedTTL: 0s\ncgroupDriver: cgroupfs\nclusterDNS:\n- 10.96.0.10\nclusterDomain: cluster.local\ncpuManagerReconcilePeriod: 0s\nevictionPressureTransitionPeriod: 0s\nfileCheckFrequency: 0s\nhealthzBindAddress: 127.0.0.1\nhealthzPort: 10248\nhttpCheckFrequency: 0s\nimageMinimumGCAge: 0s\nkind: KubeletConfiguration\nlogging: {}\nnodeStatusReportFrequency: 0s\nnodeStatusUpdateFrequency: 0s\nrotateCertificates: true\nruntimeRequestTimeout: 0s\nshutdownGracePeriod: 0s\nshutdownGracePeriodCriticalPods: 0s\nstaticPodPath: /etc/kubernetes/manifests\nstreamingConnectionIdleTimeout: 0s\nsyncFrequency: 0s\nvolumeStatsAggPeriod: 0s",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "'{range .tlsCipherSuites[:]}{}{','}{end}' is present"
                                    }
                                ]
                            }
                        ],
                        "total_pass": 19,
                        "total_fail": 1,
                        "total_warn": 3,
                        "total_info": 0,
                        "createTime": "2023-02-15T15:19:14Z",
                        "node_name": "inspectionpolicy-sample-kubebench-daemonset-s2dql"
                    },
                    "sort": [
                        1676474354000
                    ]
                },
                {
                    "_index": "cis_report",
                    "_id": "kubebench-Report_2023-02-15T15:19:14Z_5tnbd",
                    "_score": null,
                    "_source": {
                        "id": "5",
                        "version": "cis-1.20",
                        "detected_version": "1.21",
                        "text": "Kubernetes Policies",
                        "node_type": "policies",
                        "tests": [
                            {
                                "section": "5.1",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 8,
                                "info": 0,
                                "desc": "RBAC and Service Accounts",
                                "results": [
                                    {
                                        "test_number": "5.1.1",
                                        "test_desc": "Ensure that the cluster-admin role is only used where required (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n",
                                        "test_info": [
                                            "Identify all clusterrolebindings to the cluster-admin role. Check if they are used and\nif they need this role or if they could use a role with fewer privileges.\nWhere possible, first bind users to a lower privileged role and then remove the\nclusterrolebinding to the cluster-admin role :\nkubectl delete clusterrolebinding [name]\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.2",
                                        "test_desc": "Minimize access to secrets (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Where possible, remove get, list and watch access to secret objects in the cluster.\n",
                                        "test_info": [
                                            "Where possible, remove get, list and watch access to secret objects in the cluster.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.3",
                                        "test_desc": "Minimize wildcard use in Roles and ClusterRoles (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n",
                                        "test_info": [
                                            "Where possible replace any use of wildcards in clusterroles and roles with specific\nobjects or actions.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.4",
                                        "test_desc": "Minimize access to create pods (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Where possible, remove create access to pod objects in the cluster.\n",
                                        "test_info": [
                                            "Where possible, remove create access to pod objects in the cluster.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.5",
                                        "test_desc": "Ensure that default service accounts are not actively used. (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n",
                                        "test_info": [
                                            "Create explicit service accounts wherever a Kubernetes workload requires specific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\nautomountServiceAccountToken: false\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.6",
                                        "test_desc": "Ensure that Service Account Tokens are only mounted where necessary (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n",
                                        "test_info": [
                                            "Modify the definition of pods and service accounts which do not need to mount service\naccount tokens to disable it.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.7",
                                        "test_desc": "Avoid use of system:masters group (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Remove the system:masters group from all users in the cluster.\n",
                                        "test_info": [
                                            "Remove the system:masters group from all users in the cluster.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.1.8",
                                        "test_desc": "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Where possible, remove the impersonate, bind and escalate rights from subjects.\n",
                                        "test_info": [
                                            "Where possible, remove the impersonate, bind and escalate rights from subjects.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            },
                            {
                                "section": "5.2",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 9,
                                "info": 0,
                                "desc": "Pod Security Policies",
                                "results": [
                                    {
                                        "test_number": "5.2.1",
                                        "test_desc": "Minimize the admission of privileged containers (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that\nthe .spec.privileged field is omitted or set to false.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.2",
                                        "test_desc": "Minimize the admission of containers wishing to share the host process ID namespace (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostPID field is omitted or set to false.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.3",
                                        "test_desc": "Minimize the admission of containers wishing to share the host IPC namespace (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostIPC field is omitted or set to false.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.4",
                                        "test_desc": "Minimize the admission of containers wishing to share the host network namespace (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.hostNetwork field is omitted or set to false.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.5",
                                        "test_desc": "Minimize the admission of containers with allowPrivilegeEscalation (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.allowPrivilegeEscalation field is omitted or set to false.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.6",
                                        "test_desc": "Minimize the admission of root containers (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of\nUIDs not including 0.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.7",
                                        "test_desc": "Minimize the admission of containers with the NET_RAW capability (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n",
                                        "test_info": [
                                            "Create a PSP as described in the Kubernetes documentation, ensuring that the\n.spec.requiredDropCapabilities is set to include either NET_RAW or ALL.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.8",
                                        "test_desc": "Minimize the admission of containers with added capabilities (Automated)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n",
                                        "test_info": [
                                            "Ensure that allowedCapabilities is not present in PSPs for the cluster unless\nit is set to an empty array.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.2.9",
                                        "test_desc": "Minimize the admission of containers with capabilities assigned (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n",
                                        "test_info": [
                                            "Review the use of capabilites in applications running on your cluster. Where a namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na PSP which forbids the admission of containers which do not drop all capabilities.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            },
                            {
                                "section": "5.3",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 2,
                                "info": 0,
                                "desc": "Network Policies and CNI",
                                "results": [
                                    {
                                        "test_number": "5.3.1",
                                        "test_desc": "Ensure that the CNI in use supports Network Policies (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n",
                                        "test_info": [
                                            "If the CNI plugin in use does not support network policies, consideration should be given to\nmaking use of a different plugin, or finding an alternate mechanism for restricting traffic\nin the Kubernetes cluster.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.3.2",
                                        "test_desc": "Ensure that all Namespaces have Network Policies defined (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Follow the documentation and create NetworkPolicy objects as you need them.\n",
                                        "test_info": [
                                            "Follow the documentation and create NetworkPolicy objects as you need them.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            },
                            {
                                "section": "5.4",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 2,
                                "info": 0,
                                "desc": "Secrets Management",
                                "results": [
                                    {
                                        "test_number": "5.4.1",
                                        "test_desc": "Prefer using secrets as files over secrets as environment variables (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n",
                                        "test_info": [
                                            "if possible, rewrite application code to read secrets from mounted secret files, rather than\nfrom environment variables.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.4.2",
                                        "test_desc": "Consider external secret storage (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n",
                                        "test_info": [
                                            "Refer to the secrets management options offered by your cloud provider or a third-party\nsecrets management solution.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            },
                            {
                                "section": "5.5",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 1,
                                "info": 0,
                                "desc": "Extensible Admission Control",
                                "results": [
                                    {
                                        "test_number": "5.5.1",
                                        "test_desc": "Configure Image Provenance using ImagePolicyWebhook admission controller (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Follow the Kubernetes documentation and setup image provenance.\n",
                                        "test_info": [
                                            "Follow the Kubernetes documentation and setup image provenance.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            },
                            {
                                "section": "5.7",
                                "type": "",
                                "pass": 0,
                                "fail": 0,
                                "warn": 4,
                                "info": 0,
                                "desc": "General Policies",
                                "results": [
                                    {
                                        "test_number": "5.7.1",
                                        "test_desc": "Create administrative boundaries between resources using namespaces (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n",
                                        "test_info": [
                                            "Follow the documentation and create namespaces for objects in your deployment as you need\nthem.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.7.2",
                                        "test_desc": "Ensure that the seccomp profile is set to docker/default in your pod definitions (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n",
                                        "test_info": [
                                            "Use security context to enable the docker/default seccomp profile in your pod definitions.\nAn example is as below:\n  securityContext:\n    seccompProfile:\n      type: RuntimeDefault\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.7.3",
                                        "test_desc": "Apply Security Context to Your Pods and Containers (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n",
                                        "test_info": [
                                            "Follow the Kubernetes documentation and apply security contexts to your pods. For a\nsuggested list of security contexts, you may refer to the CIS Security Benchmark for Docker\nContainers.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    },
                                    {
                                        "test_number": "5.7.4",
                                        "test_desc": "The default namespace should not be used (Manual)",
                                        "audit": "",
                                        "AuditEnv": "",
                                        "AuditConfig": "",
                                        "type": "manual",
                                        "remediation": "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n",
                                        "test_info": [
                                            "Ensure that namespaces are created to allow for appropriate segregation of Kubernetes\nresources and that all new resources are created in a specific namespace.\n"
                                        ],
                                        "status": "WARN",
                                        "actual_value": "",
                                        "scored": false,
                                        "IsMultiple": false,
                                        "expected_result": "",
                                        "reason": "Test marked as a manual test"
                                    }
                                ]
                            }
                        ],
                        "total_pass": 0,
                        "total_fail": 0,
                        "total_warn": 26,
                        "total_info": 0,
                        "createTime": "2023-02-15T15:19:14Z",
                        "node_name": "inspectionpolicy-sample-kubebench-daemonset-s2dql"
                    },
                    "sort": [
                        1676474354000
                    ]
                }
            ]
        }
      }, component)


    });
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
