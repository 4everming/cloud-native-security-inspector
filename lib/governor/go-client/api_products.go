/*
Catalog Governor Service REST API

This is the service to track assets deployed in customer clusters.  NOTE: Catalog Governor Service is an internal tool for the Content-Building Ecosystem team.

API version: ${project.version}
Contact: content-building-ecosystem@vmware.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

type ProductsApi interface {

	/*
		GetProduct Get information for a product

		Returns information for a VAC product and its deprecations. OrgId is fetched from CSP token.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetProductRequest
	*/
	GetProduct(ctx context.Context) ApiGetProductRequest

	// GetProductExecute executes the request
	//  @return Product
	GetProductExecute(r ApiGetProductRequest) (*Product, *http.Response, error)
}

// ProductsApiService ProductsApi service
type ProductsApiService service

type ApiGetProductRequest struct {
	ctx        context.Context
	ApiService ProductsApi
	imageId    *string
}

// A string as the identifier of a product
func (r ApiGetProductRequest) ImageId(imageId string) ApiGetProductRequest {
	r.imageId = &imageId
	return r
}

func (r ApiGetProductRequest) Execute() (*Product, *http.Response, error) {
	return r.ApiService.GetProductExecute(r)
}

/*
GetProduct Get information for a product

Returns information for a VAC product and its deprecations. OrgId is fetched from CSP token.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetProductRequest
*/
func (a *ProductsApiService) GetProduct(ctx context.Context) ApiGetProductRequest {
	return ApiGetProductRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Product
func (a *ProductsApiService) GetProductExecute(r ApiGetProductRequest) (*Product, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Product
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductsApiService.GetProduct")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageId == nil {
		return localVarReturnValue, nil, reportError("imageId is required and must be specified")
	}
	if strlen(*r.imageId) > 255 {
		return localVarReturnValue, nil, reportError("imageId must have less than 255 elements")
	}

	localVarQueryParams.Add("image_id", parameterToString(*r.imageId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
