/*
Catalog Governor Service REST API

This is the service to track assets deployed in customer clusters.  NOTE: Catalog Governor Service is an internal tool for the Content-Building Ecosystem team.

API version: ${project.version}
Contact: content-building-ecosystem@vmware.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NonSupportPolicy VMWare Application Catalog Product's non-support policy information.
type NonSupportPolicy struct {
	// Human-readable name for the non-support policy.
	Name string `json:"name"`
	// Sentence explaining why the non-support policy is set.
	Reason               string `json:"reason"`
	AdditionalProperties map[string]interface{}
}

type _NonSupportPolicy NonSupportPolicy

// NewNonSupportPolicy instantiates a new NonSupportPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonSupportPolicy(name string, reason string) *NonSupportPolicy {
	this := NonSupportPolicy{}
	this.Name = name
	this.Reason = reason
	return &this
}

// NewNonSupportPolicyWithDefaults instantiates a new NonSupportPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonSupportPolicyWithDefaults() *NonSupportPolicy {
	this := NonSupportPolicy{}
	return &this
}

// GetName returns the Name field value
func (o *NonSupportPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NonSupportPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NonSupportPolicy) SetName(v string) {
	o.Name = v
}

// GetReason returns the Reason field value
func (o *NonSupportPolicy) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *NonSupportPolicy) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *NonSupportPolicy) SetReason(v string) {
	o.Reason = v
}

func (o NonSupportPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["reason"] = o.Reason
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NonSupportPolicy) UnmarshalJSON(bytes []byte) (err error) {
	varNonSupportPolicy := _NonSupportPolicy{}

	if err = json.Unmarshal(bytes, &varNonSupportPolicy); err == nil {
		*o = NonSupportPolicy(varNonSupportPolicy)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNonSupportPolicy struct {
	value *NonSupportPolicy
	isSet bool
}

func (v NullableNonSupportPolicy) Get() *NonSupportPolicy {
	return v.value
}

func (v *NullableNonSupportPolicy) Set(val *NonSupportPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableNonSupportPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableNonSupportPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonSupportPolicy(val *NonSupportPolicy) *NullableNonSupportPolicy {
	return &NullableNonSupportPolicy{value: val, isSet: true}
}

func (v NullableNonSupportPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonSupportPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
