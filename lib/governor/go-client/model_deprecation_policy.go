/*
Catalog Governor Service REST API

This is the service to track assets deployed in customer clusters.  NOTE: Catalog Governor Service is an internal tool for the Content-Building Ecosystem team.

API version: ${project.version}
Contact: content-building-ecosystem@vmware.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeprecationPolicy VMWare Application Catalog Product's deprecation policy information.
type DeprecationPolicy struct {
	// Effective date since which the deprecation policy will take effect.
	DeprecationDate string `json:"deprecation_date"`
	// Period of time in days **after** the deprecation date in which the support for the catalog item, might be reduced instead of being completely removed.
	GracePeriodDays *int32 `json:"grace_period_days,omitempty"`
	// Sentence explaining why the deprecation policy is set.
	Reason *string `json:"reason,omitempty"`
	// Sentence pointing to alternatives to the deprecated resource.
	Alternative          *string `json:"alternative,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DeprecationPolicy DeprecationPolicy

// NewDeprecationPolicy instantiates a new DeprecationPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeprecationPolicy(deprecationDate string) *DeprecationPolicy {
	this := DeprecationPolicy{}
	this.DeprecationDate = deprecationDate
	return &this
}

// NewDeprecationPolicyWithDefaults instantiates a new DeprecationPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeprecationPolicyWithDefaults() *DeprecationPolicy {
	this := DeprecationPolicy{}
	return &this
}

// GetDeprecationDate returns the DeprecationDate field value
func (o *DeprecationPolicy) GetDeprecationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeprecationDate
}

// GetDeprecationDateOk returns a tuple with the DeprecationDate field value
// and a boolean to check if the value has been set.
func (o *DeprecationPolicy) GetDeprecationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeprecationDate, true
}

// SetDeprecationDate sets field value
func (o *DeprecationPolicy) SetDeprecationDate(v string) {
	o.DeprecationDate = v
}

// GetGracePeriodDays returns the GracePeriodDays field value if set, zero value otherwise.
func (o *DeprecationPolicy) GetGracePeriodDays() int32 {
	if o == nil || o.GracePeriodDays == nil {
		var ret int32
		return ret
	}
	return *o.GracePeriodDays
}

// GetGracePeriodDaysOk returns a tuple with the GracePeriodDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecationPolicy) GetGracePeriodDaysOk() (*int32, bool) {
	if o == nil || o.GracePeriodDays == nil {
		return nil, false
	}
	return o.GracePeriodDays, true
}

// HasGracePeriodDays returns a boolean if a field has been set.
func (o *DeprecationPolicy) HasGracePeriodDays() bool {
	if o != nil && o.GracePeriodDays != nil {
		return true
	}

	return false
}

// SetGracePeriodDays gets a reference to the given int32 and assigns it to the GracePeriodDays field.
func (o *DeprecationPolicy) SetGracePeriodDays(v int32) {
	o.GracePeriodDays = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *DeprecationPolicy) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecationPolicy) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *DeprecationPolicy) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *DeprecationPolicy) SetReason(v string) {
	o.Reason = &v
}

// GetAlternative returns the Alternative field value if set, zero value otherwise.
func (o *DeprecationPolicy) GetAlternative() string {
	if o == nil || o.Alternative == nil {
		var ret string
		return ret
	}
	return *o.Alternative
}

// GetAlternativeOk returns a tuple with the Alternative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecationPolicy) GetAlternativeOk() (*string, bool) {
	if o == nil || o.Alternative == nil {
		return nil, false
	}
	return o.Alternative, true
}

// HasAlternative returns a boolean if a field has been set.
func (o *DeprecationPolicy) HasAlternative() bool {
	if o != nil && o.Alternative != nil {
		return true
	}

	return false
}

// SetAlternative gets a reference to the given string and assigns it to the Alternative field.
func (o *DeprecationPolicy) SetAlternative(v string) {
	o.Alternative = &v
}

func (o DeprecationPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["deprecation_date"] = o.DeprecationDate
	}
	if o.GracePeriodDays != nil {
		toSerialize["grace_period_days"] = o.GracePeriodDays
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Alternative != nil {
		toSerialize["alternative"] = o.Alternative
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DeprecationPolicy) UnmarshalJSON(bytes []byte) (err error) {
	varDeprecationPolicy := _DeprecationPolicy{}

	if err = json.Unmarshal(bytes, &varDeprecationPolicy); err == nil {
		*o = DeprecationPolicy(varDeprecationPolicy)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "deprecation_date")
		delete(additionalProperties, "grace_period_days")
		delete(additionalProperties, "reason")
		delete(additionalProperties, "alternative")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeprecationPolicy struct {
	value *DeprecationPolicy
	isSet bool
}

func (v NullableDeprecationPolicy) Get() *DeprecationPolicy {
	return v.value
}

func (v *NullableDeprecationPolicy) Set(val *DeprecationPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDeprecationPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDeprecationPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeprecationPolicy(val *DeprecationPolicy) *NullableDeprecationPolicy {
	return &NullableDeprecationPolicy{value: val, isSet: true}
}

func (v NullableDeprecationPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeprecationPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
